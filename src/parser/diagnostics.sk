string simpleQuote(string name) {
  return "\"".append(name).append("\"");
}

string typeToText(Type type) {
  return "type \"".append(type.toString()).append("\"");
}

string firstLineOf(string text) {
  int index = text.indexOf("\n");
  return index < 0 ? text : text.slice(0, index);
}

////////////////////////////////////////////////////////////////////////////////

void syntaxErrorInvalidEscapeSequence(Log log, Range range, string text) {
  log.error(range, "Invalid escape sequence ".append(firstLineOf(simpleQuote(text))));
}

void syntaxErrorInvalidCharacter(Log log, Range range, string text) {
  log.error(range, "Invalid character literal ".append(firstLineOf(text)));
}

void syntaxErrorInvalidInteger(Log log, Range range, string text) {
  log.error(range, "Invalid integer literal ".append(text));
}

void syntaxErrorExtraData(Log log, Range range, string text) {
  log.error(range, "Syntax error ".append(simpleQuote(text)));
}

void syntaxErrorUnexpectedToken(Log log, Token token) {
  log.error(token.range, "Unexpected ".append(token.kind.toString()));
}

void syntaxErrorExpectedToken(Log log, Token found, TokenKind expected) {
  log.error(found.range, "Expected ".append(expected.toString()).append(" but found ").append(found.kind.toString()));
}

void syntaxErrorUnterminatedToken(Log log, Range range, string what) {
  log.error(range, "Unterminated ".append(what));
}

void syntaxWarningDuplicateModifier(Log log, Range range, string modifier) {
  log.warning(range, "Duplicate modifier ".append(simpleQuote(modifier)));
}

void syntaxWarningRedundantModifier(Log log, Range range, string modifier) {
  log.warning(range, "Redundant modifier ".append(simpleQuote(modifier)));
}

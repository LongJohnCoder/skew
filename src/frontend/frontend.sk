import namespace io {
  int terminalWidth;
  void setColor(Color color);
  void print(string text);
  bool writeFile(string path, string contents);
  Source readFile(string path);
}

in io {
  export enum Color {
    DEFAULT = 0,
    BOLD = 1,
    GRAY = 90,
    RED = 91,
    GREEN = 92,
    YELLOW = 93,
    BLUE = 94,
    MAGENTA = 95,
    CYAN = 96,
  }

  void printWithColor(Color color, string text) {
    setColor(color);
    print(text);
    setColor(.DEFAULT);
  }
}

export namespace frontend {
  int main(List<string> args) {
    final List<string> inputs = [];
    final List<string> prepend = [];
    final List<string> append = [];
    final var flags = Flags();

    for (var i = 0; i < args.size(); i++) {
      final var arg = args.get(i);

      // Ignore empty arguments
      if (arg.size() == 0) continue;

      // Remember file paths
      if (arg.codeUnitAt(0) != '-') inputs.push(arg);

      // Check flags
      else if (arg == "-help" || arg == "--help" || arg == "-h") { printUsage(); return 0; }
      else if (arg == "-verbose" || arg == "--verbose") flags.verbose = true;
      else if (arg == "-optimize" || arg == "--optimize") flags.optimize = true;
      else if (arg == "-js-minify" || arg == "--js-minify") flags.jsMinify = true;
      else if (arg == "-js-source-map" || arg == "--js-source-map") flags.jsSourceMap = true;
      else if (arg.startsWith("-target=") || arg.startsWith("--target=")) flags.target = afterEquals(arg);
      else if (arg.startsWith("-output-file=") || arg.startsWith("--output-file=")) flags.outputFile = afterEquals(arg);
      else if (arg.startsWith("-prepend-file=") || arg.startsWith("--prepend-file=")) prepend.push(afterEquals(arg));
      else if (arg.startsWith("-append-file=") || arg.startsWith("--append-file=")) append.push(afterEquals(arg));

      // An unknown argument is an error
      else {
        printError("Unknown flag " + quoteString(arg, '"'));
        return 1;
      }

      continue;
    }

    // Input files are required
    if (inputs.size() == 0) {
      printError("Missing input files");
      return 1;
    }

    // The target language is required
    TargetFormat target;
    if (flags.target == "") { printError("Set the target language with \"--target=___\""); return 1; }
    else if (flags.target == "none") target = .NONE;
    else if (flags.target == "js") target = .JAVASCRIPT;
    else if (flags.target == "c++") target = .CPP;
    else if (flags.target == "lisp") target = .LISP_AST;
    else if (flags.target == "json") target = .JSON_AST;
    else if (flags.target == "xml") target = .XML_AST;
    else { printError("Unknown target language " + quoteString(flags.target, '"')); return 1; }

    // Translate frontend flags to compiler options
    final var options = CompilerOptions();
    final var optimizeJS = flags.optimize && target == .JAVASCRIPT;
    final var minifyJS = flags.jsMinify && target == .JAVASCRIPT;
    options.targetFormat = target;
    options.removeAsserts = flags.optimize;
    options.outputFile = flags.outputFile;
    options.foldAllConstants = optimizeJS;
    options.inlineAllFunctions = optimizeJS;
    options.convertAllInstanceToStatic = optimizeJS;
    options.jsMinify = minifyJS;
    options.jsMangle = minifyJS;
    options.jsSourceMap = flags.jsSourceMap && target == .JAVASCRIPT;
    options.inputs = readSources(inputs); if (options.inputs == null) return 1;
    options.prepend = readSources(prepend); if (options.prepend == null) return 1;
    options.append = readSources(append); if (options.append == null) return 1;

    // Run the compilation
    final var compiler = Compiler();
    final var result = compiler.compile(options);
    final var log = compiler.log;

    // Print any errors and warnings
    for (var i = 0; i < log.diagnostics.size(); i++) {
      var diagnostic = log.diagnostics.get(i);
      if (!diagnostic.range.isEmpty()) {
        io.printWithColor(.BOLD, diagnostic.range.locationString() + ": ");
      }
      switch (diagnostic.kind) {
        case .WARNING { printWarning(diagnostic.text); }
        case .ERROR { printError(diagnostic.text); }
      }
      if (!diagnostic.range.isEmpty()) {
        var formatted = diagnostic.range.format(io.terminalWidth);
        io.print(formatted.line + "\n");
        io.printWithColor(.GREEN, formatted.range + "\n");
      }
      if (!diagnostic.noteRange.isEmpty()) {
        io.printWithColor(.BOLD, diagnostic.noteRange.locationString() + ": ");
        printNote(diagnostic.noteText);
        var formatted = diagnostic.noteRange.format(io.terminalWidth);
        io.print(formatted.line + "\n");
        io.printWithColor(.GREEN, formatted.range + "\n");
      }
    }

    // Print the summary
    var hasErrors = log.errorCount > 0;
    var hasWarnings = log.warningCount > 0;
    var summary = "";
    if (hasWarnings) {
      summary += log.warningCount + (plural(log.warningCount, " warning", " warnings"));
      if (hasErrors) summary += " and ";
    }
    if (hasErrors) summary += log.errorCount + (plural(log.errorCount, " error", " errors"));
    if (hasWarnings || hasErrors) io.print(summary + " generated\n");
    if (flags.verbose) io.print(compiler.statistics(result) + "\n");
    if (hasErrors) return 1;

    // Write all outputs
    for (var i = 0; i < result.outputs.size(); i++) {
      var output = result.outputs.get(i);
      if (output.name == "") {
        io.print(output.contents);
        continue;
      }
      if (!io.writeFile(output.name, output.contents)) {
        printError("Could not write to " + quoteString(output.name, '"'));
        return 1;
      }
    }

    return 0;
  }
}

in frontend {
  void printError(string text) {
    io.printWithColor(.RED, "error: ");
    io.printWithColor(.BOLD, text + "\n");
  }

  void printNote(string text) {
    io.printWithColor(.GRAY, "note: ");
    io.printWithColor(.BOLD, text + "\n");
  }

  void printWarning(string text) {
    io.printWithColor(.MAGENTA, "warning: ");
    io.printWithColor(.BOLD, text + "\n");
  }

  void printUsage() {
    io.printWithColor(.GREEN, "\nusage: ");
    io.printWithColor(.BOLD, "skewc [flags] [inputs]\n");
    io.print("
  --help (-h)        Print this message.

  --verbose          Print out useful information about the compilation.

  --target=___       Set the target language. Valid target languages: none, js,
                     c++, lisp, json, and xml.

  --output-file=___  Combines all output into a single file.

  --prepend-file=___ Prepend the contents of this file to the output. Provide
                     this flag multiple times to prepend multiple files.

  --append-file=___  Append the contents of this file to the output. Provide
                     this flag multiple times to append multiple files.

  --js-minify        Transform the emitted JavaScript so that it takes up less
                     space. Make sure to use the \"export\" modifier on code
                     that shouldn't be minifed.

  --js-source-map    Generate a source map when targeting JavaScript. The source
                     map will be saved with the \".map\" extension in the same
                     directory as the main output file.

");
  }

  class Flags {
    var help = false;
    var verbose = false;
    var target = "";
    var outputFile = "";
    var jsMinify = false;
    var jsSourceMap = false;
    var optimize = false;
  }

  string afterEquals(string text) {
    var equals = text.indexOf("=");
    assert equals >= 0;
    return text.slice(equals + 1, text.size());
  }

  List<Source> readSources(List<string> files) {
    List<Source> result = [];
    for (var i = 0; i < files.size(); i++) {
      var file = files.get(i);
      var source = io.readFile(file);
      if (source == null) {
        printError("Could not read from " + quoteString(file, '"'));
        return null;
      }
      result.push(source);
    }
    return result;
  }
}

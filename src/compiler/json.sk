namespace json {
  class Emitter : IEmitter {
    CompilerOptions options;

    override List<Source> emitProgram(Node program) {
      List<Source> outputs = {};
      if (options.outputDirectory == "") {
        outputs.push(Source(options.outputFile, dump(program) + "\n"));
      } else {
        for (var i = 0; i < program.children.length; i++) {
          var file = program.children.get(i);
          outputs.push(Source(joinPath(options.outputDirectory, file.range.source.name + ".json"), dump(file) + "\n"));
        }
      }
      return outputs;
    }
  }

  string dump(Node node) {
    var visitor = DumpVisitor();
    visitor.visit(node);
    return visitor.result;
  }

  class DumpVisitor {
    var result = "";
    var indent = "";

    void visit(Node node) {
      if (node == null) {
        result = result + "null";
        return;
      }
      var outer = indent;
      indent = indent + "  ";
      result = result + "{\n" + indent + "\"kind\": " + simpleQuote(node.kind.prettyPrint());
      if (node.content != null) {
        result = result + ",\n" + indent + "\"content\": ";
        switch (node.content.type()) {
          case .INT { result = result + node.asInt(); }
          case .DOUBLE { result = result + node.asDouble(); }
          case .STRING { result = result + quoteString(node.asString(), '"'); }
        }
      }
      if (node.hasChildren()) {
        result = result + ",\n" + indent + "\"children\": [";
        var inner = indent;
        indent = indent + "  ";
        for (var i = 0; i < node.children.length; i++) {
          if (i > 0) result = result + ",";
          result = result + "\n" + indent;
          visit(node.children.get(i));
        }
        indent = inner;
        result = result + "\n" + indent + "]";
      }
      indent = outer;
      result = result + "\n" + indent + "}";
    }
  }
}

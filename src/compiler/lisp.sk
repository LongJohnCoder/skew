namespace lisp {
  class Emitter : IEmitter {
    CompilerOptions options;

    override List<Source> emitProgram(Node program) {
      List<Source> outputs = {};
      if (options.isSingleFileMode()) {
        outputs.push(new Source(options.outputFile, dump(program)));
      } else {
        int i;
        for (i = 0; i < program.children.length; i++) {
          Node file = program.children.get(i);
          outputs.push(new Source(joinPath(options.outputDirectory, file.range.source.name.append(".lisp")), dump(file)));
        }
      }
    }
  }

  string dump(Node node) {
    DumpVisitor visitor = new DumpVisitor();
    visitor.visit(node);
    return visitor.builder.toString();
  }

  class DumpVisitor {
    StringBuilder builder = new StringBuilder();
    string indent = "";

    void visit(Node node) {
      if (node == null) {
        builder.append("nil");
        return;
      }
      builder.append("(").append(node.kind.toString().toLowerCase());
      if (node.content != null) {
        switch (node.content.type()) {
          case ContentType.INT { builder.append(" ").append(node.asInt().toString()); }
          case ContentType.DOUBLE { builder.append(" ").append(node.asDouble().toString()); }
          case ContentType.STRING { builder.append(" ").append(quoteString(node.asString(), '"')); }
        }
      }
      if (node.hasChildren()) {
        string old = indent;
        indent = indent.append("  ");
        int i;
        for (i = 0; i < node.children.length; i++) {
          builder.append("\n").append(indent);
          visit(node.children.get(i));
        }
        indent = old;
      }
      builder.append(")");
    }
  }
}

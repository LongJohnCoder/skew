export namespace lisp {
  class Emitter : IEmitter {
    CompilerOptions options;

    override void patchProgram(Node program) {
    }

    override List<Source> emitProgram(Node program) {
      List<Source> outputs = [];
      if (options.outputDirectory == "") {
        outputs.push(Source(options.outputFile, dump(program) + "\n"));
      } else {
        for (var i = 0; i < program.children.length; i++) {
          var file = program.children.get(i);
          outputs.push(Source(joinPath(options.outputDirectory, file.range.source.name + ".lisp"), dump(file) + "\n"));
        }
      }
      return outputs;
    }
  }

  export string dump(Node node) {
    var visitor = DumpVisitor();
    visitor.visit(node);
    return visitor.result;
  }

  class DumpVisitor {
    var result = "";
    var indent = "";

    void visit(Node node) {
      if (node == null) {
        result += "nil";
        return;
      }
      result += "(" + node.kind.prettyPrint();
      if (node.content != null) {
        switch (node.content.type()) {
          case .INT { result += " " + node.asInt(); }
          case .BOOL { result += " " + node.asBool(); }
          case .DOUBLE { result += " " + node.asDouble(); }
          case .STRING { result += " " + quoteString(node.asString(), '"'); }
        }
      }
      if (node.hasChildren()) {
        var old = indent;
        indent += "  ";
        for (var i = 0; i < node.children.length; i++) {
          result += "\n" + indent;
          visit(node.children.get(i));
        }
        indent = old;
      }
      result += ")";
    }
  }
}

namespace lisp {
  class Emitter : IEmitter {
    CompilerOptions options;

    override List<Source> emitProgram(Node program) {
      List<Source> outputs = {};
      if (options.outputDirectory == "") {
        outputs.push(Source(options.outputFile, dump(program).append("\n")));
      } else {
        for (var i = 0; i < program.children.length; i++) {
          var file = program.children.get(i);
          outputs.push(Source(joinPath(options.outputDirectory, file.range.source.name.append(".lisp")), dump(file).append("\n")));
        }
      }
      return outputs;
    }
  }

  string dump(Node node) {
    var visitor = DumpVisitor();
    visitor.visit(node);
    return visitor.result;
  }

  class DumpVisitor {
    var result = "";
    var indent = "";

    void visit(Node node) {
      if (node == null) {
        result = result.append("nil");
        return;
      }
      result = result.append("(").append(node.kind.prettyPrint());
      if (node.content != null) {
        switch (node.content.type()) {
          case .INT { result = result.append(" ").append(node.asInt().toString()); }
          case .DOUBLE { result = result.append(" ").append(node.asDouble().toString()); }
          case .STRING { result = result.append(" ").append(quoteString(node.asString(), '"')); }
        }
      }
      if (node.hasChildren()) {
        var old = indent;
        indent = indent.append("  ");
        for (var i = 0; i < node.children.length; i++) {
          result = result.append("\n").append(indent);
          visit(node.children.get(i));
        }
        indent = old;
      }
      result = result.append(")");
    }
  }
}

enum SortTypes {
  NO,
  BY_INHERITANCE,
  BY_INHERITANCE_AND_VALUE,
  BY_INHERITANCE_AND_CONTAINMENT,
}

class Collector {
  SortTypes sort;
  List<Symbol> typeSymbols = {};
  List<Symbol> freeFunctionSymbols = {};
  List<Node> topLevelStatements = {};

  new(Node program, SortTypes sort) : sort = sort {
    assert program.kind == NodeKind.PROGRAM;
    collectStatements(program);
    sortTypeSymbols();
  }

  void collectStatements(Node node) {
    switch (node.kind) {
      case NodeKind.PROGRAM, NodeKind.FILE, NodeKind.EXTENSION, NodeKind.MODIFIER, NodeKind.BLOCK {
        collectChildStatements(node);
      }

      case NodeKind.NAMESPACE, NodeKind.CLASS, NodeKind.STRUCT, NodeKind.INTERFACE, NodeKind.ENUM, NodeKind.ENUM_FLAGS {
        if (node == node.symbol.node) {
          typeSymbols.push(node.symbol);
        }
        collectChildStatements(node);
      }

      case NodeKind.CONSTRUCTOR, NodeKind.FUNCTION {
        if (!node.symbol.enclosingSymbol.kind.isTypeWithInstances()) {
          freeFunctionSymbols.push(node.symbol);
        }
      }

      case
        NodeKind.VARIABLE_CLUSTER, NodeKind.IF, NodeKind.FOR,
        NodeKind.FOR_EACH, NodeKind.WHILE, NodeKind.DO_WHILE,
        NodeKind.RETURN, NodeKind.BREAK, NodeKind.CONTINUE,
        NodeKind.ASSERT, NodeKind.EXPRESSION, NodeKind.SWITCH {

        topLevelStatements.push(node);
      }
    }
  }

  void sortTypeSymbols() {
    if (sort == SortTypes.NO) {
      return;
    }

    int i;
    for (i = 1; i < typeSymbols.length; i++) {
      Symbol symbol = typeSymbols.get(i);
      int j;
      for (j = 0; j < i; j++) {
        if (typeComesBefore(symbol.type, typeSymbols.get(j).type)) {
          int k;
          for (k = i; k > j; k--) {
            typeSymbols.set(k, typeSymbols.get(k - 1));
          }
          typeSymbols.set(j, symbol);
          break;
        }
      }
    }
  }

  bool typeComesBefore(Type left, Type right) {
    if (right.hasBaseType(left)) {
      return true;
    }

    if (sort == SortTypes.BY_INHERITANCE_AND_VALUE && left.isStruct()) {
      List<Member> members = right.members.values();
      if (members != null) {
        int i;
        for (i = 0; i < members.length; i++) {
          if (members.get(i).type == left) {
            return true;
          }
        }
      }
    }

    if (sort == SortTypes.BY_INHERITANCE_AND_CONTAINMENT && right.symbol.isContainedBy(left.symbol)) {
      return true;
    }

    return false;
  }

  void collectChildStatements(Node node) {
    if (node.hasChildren()) {
      int i;
      for (i = 0; i < node.children.length; i++) {
        Node child = node.children.get(i);
        if (child != null) {
          collectStatements(child);
        }
      }
    }
  }
}

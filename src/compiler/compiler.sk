interface IEmitter {
  virtual List<Source> emitProgram(Node program);
}

export enum TargetFormat {
  // Target languages that run the resolver
  NONE,
  JS,

  // AST-only targets
  LISP_AST,
  JSON_AST,
  XML_AST,
}

export in TargetFormat {
  bool shouldRunResolver() {
    return this >= NONE && this <= JS;
  }
}

export class CompilerOptions {
  export TargetFormat targetFormat = .NONE;
  export List<Source> inputs = {};
  export List<Source> prepend = {};
  export List<Source> append = {};
  export var outputDirectory = "";
  export var outputFile = "";
  export var jsSourceMap = false;
  export var optimize = false;
  export var removeAsserts = false;
}

export class CompilerResult {
  export CompilerOptions options;
  export List<Source> outputs;
  export Node program;
  export Resolver resolver;
}

export class Compiler {
  static Source nativeLibrarySource = null;
  static Node nativeLibraryFile = null;

  var tokenizingTime = 0.0;
  var parsingTime = 0.0;
  var resolvingTime = 0.0;
  var callGraphTime = 0.0;
  var instanceToStaticTime = 0.0;
  var symbolMotionTime = 0.0;
  var functionInliningTime = 0.0;
  var constantFoldingTime = 0.0;
  var deadCodeRemovalTime = 0.0;
  var emitTime = 0.0;
  var lineCountingTime = 0.0;
  var totalTime = 0.0;
  var log = Log();

  string statistics(CompilerResult result) {
    // Line count
    var lineCountingStart = now();
    var lineCount = 0;
    lineCount += totalLineCount(result.options.prepend);
    lineCount += totalLineCount(result.options.inputs);
    lineCount += totalLineCount(result.options.append);
    var text =
      "Input line count: " + lineCount +
      "\nOutput line count: " + totalLineCount(result.outputs);
    lineCountingTime += now() - lineCountingStart;

    // Compilation time
    var optimizingTime = callGraphTime + instanceToStaticTime + symbolMotionTime + functionInliningTime + constantFoldingTime + deadCodeRemovalTime;
    text = text + "\nTotal compile time: " + formatNumber(totalTime + lineCountingTime) + "ms";
    if (tokenizingTime > 0) text = text + "\n  Tokenizing: " + formatNumber(tokenizingTime) + "ms";
    if (parsingTime > 0) text = text + "\n  Parsing: " + formatNumber(parsingTime) + "ms";
    if (resolvingTime > 0) text = text + "\n  Resolving: " + formatNumber(resolvingTime) + "ms";
    if (optimizingTime > 0) {
      text = text + "\n  Optimizing: " + formatNumber(optimizingTime) + "ms";
      text = text + "\n    Building call graph: " + formatNumber(callGraphTime) + "ms";
      text = text + "\n    Instance to static: " + formatNumber(instanceToStaticTime) + "ms";
      text = text + "\n    Symbol motion: " + formatNumber(symbolMotionTime) + "ms";
      text = text + "\n    Function inlining: " + formatNumber(functionInliningTime) + "ms";
      text = text + "\n    Constant folding: " + formatNumber(constantFoldingTime) + "ms";
      text = text + "\n    Dead code removal: " + formatNumber(deadCodeRemovalTime) + "ms";
    }
    if (emitTime > 0) text = text + "\n  Emit: " + formatNumber(emitTime) + "ms";
    if (lineCountingTime > 0) text = text + "\n  Counting lines: " + formatNumber(lineCountingTime) + "ms";

    // Sources
    text = text + sourceStatistics("Prepend", result.options.prepend);
    text = text + sourceStatistics("Inputs", result.options.inputs);
    text = text + sourceStatistics("Append", result.options.append);
    text = text + sourceStatistics("Outputs", result.outputs);
    return text;
  }

  static int totalLineCount(List<Source> sources) {
    var lineCount = 0;
    for (var i = 0; i < sources.length; i++) {
      lineCount += sources.get(i).lineCount();
    }
    return lineCount;
  }

  static string sourceStatistics(string name, List<Source> sources) {
    var text = "\n" + name + ": " + sources.length;
    for (var i = 0; i < sources.length; i++) {
      var source = sources.get(i);
      text = text + "\n  " + source.name + ": " + bytesToString(source.contents.length);
    }
    return text;
  }

  export CompilerResult compile(CompilerOptions options) {
    var totalStart = now();
    var program = Node.createProgram({});
    List<Source> outputs = {};

    // Cache the standard library for a small speed increase
    if (nativeLibrarySource != null) {
      program.appendChild(nativeLibraryFile.clone());
    } else {
      nativeLibrarySource = Source("<native>", NATIVE_LIBRARY);
      processInput(program, nativeLibrarySource);
      nativeLibraryFile = program.children.get(0).clone();
    }
    options.inputs.unshift(nativeLibrarySource);

    // Tokenize and parse each module individually
    for (var i = 1; i < options.inputs.length; i++) {
      processInput(program, options.inputs.get(i));
    }

    // Resolve everything together
    Resolver resolver = null;
    if (options.targetFormat.shouldRunResolver()) {
      var resolveStart = now();
      resolver = Resolver(log, options);
      resolver.run(program);
      resolvingTime += now() - resolveStart;
    }
    if (log.errorCount == 0) {

      // Optimize the module if the target format requires it
      if (options.targetFormat.shouldRunResolver()) {
        // Build a call graph
        var callGraphStart = now();
        var graph = CallGraph(program);
        callGraphTime += now() - callGraphStart;

        // Convert instance functions to static functions
        var instanceToStaticStart = now();
        InstanceToStaticPass.run(graph, options);
        instanceToStaticTime += now() - instanceToStaticStart;

        // Move functions
        var symbolMotionStart = now();
        SymbolMotionPass.run(resolver);
        symbolMotionTime += now() - symbolMotionStart;

        // Inline functions
        var functionInliningStart = now();
        FunctionInliningPass.run(graph, options);
        functionInliningTime += now() - functionInliningStart;

        // Fold constants
        if (options.optimize) {
          var constantFoldingStart = now();
          resolver.constantFolder.foldConstants(program);
          constantFoldingTime += now() - constantFoldingStart;
        }

        // Dead code elimination
        var deadCodeRemovalStart = now();
        DeadCodeRemovalPass.run(program, resolver);
        deadCodeRemovalTime += now() - deadCodeRemovalStart;
      }

      // Emit the module in the target format
      IEmitter emitter = null;
      switch (options.targetFormat) {
        case .NONE {}
        case .JS { emitter = js.Emitter(options, resolver.cache); }
        case .LISP_AST { emitter = lisp.Emitter(options); }
        case .JSON_AST { emitter = json.Emitter(options); }
        case .XML_AST { emitter = xml.Emitter(options); }
        default { assert false; }
      }
      if (emitter != null) {
        var emitStart = now();
        outputs = emitter.emitProgram(program);
        emitTime += now() - emitStart;
      }
    }

    totalTime += now() - totalStart;
    return CompilerResult(options, outputs, program, resolver);
  }

  void processInput(Node program, Source source) {
    var errorCount = log.errorCount;

    // Tokenize the source
    var tokenizeStart = now();
    var sourceTokens = tokenize(log, source);
    tokenizingTime += now() - tokenizeStart;

    // Parse the source if the tokenize was successful
    if (log.errorCount == errorCount) {
      var parseStart = now();
      var file = parseFile(log, sourceTokens);
      parsingTime += now() - parseStart;
      if (file != null) {
        program.appendChild(file);
      }
    }
  }
}

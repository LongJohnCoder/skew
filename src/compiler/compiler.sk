interface IEmitter {
  virtual List<Source> emitProgram(Node program);
}

enum TargetFormat {
  // Target languages that run the resolver
  NONE,
  JS,

  // AST-only targets
  LISP_AST,
  JSON_AST,
  XML_AST,
}

in TargetFormat {
  bool shouldRunResolver() {
    return this >= NONE && this <= JS;
  }
}

class CompilerOptions {
  TargetFormat targetFormat = .NONE;
  List<Source> inputs = {};
  string outputDirectory = "";
  string outputFile = "";
  bool jsSourceMap = false;

  bool isSingleFileMode() {
    assert outputFile.length > 0 || outputDirectory.length > 0;
    return outputFile.length > 0;
  }
}

class CompilerResult {
  CompilerOptions options;
  List<Source> outputs;
  Node program;
  Resolver resolver;
}

class Compiler {
  static Source nativeLibrarySource = null;
  static Node nativeLibraryFile = null;

  double tokenizeTime = 0;
  double parseTime = 0;
  double resolveTime = 0;
  double emitTime = 0;
  double totalTime = 0;
  Log log = Log();

  string statistics(CompilerResult result) {
    // Line count
    int lineCount = 0;
    int i;
    for (i = 0; i < result.options.inputs.length; i++) {
      lineCount = lineCount + result.options.inputs.get(i).lineCount();
    }
    string text = "Lines: ".append(lineCount.toString());

    // Compilation time
    text = text.append("\nTime: ").append(formatNumber(totalTime)).append("ms");
    if (tokenizeTime > 0) text = text.append("\n  Tokenize: ").append(formatNumber(tokenizeTime).append("ms"));
    if (parseTime > 0) text = text.append("\n  Parse: ").append(formatNumber(parseTime).append("ms"));
    if (resolveTime > 0) text = text.append("\n  Resolve: ").append(formatNumber(resolveTime).append("ms"));
    if (emitTime > 0) text = text.append("\n  Emit: ").append(formatNumber(emitTime).append("ms"));

    // Inputs
    text = text.append("\nInputs: ").append(result.options.inputs.length.toString());
    for (i = 0; i < result.options.inputs.length; i++) {
      Source source = result.options.inputs.get(i);
      text = text.append("\n  ").append(source.name).append(": ").append(bytesToString(source.contents.length));
    }

    // Outputs
    if (result.outputs != null) {
      text = text.append("\nOutputs: ").append(result.outputs.length.toString());
      for (i = 0; i < result.outputs.length; i++) {
        Source source = result.outputs.get(i);
        text = text.append("\n  ").append(source.name).append(": ").append(bytesToString(source.contents.length));
      }
    }

    return text;
  }

  CompilerResult compile(CompilerOptions options) {
    double totalStart = now();
    List<Source> outputs = null;
    Node program = Node.createProgram({});

    // Cache the standard library for a small speed increase
    if (nativeLibrarySource != null) {
      program.appendChild(nativeLibraryFile.clone());
    } else {
      nativeLibrarySource = Source("<native>", NATIVE_LIBRARY);
      processInput(program, nativeLibrarySource);
      nativeLibraryFile = program.children.get(0).clone();
    }
    options.inputs.unshift(nativeLibrarySource);

    // Tokenize and parse each module individually
    int i;
    for (i = 1; i < options.inputs.length; i++) {
      processInput(program, options.inputs.get(i));
    }

    // Resolve everything together
    Resolver resolver;
    if (options.targetFormat.shouldRunResolver()) {
      double resolveStart = now();
      resolver = Resolver(log);
      resolver.run(program);
      resolveTime = resolveTime + now() - resolveStart;
    }
    if (log.errorCount == 0) {

      // Create an emitter if there's a target language
      IEmitter emitter = null;
      switch (options.targetFormat) {
        case .NONE {}
        case .JS { emitter = js.Emitter(options, resolver.cache); }
        case .LISP_AST { emitter = lisp.Emitter(options); }
        case .JSON_AST { emitter = json.Emitter(options); }
        case .XML_AST { emitter = xml.Emitter(options); }
        default { assert false; }
      }

      // Emit the module in the target language
      if (emitter != null) {
        double emitStart = now();
        outputs = emitter.emitProgram(program);
        emitTime = emitTime + now() - emitStart;
      }
    }

    totalTime = totalTime + now() - totalStart;
    return CompilerResult(options, outputs, program, resolver);
  }

  void processInput(Node program, Source source) {
    int errorCount = log.errorCount;

    // Tokenize the source
    double tokenizeStart = now();
    List<Token> sourceTokens = tokenize(log, source);
    tokenizeTime = tokenizeTime + now() - tokenizeStart;

    // Parse the source if the tokenize was successful
    if (log.errorCount == errorCount) {
      double parseStart = now();
      Node file = parseFile(log, sourceTokens);
      parseTime = parseTime + now() - parseStart;
      if (file != null) {
        program.appendChild(file);
      }
    }
  }
}

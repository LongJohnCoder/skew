const var NATIVE_LIBRARY_CPP = "
import void cpp_toString();

import class int {
  inline string toString() { return untyped(cpp_toString)(this); }
}
import class bool {
  inline string toString() { return untyped(cpp_toString)(this); }
}
import class float {
  inline string toString() { return untyped(cpp_toString)(this); }
}
import class double {
  inline string toString() { return untyped(cpp_toString)(this); }
}

import class string {
  import int size();
  import string slice(int start, int end);
  import int indexOf(string value);
  import int lastIndexOf(string value);
  import string toLowerCase();
  import string toUpperCase();
  import static string fromCodeUnit(int value);
  import string get(int index);
  import int codeUnitAt(int index);
  string join(List<string> values) { var result = \"\"; for (var i = 0; i < values.size(); i++) { if (i > 0) result += this; result += values.get(i); } return result; }
  bool startsWith(string prefix) { return size() >= prefix.size() && slice(0, prefix.size()) == prefix; }
  bool endsWith(string suffix) { return size() >= suffix.size() && slice(size() - suffix.size(), size()) == suffix; }
  string repeat(int count) { var result = \"\"; for (var i = 0; i < count; i++) result += this; return result; }
}

export interface IComparison<T> {
  export virtual int compare(T left, T right);
}

import class List<T> {
  new();
  import int size();
  import void push(T value);
  import void unshift(T value);
  import List<T> slice(int start, int end);
  import int indexOf(T value);
  import int lastIndexOf(T value);
  import T shift();
  import T pop();
  import void reverse();
  import void sort(IComparison<T> comparison);
  import List<T> clone();
  import T remove(int index);
  import void insert(int index, T value);
  import T get(int index);
  import void set(int index, T value);
  import void swap(int a, int b);
}

import class StringMap<T> {
  new();
  import T get(string key);
  import T getOrDefault(string key, T defaultValue);
  import void set(string key, T value);
  import bool has(string key);
  import void remove(string key);
  import List<string> keys();
  import List<T> values();
  import StringMap<T> clone();
}

import class IntMap<T> {
  new();
  import T get(int key);
  import T getOrDefault(int key, T defaultValue);
  import void set(int key, T value);
  import bool has(int key);
  import void remove(int key);
  import List<int> keys();
  import List<T> values();
  import IntMap<T> clone();
}
";

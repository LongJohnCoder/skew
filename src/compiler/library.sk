final var NATIVE_LIBRARY = "
import struct int { import string toString(); }
import struct bool { import string toString(); }
import struct float { import string toString(); }
import struct double { import string toString(); }

import struct String {
  import static string fromCharCode(int value);
}

import struct string {
  import final int length;
  import string slice(int start, int end);
  import int indexOf(string value);
  import int lastIndexOf(string value);
  import string toLowerCase();
  import string toUpperCase();
  inline static string fromCodeUnit(int value) { return String.fromCharCode(value); }
  inline string get(int index) { return untyped(this)[index]; }
  inline string join(List<string> values) { return untyped(values).join(this); }
  inline int codeUnitAt(int index) { return untyped(this).charCodeAt(index); }
  inline string append(string value) { return untyped(this) + value; }
  bool startsWith(string prefix) { return length >= prefix.length && slice(0, prefix.length) == prefix; }
  bool endsWith(string suffix) { return length >= suffix.length && slice(length - suffix.length, length) == suffix; }
  string repeat(int count) { var result = \"\"; for (var i = 0; i < count; i++) result = result.append(this); return result; }
}

import class List<T> {
  import new();
  import final int length;
  import void push(T value);
  import void unshift(T value);
  import List<T> slice(int start, int end);
  import int indexOf(T value);
  import int lastIndexOf(T value);
  import T shift();
  import T pop();
  import void reverse();
  import void sort(int fn(T, T) callback);
  inline List<T> clone() { return untyped(this).slice(); }
  inline T remove(int index) { return untyped(this).splice(index, 1)[0]; }
  inline void insert(int index, T value) { untyped(this).splice(index, 0, value); }
  inline T get(int index) { return untyped(this)[index]; }
  inline void set(int index, T value) { untyped(this)[index] = value; }
  void swap(int a, int b) {
    var temp = get(a);
    set(a, get(b));
    set(b, temp);
  }
}

import class StringMap<T> {
  import new();
  import T get(string key);
  import T getOrDefault(string key, T defaultValue);
  import void set(string key, T value);
  import bool has(string key);
  import void remove(string key);
  import List<string> keys();
  import List<T> values();
  import StringMap<T> clone();
}

import class IntMap<T> {
  import new();
  import T get(int key);
  import T getOrDefault(int key, T defaultValue);
  import void set(int key, T value);
  import bool has(int key);
  import void remove(int key);
  import List<int> keys();
  import List<T> values();
  import IntMap<T> clone();
}

// TODO: Rename this to \"math\" since namespaces should be lower case
import namespace Math {
  import final double E;
  import final double PI;
  import final double NAN;
  import final double INFINITY;
  import double random();
  import double abs(double n);
  import double sin(double n);
  import double cos(double n);
  import double tan(double n);
  import double asin(double n);
  import double acos(double n);
  import double atan(double n);
  import double round(double n);
  import double floor(double n);
  import double ceil(double n);
  import double exp(double n);
  import double log(double n);
  import double sqrt(double n);
  import bool isNaN(double n);
  import bool isFinite(double n);
  import double atan2(double y, double x);
  import double pow(double base, double exponent);
  import double min(double a, double b);
  import double max(double a, double b);
  inline int imin(int a, int b) { return untyped(min)(a, b); }
  inline int imax(int a, int b) { return untyped(max)(a, b); }
}
";

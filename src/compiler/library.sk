const var NATIVE_LIBRARY = "
import class int { string toString(); }
import class bool { string toString(); }
import class float { string toString(); }
import class double { string toString(); }

import class string {
  int size();
  string slice(int start, int end);
  int indexOf(string value);
  int lastIndexOf(string value);
  string toLowerCase();
  string toUpperCase();
  static string fromCodeUnit(int value);
  string get(int index);
  string join(List<string> values);
  int codeUnitAt(int index);
  bool startsWith(string prefix);
  bool endsWith(string suffix);
  string repeat(int count);
}

import interface IComparison<T> {
  virtual int compare(T left, T right);
}

import class List<T> {
  new();
  int size();
  void push(T value);
  void unshift(T value);
  List<T> slice(int start, int end);
  int indexOf(T value);
  int lastIndexOf(T value);
  T shift();
  T pop();
  void reverse();
  void sort(IComparison<T> comparison);
  List<T> clone();
  T remove(int index);
  void insert(int index, T value);
  T get(int index);
  void set(int index, T value);
  void swap(int a, int b);
}

import class StringMap<T> {
  new();
  T get(string key);
  T getOrDefault(string key, T defaultValue);
  void set(string key, T value);
  bool has(string key);
  void remove(string key);
  List<string> keys();
  List<T> values();
  StringMap<T> clone();
}

import class IntMap<T> {
  new();
  T get(int key);
  T getOrDefault(int key, T defaultValue);
  void set(int key, T value);
  bool has(int key);
  void remove(int key);
  List<int> keys();
  List<T> values();
  IntMap<T> clone();
}
";

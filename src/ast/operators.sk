enum Associativity {
  NONE,
  LEFT,
  RIGHT,
}

struct OperatorInfo {
  final string text;
  final Precedence precedence;
  final Associativity associativity;
}

IntMap<OperatorInfo> createOperatorMap() {
  IntMap<OperatorInfo> result = IntMap<OperatorInfo>();

  result.set(NodeKind.NOT, OperatorInfo("!", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.POSITIVE, OperatorInfo("+", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.NEGATIVE, OperatorInfo("-", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.COMPLEMENT, OperatorInfo("~", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.PREFIX_INCREMENT, OperatorInfo("++", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.PREFIX_DECREMENT, OperatorInfo("--", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.POSTFIX_INCREMENT, OperatorInfo("++", Precedence.UNARY_POSTFIX, Associativity.NONE));
  result.set(NodeKind.POSTFIX_DECREMENT, OperatorInfo("--", Precedence.UNARY_POSTFIX, Associativity.NONE));

  result.set(NodeKind.ADD, OperatorInfo("+", Precedence.ADD, Associativity.LEFT));
  result.set(NodeKind.BITWISE_AND, OperatorInfo("&", Precedence.BITWISE_AND, Associativity.LEFT));
  result.set(NodeKind.BITWISE_OR, OperatorInfo("|", Precedence.BITWISE_OR, Associativity.LEFT));
  result.set(NodeKind.BITWISE_XOR, OperatorInfo("^", Precedence.BITWISE_XOR, Associativity.LEFT));
  result.set(NodeKind.DIVIDE, OperatorInfo("/", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.EQUAL, OperatorInfo("==", Precedence.EQUAL, Associativity.LEFT));
  result.set(NodeKind.GREATER_THAN, OperatorInfo(">", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.GREATER_THAN_OR_EQUAL, OperatorInfo(">=", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.IN, OperatorInfo("in", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.INDEX, OperatorInfo("[]", Precedence.MEMBER, Associativity.LEFT));
  result.set(NodeKind.LESS_THAN, OperatorInfo("<", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.LESS_THAN_OR_EQUAL, OperatorInfo("<=", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.LOGICAL_AND, OperatorInfo("&&", Precedence.LOGICAL_AND, Associativity.LEFT));
  result.set(NodeKind.LOGICAL_OR, OperatorInfo("||", Precedence.LOGICAL_OR, Associativity.LEFT));
  result.set(NodeKind.MULTIPLY, OperatorInfo("*", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.NOT_EQUAL, OperatorInfo("!=", Precedence.EQUAL, Associativity.LEFT));
  result.set(NodeKind.REMAINDER, OperatorInfo("%", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.SHIFT_LEFT, OperatorInfo("<<", Precedence.SHIFT, Associativity.LEFT));
  result.set(NodeKind.SHIFT_RIGHT, OperatorInfo(">>", Precedence.SHIFT, Associativity.LEFT));
  result.set(NodeKind.SUBTRACT, OperatorInfo("-", Precedence.ADD, Associativity.LEFT));

  result.set(NodeKind.ASSIGN, OperatorInfo("=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_ADD, OperatorInfo("+=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_AND, OperatorInfo("&=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_OR, OperatorInfo("|=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_XOR, OperatorInfo("^=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_DIVIDE, OperatorInfo("/=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_MULTIPLY, OperatorInfo("*=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_REMAINDER, OperatorInfo("%=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_LEFT, OperatorInfo("<<=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_RIGHT, OperatorInfo(">>=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SUBTRACT, OperatorInfo("-=", Precedence.ASSIGN, Associativity.RIGHT));

  return result;
}

final IntMap<OperatorInfo> operatorInfo = createOperatorMap();

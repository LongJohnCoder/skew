enum Associativity {
  NONE,
  LEFT,
  RIGHT,
}

struct OperatorInfo {
  final string text;
  final Precedence precedence;
  final Associativity associativity;
}

IntMap<OperatorInfo> createOperatorMap() {
  var result = IntMap<OperatorInfo>();

  result.set(NodeKind.NOT,                   OperatorInfo("!", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.POSITIVE,              OperatorInfo("+", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.NEGATIVE,              OperatorInfo("-", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.COMPLEMENT,            OperatorInfo("~", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.PREFIX_INCREMENT,      OperatorInfo("++", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.PREFIX_DECREMENT,      OperatorInfo("--", .UNARY_PREFIX, .NONE));
  result.set(NodeKind.POSTFIX_INCREMENT,     OperatorInfo("++", .UNARY_POSTFIX, .NONE));
  result.set(NodeKind.POSTFIX_DECREMENT,     OperatorInfo("--", .UNARY_POSTFIX, .NONE));

  result.set(NodeKind.ADD,                   OperatorInfo("+", .ADD, .LEFT));
  result.set(NodeKind.BITWISE_AND,           OperatorInfo("&", .BITWISE_AND, .LEFT));
  result.set(NodeKind.BITWISE_OR,            OperatorInfo("|", .BITWISE_OR, .LEFT));
  result.set(NodeKind.BITWISE_XOR,           OperatorInfo("^", .BITWISE_XOR, .LEFT));
  result.set(NodeKind.DIVIDE,                OperatorInfo("/", .MULTIPLY, .LEFT));
  result.set(NodeKind.EQUAL,                 OperatorInfo("==", .EQUAL, .LEFT));
  result.set(NodeKind.GREATER_THAN,          OperatorInfo(">", .COMPARE, .LEFT));
  result.set(NodeKind.GREATER_THAN_OR_EQUAL, OperatorInfo(">=", .COMPARE, .LEFT));
  result.set(NodeKind.IN,                    OperatorInfo("in", .COMPARE, .LEFT));
  result.set(NodeKind.INDEX,                 OperatorInfo("[]", .MEMBER, .LEFT));
  result.set(NodeKind.LESS_THAN,             OperatorInfo("<", .COMPARE, .LEFT));
  result.set(NodeKind.LESS_THAN_OR_EQUAL,    OperatorInfo("<=", .COMPARE, .LEFT));
  result.set(NodeKind.LOGICAL_AND,           OperatorInfo("&&", .LOGICAL_AND, .LEFT));
  result.set(NodeKind.LOGICAL_OR,            OperatorInfo("||", .LOGICAL_OR, .LEFT));
  result.set(NodeKind.MULTIPLY,              OperatorInfo("*", .MULTIPLY, .LEFT));
  result.set(NodeKind.NOT_EQUAL,             OperatorInfo("!=", .EQUAL, .LEFT));
  result.set(NodeKind.REMAINDER,             OperatorInfo("%", .MULTIPLY, .LEFT));
  result.set(NodeKind.SHIFT_LEFT,            OperatorInfo("<<", .SHIFT, .LEFT));
  result.set(NodeKind.SHIFT_RIGHT,           OperatorInfo(">>", .SHIFT, .LEFT));
  result.set(NodeKind.SUBTRACT,              OperatorInfo("-", .ADD, .LEFT));

  result.set(NodeKind.ASSIGN,                OperatorInfo("=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_ADD,            OperatorInfo("+=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_AND,    OperatorInfo("&=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_OR,     OperatorInfo("|=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_XOR,    OperatorInfo("^=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_DIVIDE,         OperatorInfo("/=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_MULTIPLY,       OperatorInfo("*=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_REMAINDER,      OperatorInfo("%=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_LEFT,     OperatorInfo("<<=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_RIGHT,    OperatorInfo(">>=", .ASSIGN, .RIGHT));
  result.set(NodeKind.ASSIGN_SUBTRACT,       OperatorInfo("-=", .ASSIGN, .RIGHT));

  return result;
}

final var operatorInfo = createOperatorMap();

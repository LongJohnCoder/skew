enum Associativity {
  NONE
  LEFT
  RIGHT
}

class OperatorInfo {
  final string text
  final Precedence precedence
  final Associativity associativity
}

IntMap<OperatorInfo> operatorInfo = {
  NodeKind.NOT:                   OperatorInfo("!", .UNARY_PREFIX, .NONE),
  NodeKind.POSITIVE:              OperatorInfo("+", .UNARY_PREFIX, .NONE),
  NodeKind.NEGATIVE:              OperatorInfo("-", .UNARY_PREFIX, .NONE),
  NodeKind.COMPLEMENT:            OperatorInfo("~", .UNARY_PREFIX, .NONE),
  NodeKind.PREFIX_INCREMENT:      OperatorInfo("++", .UNARY_PREFIX, .NONE),
  NodeKind.PREFIX_DECREMENT:      OperatorInfo("--", .UNARY_PREFIX, .NONE),
  NodeKind.POSTFIX_INCREMENT:     OperatorInfo("++", .UNARY_POSTFIX, .NONE),
  NodeKind.POSTFIX_DECREMENT:     OperatorInfo("--", .UNARY_POSTFIX, .NONE),
  NodeKind.PREFIX_DEREFERENCE:    OperatorInfo("*", .UNARY_PREFIX, .NONE),
  NodeKind.PREFIX_REFERENCE:      OperatorInfo("&", .UNARY_PREFIX, .NONE),
  NodeKind.POSTFIX_DEREFERENCE:   OperatorInfo("*", .UNARY_POSTFIX, .NONE),
  NodeKind.POSTFIX_REFERENCE:     OperatorInfo("&", .UNARY_POSTFIX, .NONE),
  NodeKind.NEW:                   OperatorInfo("new", .UNARY_PREFIX, .NONE),
  NodeKind.DELETE:                OperatorInfo("delete", .UNARY_PREFIX, .NONE),

  NodeKind.ADD:                   OperatorInfo("+", .ADD, .LEFT),
  NodeKind.BITWISE_AND:           OperatorInfo("&", .BITWISE_AND, .LEFT),
  NodeKind.BITWISE_OR:            OperatorInfo("|", .BITWISE_OR, .LEFT),
  NodeKind.BITWISE_XOR:           OperatorInfo("^", .BITWISE_XOR, .LEFT),
  NodeKind.DIVIDE:                OperatorInfo("/", .MULTIPLY, .LEFT),
  NodeKind.EQUAL:                 OperatorInfo("==", .EQUAL, .LEFT),
  NodeKind.GREATER_THAN:          OperatorInfo(">", .COMPARE, .LEFT),
  NodeKind.GREATER_THAN_OR_EQUAL: OperatorInfo(">=", .COMPARE, .LEFT),
  NodeKind.IN:                    OperatorInfo("in", .COMPARE, .LEFT),
  NodeKind.INDEX:                 OperatorInfo("[]", .MEMBER, .LEFT),
  NodeKind.IS:                    OperatorInfo("is", .COMPARE, .LEFT),
  NodeKind.LESS_THAN:             OperatorInfo("<", .COMPARE, .LEFT),
  NodeKind.LESS_THAN_OR_EQUAL:    OperatorInfo("<=", .COMPARE, .LEFT),
  NodeKind.LOGICAL_AND:           OperatorInfo("&&", .LOGICAL_AND, .LEFT),
  NodeKind.LOGICAL_OR:            OperatorInfo("||", .LOGICAL_OR, .LEFT),
  NodeKind.MULTIPLY:              OperatorInfo("*", .MULTIPLY, .LEFT),
  NodeKind.NOT_EQUAL:             OperatorInfo("!=", .EQUAL, .LEFT),
  NodeKind.POWER:                 OperatorInfo("**", .UNARY_PREFIX, .RIGHT),
  NodeKind.REMAINDER:             OperatorInfo("%", .MULTIPLY, .LEFT),
  NodeKind.SHIFT_LEFT:            OperatorInfo("<<", .SHIFT, .LEFT),
  NodeKind.SHIFT_RIGHT:           OperatorInfo(">>", .SHIFT, .LEFT),
  NodeKind.SUBTRACT:              OperatorInfo("-", .ADD, .LEFT),

  NodeKind.ASSIGN:                OperatorInfo("=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_ADD:            OperatorInfo("+=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_BITWISE_AND:    OperatorInfo("&=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_BITWISE_OR:     OperatorInfo("|=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_BITWISE_XOR:    OperatorInfo("^=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_DIVIDE:         OperatorInfo("/=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_MULTIPLY:       OperatorInfo("*=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_REMAINDER:      OperatorInfo("%=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_SHIFT_LEFT:     OperatorInfo("<<=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_SHIFT_RIGHT:    OperatorInfo(">>=", .ASSIGN, .RIGHT),
  NodeKind.ASSIGN_SUBTRACT:       OperatorInfo("-=", .ASSIGN, .RIGHT),

  NodeKind.ASSIGN_INDEX:          OperatorInfo("[]=", .ASSIGN, .RIGHT),
}

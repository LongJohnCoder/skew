enum Associativity {
  NONE,
  LEFT,
  RIGHT,
}

struct OperatorInfo {
  final string text;
  final Precedence precedence;
  final Associativity associativity;
}

IntMap<OperatorInfo> createOperatorMap() {
  IntMap<OperatorInfo> result = new IntMap<OperatorInfo>();

  result.set(NodeKind.NOT, new OperatorInfo("!", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.POSITIVE, new OperatorInfo("+", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.NEGATIVE, new OperatorInfo("-", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.COMPLEMENT, new OperatorInfo("~", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.PREFIX_INCREMENT, new OperatorInfo("++", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.PREFIX_DECREMENT, new OperatorInfo("--", Precedence.UNARY_PREFIX, Associativity.NONE));
  result.set(NodeKind.POSTFIX_INCREMENT, new OperatorInfo("++", Precedence.UNARY_POSTFIX, Associativity.NONE));
  result.set(NodeKind.POSTFIX_DECREMENT, new OperatorInfo("--", Precedence.UNARY_POSTFIX, Associativity.NONE));

  result.set(NodeKind.ADD, new OperatorInfo("+", Precedence.ADD, Associativity.LEFT));
  result.set(NodeKind.BITWISE_AND, new OperatorInfo("&", Precedence.BITWISE_AND, Associativity.LEFT));
  result.set(NodeKind.BITWISE_OR, new OperatorInfo("|", Precedence.BITWISE_OR, Associativity.LEFT));
  result.set(NodeKind.BITWISE_XOR, new OperatorInfo("^", Precedence.BITWISE_XOR, Associativity.LEFT));
  result.set(NodeKind.DIVIDE, new OperatorInfo("/", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.EQUAL, new OperatorInfo("==", Precedence.EQUAL, Associativity.LEFT));
  result.set(NodeKind.GREATER_THAN, new OperatorInfo(">", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.GREATER_THAN_OR_EQUAL, new OperatorInfo(">=", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.IN, new OperatorInfo("in", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.INDEX, new OperatorInfo("[]", Precedence.MEMBER, Associativity.LEFT));
  result.set(NodeKind.LESS_THAN, new OperatorInfo("<", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.LESS_THAN_OR_EQUAL, new OperatorInfo("<=", Precedence.COMPARE, Associativity.LEFT));
  result.set(NodeKind.LOGICAL_AND, new OperatorInfo("&&", Precedence.LOGICAL_AND, Associativity.LEFT));
  result.set(NodeKind.LOGICAL_OR, new OperatorInfo("||", Precedence.LOGICAL_OR, Associativity.LEFT));
  result.set(NodeKind.MULTIPLY, new OperatorInfo("*", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.NOT_EQUAL, new OperatorInfo("!=", Precedence.EQUAL, Associativity.LEFT));
  result.set(NodeKind.REMAINDER, new OperatorInfo("%", Precedence.MULTIPLY, Associativity.LEFT));
  result.set(NodeKind.SHIFT_LEFT, new OperatorInfo("<<", Precedence.SHIFT, Associativity.LEFT));
  result.set(NodeKind.SHIFT_RIGHT, new OperatorInfo(">>", Precedence.SHIFT, Associativity.LEFT));
  result.set(NodeKind.SUBTRACT, new OperatorInfo("-", Precedence.ADD, Associativity.LEFT));

  result.set(NodeKind.ASSIGN, new OperatorInfo("=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_ADD, new OperatorInfo("+=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_AND, new OperatorInfo("&=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_OR, new OperatorInfo("|=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_BITWISE_XOR, new OperatorInfo("^=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_DIVIDE, new OperatorInfo("/=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_MULTIPLY, new OperatorInfo("*=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_REMAINDER, new OperatorInfo("%=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_LEFT, new OperatorInfo("<<=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SHIFT_RIGHT, new OperatorInfo(">>=", Precedence.ASSIGN, Associativity.RIGHT));
  result.set(NodeKind.ASSIGN_SUBTRACT, new OperatorInfo("-=", Precedence.ASSIGN, Associativity.RIGHT));

  return result;
}

final IntMap<OperatorInfo> operatorInfo = createOperatorMap();

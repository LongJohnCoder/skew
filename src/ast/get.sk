in Node {
  Node fileBlock() {
    assert kind == NodeKind.FILE;
    assert children.length == 1;
    return children.get(0);
  }

  Node dotTarget() {
    assert kind == NodeKind.DOT;
    assert children.length == 2;
    return children.get(0);
  }

  Node dotName() {
    assert kind == NodeKind.DOT;
    assert children.length == 2;
    assert children.get(1) == null || children.get(1).kind == NodeKind.NAME;
    return children.get(1);
  }

  Node unaryValue() {
    assert kind.isUnaryOperator();
    assert children.length == 1;
    return children.get(0);
  }

  Node binaryLeft() {
    assert kind.isBinaryOperator();
    assert children.length == 2;
    return children.get(0);
  }

  Node binaryRight() {
    assert kind.isBinaryOperator();
    assert children.length == 2;
    return children.get(1);
  }

  Node hookTest() {
    assert kind == NodeKind.HOOK;
    assert children.length == 3;
    return children.get(0);
  }

  Node hookTrue() {
    assert kind == NodeKind.HOOK;
    assert children.length == 3;
    return children.get(1);
  }

  Node hookFalse() {
    assert kind == NodeKind.HOOK;
    assert children.length == 3;
    return children.get(2);
  }

  Node declarationName() {
    assert kind.isNamedDeclaration();
    assert children.length >= 1;
    assert children.get(0) == null || children.get(0).kind == NodeKind.NAME;
    return children.get(0);
  }

  Node declarationBlock() {
    assert kind.isNamedBlockDeclaration();
    assert children.length >= 2;
    assert children.get(1).kind == NodeKind.BLOCK;
    return children.get(1);
  }

  Node clusterType() {
    assert kind == NodeKind.VARIABLE_CLUSTER;
    assert children.length >= 1;
    return children.get(0);
  }

  List<Node> clusterVariables() {
    assert kind == NodeKind.VARIABLE_CLUSTER;
    assert children.length >= 1;
    return children.slice(1, children.length);
  }

  Node variableType() {
    assert kind == NodeKind.VARIABLE;
    assert children.length == 3;
    return children.get(1);
  }

  Node variableValue() {
    assert kind == NodeKind.VARIABLE;
    assert children.length == 3;
    return children.get(2);
  }

  Node usingAliasValue() {
    assert kind == NodeKind.USING_ALIAS;
    assert children.length == 2;
    return children.get(1);
  }

  Node usingNamespaceValue() {
    assert kind == NodeKind.USING_NAMESPACE;
    assert children.length == 1;
    return children.get(0);
  }

  Node modifierName() {
    assert kind == NodeKind.MODIFIER;
    assert children.length == 2;
    assert children.get(0).kind == NodeKind.NAME;
    return children.get(0);
  }

  List<Node> modifierStatements() {
    assert kind == NodeKind.MODIFIER;
    assert children.length >= 1;
    return children.slice(1, children.length);
  }

  Node castType() {
    assert kind.isCast();
    assert children.length == 2;
    return children.get(0);
  }

  Node castValue() {
    assert kind.isCast();
    assert children.length == 2;
    return children.get(1);
  }

  Node expressionValue() {
    assert kind == NodeKind.EXPRESSION;
    assert children.length == 1;
    return children.get(0);
  }

  Node ifTest() {
    assert kind == NodeKind.IF;
    assert children.length == 3;
    return children.get(0);
  }

  Node ifTrue() {
    assert kind == NodeKind.IF;
    assert children.length == 3;
    assert children.get(1) == null || children.get(1).kind == NodeKind.BLOCK;
    return children.get(1);
  }

  Node ifFalse() {
    assert kind == NodeKind.IF;
    assert children.length == 3;
    assert children.get(2) == null || children.get(2).kind == NodeKind.BLOCK;
    return children.get(2);
  }

  Node forSetup() {
    assert kind == NodeKind.FOR;
    assert children.length == 4;
    return children.get(0);
  }

  Node forTest() {
    assert kind == NodeKind.FOR;
    assert children.length == 4;
    return children.get(1);
  }

  Node forUpdate() {
    assert kind == NodeKind.FOR;
    assert children.length == 4;
    return children.get(2);
  }

  Node forBlock() {
    assert kind == NodeKind.FOR;
    assert children.length == 4;
    assert children.get(3).kind == NodeKind.BLOCK;
    return children.get(3);
  }

  Node forEachVariable() {
    assert kind == NodeKind.FOR_EACH;
    assert children.length == 3;
    assert children.get(0).kind == NodeKind.VARIABLE;
    return children.get(0);
  }

  Node forEachValue() {
    assert kind == NodeKind.FOR_EACH;
    assert children.length == 3;
    return children.get(1);
  }

  Node forEachBlock() {
    assert kind == NodeKind.FOR_EACH;
    assert children.length == 3;
    assert children.get(2).kind == NodeKind.BLOCK;
    return children.get(2);
  }

  Node whileTest() {
    assert kind == NodeKind.WHILE || kind == NodeKind.DO_WHILE;
    assert children.length == 2;
    return children.get(0);
  }

  Node whileBlock() {
    assert kind == NodeKind.WHILE || kind == NodeKind.DO_WHILE;
    assert children.length == 2;
    assert children.get(1).kind == NodeKind.BLOCK;
    return children.get(1);
  }

  Node defaultType() {
    assert kind == NodeKind.DEFAULT;
    assert children.length == 1;
    return children.get(0);
  }

  Node objectParameters() {
    assert kind.isObject();
    assert children.length == 4;
    assert children.get(1) == null || children.get(1).kind == NodeKind.NODE_LIST;
    return children.get(1);
  }

  Node objectBases() {
    assert kind.isObject();
    assert children.length == 4;
    assert children.get(2) == null || children.get(2).kind == NodeKind.NODE_LIST;
    return children.get(2);
  }

  Node objectBlock() {
    assert kind.isObject();
    assert children.length == 4;
    assert children.get(3).kind == NodeKind.BLOCK;
    return children.get(3);
  }

  Node functionArguments() {
    assert kind.isFunction();
    assert children.length >= 4;
    assert children.get(1).kind == NodeKind.NODE_LIST;
    return children.get(1);
  }

  Node functionBlock() {
    assert kind.isFunction();
    assert children.length >= 4;
    assert children.get(2).kind == NodeKind.BLOCK;
    return children.get(2);
  }

  Node functionResult() {
    assert kind == NodeKind.FUNCTION;
    assert children.length == 4;
    return children.get(3);
  }
}

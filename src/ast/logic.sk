in Node {
  void invertBooleanCondition() {
    assert kind.isExpression();
    switch (kind) {
      case NodeKind.TRUE { kind = NodeKind.FALSE; }
      case NodeKind.FALSE { kind = NodeKind.TRUE; }
      case NodeKind.NOT { become(unaryValue().remove()); }

      case NodeKind.EQUAL { kind = NodeKind.NOT_EQUAL; }
      case NodeKind.NOT_EQUAL { kind = NodeKind.EQUAL; }
      case NodeKind.LESS_THAN { kind = NodeKind.GREATER_THAN_OR_EQUAL; }
      case NodeKind.GREATER_THAN { kind = NodeKind.LESS_THAN_OR_EQUAL; }
      case NodeKind.LESS_THAN_OR_EQUAL { kind = NodeKind.GREATER_THAN; }
      case NodeKind.GREATER_THAN_OR_EQUAL { kind = NodeKind.LESS_THAN; }

      case NodeKind.LOGICAL_OR {
        kind = NodeKind.LOGICAL_AND;
        binaryLeft().invertBooleanCondition();
        binaryRight().invertBooleanCondition();
      }

      case NodeKind.LOGICAL_AND {
        kind = NodeKind.LOGICAL_OR;
        binaryLeft().invertBooleanCondition();
        binaryRight().invertBooleanCondition();
      }

      default {
        List<Node> children = removeChildren();
        become(Node.createUnary(NodeKind.NOT, clone().withChildren(children)));
      }
    }
  }

  bool blockAlwaysEndsWithReturn() {
    assert kind == NodeKind.BLOCK;
    if (!hasChildren()) {
      return false;
    }

    Node last = children.get(children.length - 1);
    switch (last.kind) {
      case NodeKind.RETURN {
        return true;
      }

      case NodeKind.IF {
        Node trueBlock = last.ifTrue();
        Node falseBlock = last.ifFalse();
        return falseBlock != null && trueBlock.blockAlwaysEndsWithReturn() && falseBlock.blockAlwaysEndsWithReturn();
      }

      case NodeKind.SWITCH {
        Node value = last.switchValue();
        List<Node> cases = last.switchCases();
        bool foundDefault = false;
        int i;
        for (i = 0; i < cases.length; i++) {
          Node node = cases.get(i);
          if (!node.caseBlock().blockAlwaysEndsWithReturn()) {
            return false;
          }
          if (node.caseValues().length == 0) {
            foundDefault = true;
          }
        }
        return foundDefault;
      }

      default {
        return false;
      }
    }
  }
}

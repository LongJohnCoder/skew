enum ContentType {
  BOOL
  INT
  DOUBLE
  STRING
}

class Content {
  virtual ContentType type()

  static bool equal(Content left, Content right) {
    if (left == right) return true
    if (left != null && right != null) {
      var type = left.type()
      if (type == right.type()) {
        switch (type) {
          case .BOOL { return ((BoolContent)left).value == ((BoolContent)right).value }
          case .INT { return ((IntContent)left).value == ((IntContent)right).value }
          case .DOUBLE { return ((DoubleContent)left).value == ((DoubleContent)right).value }
          case .STRING { return ((StringContent)left).value == ((StringContent)right).value }
        }
      }
    }
    return false
  }

  bool asBool() {
    assert type() == .BOOL
    return ((BoolContent)this).value
  }

  int asInt() {
    assert type() == .INT
    return ((IntContent)this).value
  }

  double asDouble() {
    assert type() == .DOUBLE
    return ((DoubleContent)this).value
  }

  string asString() {
    assert type() == .STRING
    return ((StringContent)this).value
  }
}

class BoolContent : Content {
  final bool value

  override ContentType type() {
    return .BOOL
  }
}

class IntContent : Content {
  final int value

  override ContentType type() {
    return .INT
  }
}

class DoubleContent : Content {
  final double value

  override ContentType type() {
    return .DOUBLE
  }
}

class StringContent : Content {
  final string value

  override ContentType type() {
    return .STRING
  }
}

in Node {
  bool isTrue() {
    return kind == .BOOL && asBool()
  }

  bool isFalse() {
    return kind == .BOOL && !asBool()
  }

  bool asBool() {
    assert kind == .BOOL
    return content.asBool()
  }

  int asInt() {
    assert kind == .INT
    return content.asInt()
  }

  double asDouble() {
    assert kind.isReal()
    return content.asDouble()
  }

  string asString() {
    assert kind == .NAME || kind == .STRING
    return content.asString()
  }
}

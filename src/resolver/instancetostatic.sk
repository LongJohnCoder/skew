import class console {
  static void log(string text);
}

class InstanceToStaticPass {
  static void run(Node program) {
    CallGraph graph = new CallGraph(program);
    int i;
    for (i = 0; i < graph.callInfo.length; i++) {
      CallInfo info = graph.callInfo.get(i);
      Symbol symbol = info.symbol;
      Symbol enclosingSymbol = symbol.enclosingSymbol;
      if (symbol.kind == SymbolKind.INSTANCE_FUNCTION && !symbol.isImportOrExport() && symbol.node.functionBlock() != null && (enclosingSymbol.isImport() || enclosingSymbol.kind.isEnum())) {
        // Change the instance function to a static function
        symbol.kind = SymbolKind.GLOBAL_FUNCTION;
        symbol.flags = symbol.flags | SymbolFlag.STATIC;
        Symbol thisSymbol = new Symbol("this", SymbolKind.LOCAL_VARIABLE);
        thisSymbol.type = enclosingSymbol.type;
        symbol.node.functionArguments().insertChild(0, Node.createVariable(Node.createName("this").withSymbol(thisSymbol), Node.createType(thisSymbol.type), null).withSymbol(thisSymbol));
        recursivelyReplaceThis(symbol.node.functionBlock(), thisSymbol);

        // Update all call sites
        int j;
        for (j = 0; j < info.callSites.length; j++) {
          Node callSite = info.callSites.get(j);
          switch (callSite.kind) {
            case NodeKind.CALL {
              Node value = callSite.callValue();
              Node target = value.dotTarget().remove();
              value.become(value.dotName().remove());
              callSite.insertChild(1, target);
            }

            case NodeKind.BIND {
              assert false; // TODO
            }

            default {
              assert false;
            }
          }
        }
      }
    }
  }

  static void recursivelyReplaceThis(Node node, Symbol symbol) {
    if (node.kind == NodeKind.THIS) {
      node.become(Node.createName(symbol.name).withSymbol(symbol).withType(symbol.type));
    } else if (node.hasChildren()) {
      int i;
      for (i = 0; i < node.children.length; i++) {
        Node child = node.children.get(i);
        if (child != null) {
          recursivelyReplaceThis(child, symbol);
        }
      }
    }
  }
}

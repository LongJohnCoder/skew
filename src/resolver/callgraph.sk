class CallInfo {
  Symbol symbol;
  List<Node> callSites = [];
}

class CallGraph {
  List<CallInfo> callInfo = [];
  var symbolToInfoIndex = IntMap<int>();

  new(Node program) {
    assert program.kind == .PROGRAM;
    visit(program);
  }

  void visit(Node node) {
    if (node.hasChildren()) {
      var children = node.children;
      for (var i = 0, n = children.size(); i < n; i++) {
        var child = children[i];
        if (child != null) {
          visit(child);
        }
      }
    }

    if (node.kind == .CALL) {
      var value = node.callValue();
      if (value.symbol != null && value.symbol.kind.isFunction()) {
        assert value.kind == .NAME || value.kind == .DOT;
        recordCallSite(value.symbol, node);
      }
    }

    else if (node.kind == .FUNCTION) {
      recordCallSite(node.symbol, null);
    }
  }

  void recordCallSite(Symbol symbol, Node node) {
    var index = symbolToInfoIndex.getOrDefault(symbol.uniqueID, -1);
    var info = index < 0 ? CallInfo(symbol) : callInfo[index];
    if (index < 0) {
      symbolToInfoIndex[symbol.uniqueID] = callInfo.size();
      callInfo.push(info);
    }
    if (node != null) {
      info.callSites.push(node);
    }
  }
}

enum SymbolKind {
  OTHER,
  PARAMETER,

  // Namespace kinds
  GLOBAL_NAMESPACE,
  NAMESPACE,

  // Enum kinds
  ENUM,
  ENUM_FLAGS,

  // Object kinds
  CLASS,
  STRUCT,
  INTERFACE,

  // Function kinds
  GLOBAL_FUNCTION,
  INSTANCE_FUNCTION,
  CONSTRUCTOR_FUNCTION,

  // Variable kinds
  LOCAL_VARIABLE,
  GLOBAL_VARIABLE,
  INSTANCE_VARIABLE,
}

in SymbolKind {
  bool isNamespace() {
    return this >= GLOBAL_NAMESPACE && this <= NAMESPACE;
  }

  bool isEnum() {
    return this >= ENUM && this <= ENUM_FLAGS;
  }

  bool isObject() {
    return this >= CLASS && this <= INTERFACE;
  }

  bool isFunction() {
    return this >= GLOBAL_FUNCTION && this <= CONSTRUCTOR_FUNCTION;
  }

  bool isVariable() {
    return this >= LOCAL_VARIABLE && this <= INSTANCE_VARIABLE;
  }
}

enum flags SymbolFlag {
  // Access flags
  PUBLIC,
  PRIVATE,
  PROTECTED,

  // Structural flags
  ABSTRACT,
  OVERRIDE,
  STATIC,
  VIRTUAL,

  // Optimization flags
  FINAL,
  INLINE,

  // Binding flags
  EXPORT,
  IMPORT,
}

class Symbol {
  string name;
  SymbolKind kind;
  SymbolFlag flags = 0;
  Node node = null;
  Type type = null;
  Symbol enclosingSymbol = null;

  bool isNamespace() {
    return kind == SymbolKind.GLOBAL_NAMESPACE || kind == SymbolKind.NAMESPACE;
  }

  bool isEnum() {
    return kind == SymbolKind.ENUM || kind == SymbolKind.ENUM_FLAGS;
  }

  bool isObject() {
    return kind >= SymbolKind.CLASS && kind <= SymbolKind.INTERFACE;
  }

  bool isFunction() {
    return kind >= SymbolKind.GLOBAL_FUNCTION && kind <= SymbolKind.CONSTRUCTOR_FUNCTION;
  }

  bool isVariable() {
    return kind >= SymbolKind.LOCAL_VARIABLE && kind <= SymbolKind.INSTANCE_VARIABLE;
  }
}

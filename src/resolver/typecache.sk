class TypeCache {
  Type globalType = createType(new Symbol("<global>", SymbolKind.GLOBAL_NAMESPACE));
  Type nullType = createType(new Symbol("null", SymbolKind.OTHER));

  // All expressions that have syntax and/or semantic errors have this type,
  // which silences all further errors related to that expression. When the
  // compiler comes a cross a symbol or expression of this type, it just skips
  // over it because an error has already been logged and further errors will
  // most likely just be noise.
  Type errorType = createType(new Symbol("<error>", SymbolKind.OTHER));

  // // TODO: Load these from Skew library code
  // Type voidType = null;
  // Type intType = null;
  // Type boolType = null;
  // Type floatType = null;
  // Type doubleType = null;
  // Type stringType = null;

  Type voidType = createType(new Symbol("void", SymbolKind.OTHER_TYPE));
  Type intType = createType(new Symbol("int", SymbolKind.STRUCT));
  Type boolType = createType(new Symbol("bool", SymbolKind.STRUCT));
  Type floatType = createType(new Symbol("float", SymbolKind.STRUCT));
  Type doubleType = createType(new Symbol("double", SymbolKind.STRUCT));
  Type stringType = createType(new Symbol("string", SymbolKind.STRUCT));

  IntMap<List<Type>> derivedTypes = new IntMap<List<Type>>();
  IntMap<List<Type>> functionTypes = new IntMap<List<Type>>();

  static Type createType(Symbol symbol) {
    Type type = new Type(symbol);
    symbol.type = type;
    symbol.flags = symbol.flags | SymbolFlag.INITIALIZED;
    return type;
  }

  static Type commonBaseClass(Type left, Type right) {
    Type a;
    for (a = left; a != null; a = a.baseClass()) {
      Type b;
      for (b = right; b != null; b = b.baseClass()) {
        if (a == b) {
          return a;
        }
      }
    }
    return null;
  }

  static int hashCodeForTypes(List<Type> relevantTypes) {
    int seed = 0;
    int i;
    for (i = 0; i < relevantTypes.length; i++) {
      seed = hashCombine(seed, relevantTypes.get(i).uniqueID);
    }
    return seed;
  }

  static bool areTypeListsEqual(List<Type> left, List<Type> right) {
    int n = left.length;
    if (n != right.length) {
      return false;
    }
    int i;
    for (i = 0; i < n; i++) {
      if (left.get(i) != right.get(i)) {
        return false;
      }
    }
    return true;
  }

  Type functionType(Type result, List<Type> arguments) {
    arguments.unshift(result);
    int hash = hashCodeForTypes(arguments);
    List<Type> existingTypes = functionTypes.getOrDefault(hash, null);
    if (existingTypes != null) {
      int i;
      for (i = 0; i < existingTypes.length; i++) {
        Type existing = existingTypes.get(i);
        if (areTypeListsEqual(existing.relevantTypes, arguments)) {
          return existing;
        }
      }
    } else {
      existingTypes = {};
      functionTypes.set(hash, existingTypes);
    }
    Type type = new Type(null);
    type.relevantTypes = arguments;
    existingTypes.push(type);
    return type;
  }

  bool canCastToNumeric(Type type) {
    return type.isNumeric(this) || type.isBool(this);
  }

  Type commonImplicitType(Type left, Type right) {
    // Short-circuit early for identical types
    if (left == right) return left;

    // Check implicit conversions
    if (canImplicitlyConvert(left, right)) return right;
    if (canImplicitlyConvert(right, left)) return left;

    // Implement common implicit types for numeric types
    if (left.isNumeric(this) && right.isNumeric(this)) {
      return left.isInteger(this) && right.isInteger(this) ? intType : doubleType;
    }

    // Check for a common base class
    if (left.isClass() && right.isClass()) {
      return commonBaseClass(left, right);
    }

    return null;
  }

  bool canImplicitlyConvert(Type from, Type to) {
    if (from == to) return true;
    if (from.isNull(this) && to.isReference()) return true;
    if ((from.isInteger(this) || from.isFloat(this)) && to.isDouble(this)) return true;
    if (from.isEnum() && (to.isInt(this) || to.isDouble(this))) return true;
    if (from.hasBaseType(to)) return true;
    return false;
  }

  bool canExplicitlyConvert(Type from, Type to) {
    if (canImplicitlyConvert(from, to)) return true;
    if (canCastToNumeric(from) && canCastToNumeric(to)) return true;
    if (to.hasBaseType(from)) return true;
    return false;
  }
}

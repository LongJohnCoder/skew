class TypeCache {
  Type globalType = createType(new Symbol("<global>", SymbolKind.GLOBAL_NAMESPACE));
  Type nullType = createType(new Symbol("null", SymbolKind.OTHER));
  Type voidType = createType(new Symbol("void", SymbolKind.OTHER_TYPE));

  // All expressions that have syntax and/or semantic errors have this type,
  // which silences all further errors related to that expression. When the
  // compiler comes a cross a symbol or expression of this type, it just skips
  // over it because an error has already been logged and further errors will
  // most likely just be noise.
  Type errorType = createType(new Symbol("<error>", SymbolKind.OTHER));

  // These are defined in the standard library
  Type intType = null;
  Type boolType = null;
  Type floatType = null;
  Type doubleType = null;
  Type stringType = null;

  IntMap<List<Type>> hashTable = new IntMap<List<Type>>();

  static Type createType(Symbol symbol) {
    Type type = new Type(symbol);
    symbol.type = type;
    symbol.flags = symbol.flags | SymbolFlag.INITIALIZED;
    return type;
  }

  static Type commonBaseClass(Type left, Type right) {
    Type a;
    for (a = left; a != null; a = a.baseClass()) {
      Type b;
      for (b = right; b != null; b = b.baseClass()) {
        if (a == b) {
          return a;
        }
      }
    }
    return null;
  }

  static int computeHashCode(Symbol symbol, List<Type> relevantTypes) {
    int seed = symbol == null ? -1 : symbol.type.uniqueID;
    int i;
    for (i = 0; i < relevantTypes.length; i++) {
      seed = hashCombine(seed, relevantTypes.get(i).uniqueID);
    }
    return seed;
  }

  static bool areTypeListsEqual(List<Type> left, List<Type> right) {
    int n = left.length;
    if (n != right.length) {
      return false;
    }
    int i;
    for (i = 0; i < n; i++) {
      if (left.get(i) != right.get(i)) {
        return false;
      }
    }
    return true;
  }

  Type substitute(Type type, List<Symbol> parameters, List<Type> substitutions) {
    if (type.isFunction()) {
      return parameterize(type, substituteAll(type.relevantTypes, parameters, substitutions));
    }
    if (!type.hasParameters()) {
      int index = parameters.indexOf(type.symbol);
      return index >= 0 ? substitutions.get(index) : type;
    }
    List<Type> types = {};
    int i;
    for (i = 0; i < type.symbol.parameters.length; i++) {
      types.push(type.substitutions.get(i));
    }
    return parameterize(type, substituteAll(types, parameters, substitutions));
  }

  List<Type> substituteAll(List<Type> types, List<Symbol> parameters, List<Type> substitutions) {
    List<Type> results = {};
    int i;
    for (i = 0; i < types.length; i++) {
      results.push(substitute(types.get(i), parameters, substitutions));
    }
    return results;
  }

  Type parameterize(Type unparameterized, List<Type> substitutions) {
    Symbol symbol = unparameterized != null ? unparameterized.symbol : null;

    if (symbol != null) {
      assert symbol.hasParameters();
      assert !symbol.type.isParameterized();
      assert symbol.parameters.length == substitutions.length;
    }

    // Hash the symbol along with all types
    int hash = computeHashCode(symbol, substitutions);
    List<Type> existingTypes = hashTable.getOrDefault(hash, null);

    // Check existing types in that hash bucket for a match
    if (existingTypes != null) {
      int i;
      for (i = 0; i < existingTypes.length; i++) {
        Type existing = existingTypes.get(i);
        assert symbol != existing.symbol || symbol == null || substitutions.length == existing.substitutions.length;
        if (symbol == existing.symbol && (
            symbol == null && areTypeListsEqual(substitutions, existing.relevantTypes) ||
            symbol != null && areTypeListsEqual(substitutions, existing.substitutions))) {
          return existing;
        }
      }
    }

    // Make a new hash bucket
    else {
      existingTypes = {};
      hashTable.set(hash, existingTypes);
    }

    // We didn't find a match, so make the type for the first time
    Type type = new Type(symbol);
    if (symbol != null) {
      type.substitutions = substitutions;
      type.relevantTypes = substituteAll(unparameterized.relevantTypes, symbol.parameters, type.substitutions);
      List<Member> members = unparameterized.members.values();
      int i;
      for (i = 0; i < members.length; i++) {
        Member member = members.get(i);
        Member clone = new Member(member.symbol);
        clone.dependency = member;
        clone.parameterizedType = type;
        type.addMember(clone);
      }
    } else {
      type.relevantTypes = substitutions;
    }
    existingTypes.push(type);
    return type;
  }

  Type functionType(Type result, List<Type> arguments) {
    arguments.unshift(result);
    return parameterize(null, arguments);
  }

  bool canCastToNumeric(Type type) {
    return type.isNumeric(this) || type.isBool(this);
  }

  Type commonImplicitType(Type left, Type right) {
    // Short-circuit early for identical types
    if (left == right) return left;

    // Check implicit conversions
    if (canImplicitlyConvert(left, right)) return right;
    if (canImplicitlyConvert(right, left)) return left;

    // Implement common implicit types for numeric types
    if (left.isNumeric(this) && right.isNumeric(this)) {
      return left.isInteger(this) && right.isInteger(this) ? intType :
        left.isFloat(this) && right.isFloat(this) ? floatType :
        doubleType;
    }

    // Check for a common base class
    if (left.isClass() && right.isClass()) {
      return commonBaseClass(left, right);
    }

    return null;
  }

  bool canImplicitlyConvert(Type from, Type to) {
    if (from == to) return true;
    if (from.isNull(this) && to.isReference()) return true;
    if ((from.isInteger(this) || from.isFloat(this)) && to.isDouble(this)) return true;
    if (from.isEnum() && (to.isInt(this) || to.isDouble(this))) return true;
    if (from.hasBaseType(to)) return true;
    return false;
  }

  bool canExplicitlyConvert(Type from, Type to) {
    if (canImplicitlyConvert(from, to)) return true;
    if (canCastToNumeric(from) && canCastToNumeric(to)) return true;
    if (to.hasBaseType(from)) return true;
    return false;
  }
}

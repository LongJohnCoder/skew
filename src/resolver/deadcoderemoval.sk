class DeadCodeRemovalPass {
  var includedSymbols = IntMap<bool>();

  static void run(Node program, Resolver resolver) {
    var pass = DeadCodeRemovalPass();
    pass.includeTopLevelStatements(program);

    // Include all exported symbols
    var symbols = resolver.allSymbols;
    for (var i = 0; i < symbols.length; i++) {
      var symbol = symbols.get(i);
      if (symbol.isExport() || symbol.isVirtual()) {
        pass.includeSymbol(symbol);
      }
    }

    // Remove symbols that aren't included
    for (var i = 0; i < symbols.length; i++) {
      var symbol = symbols.get(i);
      var node = symbol.node;
      if (node != null && !pass.includedSymbols.has(symbol.uniqueID)) {
        var kind = symbol.kind;
        if (kind == .GLOBAL_FUNCTION || kind == .INSTANCE_FUNCTION || kind == .NAMESPACE) {
          symbol.enclosingSymbol.type.members.remove(symbol.name);
          symbols.remove(i);
          node.remove();
          i--;
        }
      }
    }
  }

  void includeTopLevelStatements(Node node) {
    if (node.symbol != null && node.kind != .NAMESPACE && !node.isDeclarationName()) {
      includeSymbol(node.symbol);
    }

    if (node.hasChildren()) {
      for (var i = 0; i < node.children.length; i++) {
        var child = node.children.get(i);
        if (child != null && !child.kind.isFunction()) {
          includeTopLevelStatements(child);
        }
      }
    }
  }

  void includeSymbol(Symbol symbol) {
    if (!includedSymbols.has(symbol.uniqueID)) {
      includedSymbols.set(symbol.uniqueID, true);

      // This symbol depends on the enclosing symbol being present
      if (symbol.enclosingSymbol != null && symbol.kind != .INSTANCE_VARIABLE) {
        includeSymbol(symbol.enclosingSymbol);
      }

      // Recursively include child nodes non-structural nodes
      var node = symbol.node;
      if (node != null && !node.kind.isNamedBlockDeclaration()) {
        visit(node);
      }
    }
  }

  void visit(Node node) {
    if (node.symbol != null) {
      includeSymbol(node.symbol);
    }

    if (node.hasChildren()) {
      for (var i = 0; i < node.children.length; i++) {
        var child = node.children.get(i);
        if (child != null) {
          visit(child);
        }
      }
    }
  }
}

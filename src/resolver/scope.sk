class Scope {
  // This is the lexically enclosing scope. It will be null for the global scope.
  Scope lexicalParent;

  // This references the type containing the member symbols for this scope. If
  // this is null, lookups fall back to the list of locals.
  Type type = null;

  // This stores all local symbols. Local symbols automatically override any
  // member symbols on the type. Scopes inside function bodies will only contain
  // local symbols since those scopes don't have a type.
  StringMap<Member> locals = null;

  void insertGlobals(TypeCache cache) {
    type = cache.globalType;
    insert(cache.voidType.symbol);
    insert(cache.intType.symbol);
    insert(cache.boolType.symbol);
    insert(cache.floatType.symbol);
    insert(cache.doubleType.symbol);
    insert(cache.stringType.symbol);
  }

  void insert(Symbol symbol) {
    if (type != null) {
      type.addMember(new Member(symbol));
      return;
    }
    insertLocal(symbol);
  }

  void insertLocal(Symbol symbol) {
    if (locals == null) {
      locals = new StringMap<Member>();
    }
    assert !locals.has(symbol.name);
    locals.set(symbol.name, new Member(symbol));
  }

  Member find(string name) {
    Member member = findLocal(name);
    return member != null ? member : lexicalParent != null ? lexicalParent.find(name) : null;
  }

  Member findLocal(string name) {
    if (locals != null) {
      Member member = locals.getOrDefault(name, null);
      if (member != null) return member;
    }
    if (type != null) {
      Member member = type.findMember(name);
      if (member != null) return member;
    }
    return null;
  }
}

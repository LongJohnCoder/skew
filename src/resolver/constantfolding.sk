class ConstantFolder {
  TypeCache cache;

  void flattenBool(Node node, bool value) {
    assert node.type.isError(cache) || node.type.isBool(cache);
    node.removeChildren();
    node.kind = value ? .TRUE : .FALSE;
    node.content = null;
  }

  void flattenInt(Node node, int value) {
    assert node.type.isError(cache) || node.type.isInteger(cache);
    node.removeChildren();
    node.kind = .INT;
    node.content = IntContent(value);
  }

  void flattenReal(Node node, double value) {
    assert node.type.isError(cache) || node.type.isReal(cache);
    node.removeChildren();
    node.kind = node.type == cache.floatType ? .FLOAT : .DOUBLE;
    node.content = DoubleContent(value);
  }

  void foldConstants(Node node) {
    var kind = node.kind;

    // Fold operands first
    if (node.hasChildren()) {
      for (var i = 0; i < node.children.length; i++) {
        var child = node.children.get(i);
        if (child != null) {
          foldConstants(child);
        }
      }
    }

    // Symbols
    if (kind == .NAME) {
      if (node.symbol != null && node.symbol.isEnumValue()) {
        flattenInt(node, (int)node.symbol.enumValue);
      }
    }

    // Casts
    else if (kind.isCast()) {
      var type = node.castType().type;
      var value = node.castValue();
      var valueKind = value.kind;

      // Cast "bool" values
      if (valueKind.isBool()) {
        if (type.isBool(cache)) flattenBool(node, (bool)value.asBool());
        else if (type.isInteger(cache)) flattenInt(node, (int)value.asBool());
        else if (type.isReal(cache)) flattenReal(node, (double)value.asBool());
      }

      // Cast "int" values
      else if (valueKind == .INT) {
        if (type.isBool(cache)) flattenBool(node, (bool)value.asInt());
        else if (type.isInteger(cache)) flattenInt(node, (int)value.asInt());
        else if (type.isReal(cache)) flattenReal(node, (double)value.asInt());
      }

      // Cast "float" or "double" values
      else if (valueKind.isReal()) {
        if (type.isBool(cache)) flattenBool(node, (bool)value.asDouble());
        else if (type.isInteger(cache)) flattenInt(node, (int)value.asDouble());
        else if (type.isReal(cache)) flattenReal(node, (double)value.asDouble());
      }
    }

    // Unary operators
    else if (kind.isUnaryOperator()) {
      var value = node.unaryValue();
      var valueKind = value.kind;

      // Fold "bool" values
      if (valueKind.isBool()) {
        if (kind == .NOT) flattenBool(node, !value.asBool());
      }

      // Fold "int" values
      else if (valueKind == .INT) {
        if (kind == .POSITIVE) flattenInt(node, +value.asInt());
        else if (kind == .NEGATIVE) flattenInt(node, -value.asInt());
        else if (kind == .COMPLEMENT) flattenInt(node, ~value.asInt());
      }

      // Fold "float" or "double" values
      else if (valueKind.isReal()) {
        if (kind == .POSITIVE) flattenReal(node, +value.asDouble());
        else if (kind == .NEGATIVE) flattenReal(node, -value.asDouble());
      }

      // Partial evaluation
      else if (kind == .NOT) {
        switch (valueKind) {
          case .NOT, .EQUAL, .NOT_EQUAL, .LOGICAL_OR, .LOGICAL_AND, .LESS_THAN, .GREATER_THAN, .LESS_THAN_OR_EQUAL, .GREATER_THAN_OR_EQUAL {
            value.invertBooleanCondition(cache);
            node.become(value);
          }
        }
      }
    }

    // Binary operators
    else if (kind.isBinaryOperator()) {
      var left = node.binaryLeft();
      var right = node.binaryRight();
      var valueKind = left.kind;
      if (valueKind != right.kind && (!left.kind.isBool() || !right.kind.isBool())) return;

      // Fold "bool" values
      if (valueKind.isBool()) {
        switch (kind) {
          case .LOGICAL_AND { flattenBool(node, left.asBool() && right.asBool()); }
          case .LOGICAL_OR { flattenBool(node, left.asBool() || right.asBool()); }
          case .EQUAL { flattenBool(node, left.asBool() == right.asBool()); }
          case .NOT_EQUAL { flattenBool(node, left.asBool() != right.asBool()); }
        }
      }

      // Fold "int" values
      else if (valueKind == .INT) {
        switch (kind) {
          case .ADD { flattenInt(node, left.asInt() + right.asInt()); }
          case .SUBTRACT { flattenInt(node, left.asInt() - right.asInt()); }
          case .MULTIPLY { flattenInt(node, left.asInt() * right.asInt()); }
          case .DIVIDE { flattenInt(node, left.asInt() / right.asInt()); }
          case .REMAINDER { flattenInt(node, left.asInt() % right.asInt()); }
          case .SHIFT_LEFT { flattenInt(node, left.asInt() << right.asInt()); }
          case .SHIFT_RIGHT { flattenInt(node, left.asInt() >> right.asInt()); }
          case .BITWISE_AND { flattenInt(node, left.asInt() & right.asInt()); }
          case .BITWISE_OR { flattenInt(node, left.asInt() | right.asInt()); }
          case .BITWISE_XOR { flattenInt(node, left.asInt() ^ right.asInt()); }
          case .EQUAL { flattenBool(node, left.asInt() == right.asInt()); }
          case .NOT_EQUAL { flattenBool(node, left.asInt() != right.asInt()); }
          case .LESS_THAN { flattenBool(node, left.asInt() < right.asInt()); }
          case .GREATER_THAN { flattenBool(node, left.asInt() > right.asInt()); }
          case .LESS_THAN_OR_EQUAL { flattenBool(node, left.asInt() <= right.asInt()); }
          case .GREATER_THAN_OR_EQUAL { flattenBool(node, left.asInt() >= right.asInt()); }
        }
      }

      // Fold "float" and "double" values
      else if (valueKind.isReal()) {
        switch (kind) {
          case .ADD { flattenReal(node, left.asDouble() + right.asDouble()); }
          case .SUBTRACT { flattenReal(node, left.asDouble() - right.asDouble()); }
          case .MULTIPLY { flattenReal(node, left.asDouble() * right.asDouble()); }
          case .DIVIDE { flattenReal(node, left.asDouble() / right.asDouble()); }
          case .EQUAL { flattenBool(node, left.asDouble() == right.asDouble()); }
          case .NOT_EQUAL { flattenBool(node, left.asDouble() != right.asDouble()); }
          case .LESS_THAN { flattenBool(node, left.asDouble() < right.asDouble()); }
          case .GREATER_THAN { flattenBool(node, left.asDouble() > right.asDouble()); }
          case .LESS_THAN_OR_EQUAL { flattenBool(node, left.asDouble() <= right.asDouble()); }
          case .GREATER_THAN_OR_EQUAL { flattenBool(node, left.asDouble() >= right.asDouble()); }
        }
      }
    }
  }
}

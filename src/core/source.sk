class LineColumn {
  final int line; // 0-based index
  final int column; // 0-based index
}

export class Source {
  string name;
  string contents;

  // This maps line numbers to indices within contents
  List<int> lineOffsets = null;

  void computeLineOffsets() {
    if (lineOffsets != null) return;
    lineOffsets = [0];
    for (var i = 0; i < contents.size(); i++) {
      if (contents.codeUnitAt(i) == '\n') {
        lineOffsets.push(i + 1);
      }
    }
  }

  int lineCount() {
    computeLineOffsets();
    return lineOffsets.size() - 1; // Ignore the line offset at 0
  }

  string contentsOfLine(int line) {
    computeLineOffsets();
    if (line < 0 || line >= lineOffsets.size()) {
      return "";
    }
    var start = lineOffsets[line];
    var end = line + 1 < lineOffsets.size() ? lineOffsets[line + 1] - 1 : contents.size();
    return contents.slice(start, end);
  }

  LineColumn indexToLineColumn(int index) {
    computeLineOffsets();

    // Binary search to find the line
    var count = lineOffsets.size();
    var line = 0;
    while (count > 0) {
      var step = count / 2;
      var i = line + step;
      if (lineOffsets[i] <= index) {
        line = i + 1;
        count = count - step - 1;
      } else {
        count = step;
      }
    }

    // Use the line to compute the column
    var column = line > 0 ? index - lineOffsets[line - 1] : index;
    return LineColumn(line - 1, column);
  }
}

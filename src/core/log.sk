enum DiagnosticKind {
  ERROR,
  WARNING,
}

class Diagnostic {
  DiagnosticKind kind;
  Range range;
  string text;
  Range noteRange = Range.EMPTY;
  string noteText = "";
}

class Log {
  List<Diagnostic> diagnostics = {};
  int warningCount = 0;
  int errorCount = 0;

  void error(Range range, string text) {
    assert !range.isEmpty();
    diagnostics.push(new Diagnostic(DiagnosticKind.ERROR, range, text));
    errorCount++;
  }

  void warning(Range range, string text) {
    assert !range.isEmpty();
    diagnostics.push(new Diagnostic(DiagnosticKind.WARNING, range, text));
    warningCount++;
  }

  void note(Range range, string text) {
    assert !range.isEmpty();
    Diagnostic last = diagnostics.get(diagnostics.length - 1);
    last.noteRange = range;
    last.noteText = text;
  }

  string toString() {
    StringBuilder builder = new StringBuilder();
    int i;

    // Emit the log assuming an infinite terminal width
    for (i = 0; i < diagnostics.length; i++) {
      Diagnostic diagnostic = diagnostics.get(i);
      FormattedRange formatted = diagnostic.range.format(0);
      builder.append(diagnostic.range.locationString()).append(diagnostic.kind == DiagnosticKind.ERROR ? ": error: " : ": warning: ")
        .append(diagnostic.text).append("\n").append(formatted.line).append("\n").append(formatted.range).append("\n");

      // Append notes after the diagnostic they apply to
      if (!diagnostic.noteRange.isEmpty()) {
        formatted = diagnostic.noteRange.format(0);
        builder.append(diagnostic.noteRange.locationString()).append(": note: ").append(diagnostic.noteText).append("\n")
          .append(formatted.line).append("\n").append(formatted.range).append("\n");
      }
    }

    return builder.toString();
  }
}

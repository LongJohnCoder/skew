import double parseIntLiteral(string value, int base); // Returns NaN on error
import double parseDoubleLiteral(string value);
import string encodeBase64(string data);
import double now(); // The current time in seconds

final string BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
final string HEX = "0123456789ABCDEF";

int hashCombine(int left, int right) {
  return left ^ right - 0x61c88647 + (left << 6) + (left >> 2);
}

int parseHexCharacter(int c) {
  if (c >= '0' && c <= '9') return c - '0';
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  return -1;
}

StringContent parseStringLiteral(Log log, Range range, string text) {
  var isValidString = true;
  var result = "";
  var start = 1; // Append long runs of unescaped characters using a single slice() for speed
  var i = 1;
  while (i + 1 < text.length) {
    var c = text.codeUnitAt(i);
    if (c == '\\') {
      result = result.append(text.slice(start, i));
      var escape = i++;
      if (i + 1 < text.length) {
        c = text.codeUnitAt(i++);
        if (c == 'n') { result = result.append("\n"); start = i; continue; }
        else if (c == 'r') { result = result.append("\r"); start = i; continue; }
        else if (c == 't') { result = result.append("\t"); start = i; continue; }
        else if (c == 'e') { result = result.append("\e"); start = i; continue; }
        else if (c == '0') { result = result.append("\0"); start = i; continue; }
        else if (c == '\\' || c == '"' || c == '\'') { result = result.append(string.fromCodeUnit(c)); start = i; continue; }
        else if (c == 'x') {
          var c0 = i + 1 < text.length ? parseHexCharacter(text.codeUnitAt(i++)) : -1;
          var c1 = i + 1 < text.length ? parseHexCharacter(text.codeUnitAt(i++)) : -1;
          if (c0 != -1 && c1 != -1) { result = result.append(string.fromCodeUnit(c0 << 4 | c1)); start = i; continue; }
        }
      }
      syntaxErrorInvalidEscapeSequence(log, Range(range.source, range.start + escape, range.start + i), text.slice(escape, i));
      isValidString = false;
    } else {
      i++;
    }
  }
  result = result.append(text.slice(start, i));
  return isValidString ? StringContent(result) : null;
}

string quoteString(string text, int quote) {
  var result = "";
  var quoteString = string.fromCodeUnit(quote);
  result = result.append(quoteString);
  var start = 0; // Append long runs of unescaped characters using a single slice() for speed
  int i;
  for (i = 0; i < text.length; i++) {
    var c = text.codeUnitAt(i);
    if (c == quote) { result = result.append(text.slice(start, i)).append("\\").append(quoteString); start = i + 1; }
    else if (c == '\n') { result = result.append(text.slice(start, i)).append("\\n"); start = i + 1; }
    else if (c == '\r') { result = result.append(text.slice(start, i)).append("\\r"); start = i + 1; }
    else if (c == '\t') { result = result.append(text.slice(start, i)).append("\\t"); start = i + 1; }
    else if (c == '\0') { result = result.append(text.slice(start, i)).append("\\0"); start = i + 1; }
    else if (c == '\\') { result = result.append(text.slice(start, i)).append("\\\\"); start = i + 1; }
    else if (c < ' ' || c >= 0x7F && c <= 0xFF) { result = result.append(text.slice(start, i)).append("\\x").append(HEX.get(c >> 4)).append(HEX.get(c & 15)); start = i + 1; }
  }
  result = result.append(text.slice(start, i)).append(quoteString);
  return result;
}

// TODO: Move this into the standard library
string replace(string text, string before, string after) {
  var result = "";
  int index;
  while ((index = text.indexOf(before)) != -1) {
    result = result.append(text.slice(0, index)).append(after);
    text = text.slice(index + before.length, text.length);
  }
  return result.append(text);
}

string plural(int value, string singular, string plural) {
  return value == 1 ? singular : plural;
}

struct SplitPath {
  final string directory;
  final string entry;
}

SplitPath splitPath(string path) {
  var slashIndex = Math.imax(path.lastIndexOf("/"), path.lastIndexOf("\\"));
  return slashIndex == -1
    ? SplitPath(".", path)
    : SplitPath(path.slice(0, slashIndex), path.slice(slashIndex + 1, path.length));
}

string joinPath(string directory, string entry) {
  return directory.append("/").append(entry);
}

string formatNumber(double number) {
  return (Math.round(number * 10) / 10).toString();
}

enum ByteSize {
  KB = 1 << 10,
  MB = 1 << 20,
  GB = 1 << 30,
}

string bytesToString(int bytes) {
  if (bytes == 1) return "1 byte";
  if (bytes < ByteSize.KB) return bytes.toString().append(" bytes");
  if (bytes < ByteSize.MB) return formatNumber(bytes / (double)ByteSize.KB).append("kb");
  if (bytes < ByteSize.GB) return formatNumber(bytes / (double)ByteSize.MB).append("mb");
  return formatNumber(bytes / (double)ByteSize.GB).append("gb");
}

// TODO: Remove these in release builds
namespace trace {
  void indent() {}
  void log(string text) {}
  void dedent() {}
}

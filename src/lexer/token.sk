class Token {
  Range range
  TokenKind kind

  int firstCodeUnit() {
    if (kind == .END_OF_FILE) return 0
    assert range.start < range.source.contents.size()
    return range.source.contents[range.start]
  }

  string text() {
    return range.toString()
  }
}

var REMOVE_NEWLINE_BEFORE = {
  TokenKind.CATCH: 0,
  TokenKind.COLON: 0,
  TokenKind.ELSE: 0,
  TokenKind.QUESTION_MARK: 0,
  TokenKind.RIGHT_BRACE: 0,
  TokenKind.RIGHT_BRACKET: 0,
  TokenKind.RIGHT_PARENTHESIS: 0,
}

var REMOVE_NEWLINE_AFTER = {
  TokenKind.ASSERT: 0,
  TokenKind.CASE: 0,
  TokenKind.CATCH: 0,
  TokenKind.COLON: 0,
  TokenKind.COMMA: 0,
  TokenKind.NEWLINE: 0,
  TokenKind.SEMICOLON: 0,
  TokenKind.TRY: 0,

  TokenKind.LEFT_BRACE: 0,
  TokenKind.LEFT_BRACKET: 0,
  TokenKind.LEFT_PARENTHESIS: 0,

  TokenKind.PLUS: 0,
  TokenKind.BITWISE_AND: 0,
  TokenKind.BITWISE_OR: 0,
  TokenKind.BITWISE_XOR: 0,
  TokenKind.DIVIDE: 0,
  TokenKind.EQUAL: 0,
  TokenKind.GREATER_THAN: 0,
  TokenKind.GREATER_THAN_OR_EQUAL: 0,
  TokenKind.IN: 0,
  TokenKind.IS: 0,
  TokenKind.LESS_THAN: 0,
  TokenKind.LESS_THAN_OR_EQUAL: 0,
  TokenKind.LOGICAL_AND: 0,
  TokenKind.LOGICAL_OR: 0,
  TokenKind.MULTIPLY: 0,
  TokenKind.NOT_EQUAL: 0,
  TokenKind.REMAINDER: 0,
  TokenKind.SHIFT_LEFT: 0,
  TokenKind.SHIFT_RIGHT: 0,
  TokenKind.MINUS: 0,

  TokenKind.ASSIGN: 0,
  TokenKind.ASSIGN_PLUS: 0,
  TokenKind.ASSIGN_BITWISE_AND: 0,
  TokenKind.ASSIGN_BITWISE_OR: 0,
  TokenKind.ASSIGN_BITWISE_XOR: 0,
  TokenKind.ASSIGN_DIVIDE: 0,
  TokenKind.ASSIGN_MULTIPLY: 0,
  TokenKind.ASSIGN_REMAINDER: 0,
  TokenKind.ASSIGN_SHIFT_LEFT: 0,
  TokenKind.ASSIGN_SHIFT_RIGHT: 0,
  TokenKind.ASSIGN_MINUS: 0,
}

void prepareTokens(List<Token> tokens) {
  TokenKind previousKind = .NULL
  List<Token> stack = []
  var count = 0

  for (var i = 0, n = tokens.size(); i < n; i++) {
    var token = tokens[i]

    // Skip null placeholders after tokens that start with a greater than. Each
    // token that may need to split has enough nulls after it for all the pieces.
    // It's a lot faster to remove null gaps during token preparation than to
    // insert pieces in the middle of the token stream (O(n) vs O(n^2)).
    if (token == null) {
      continue
    }

    // Compress tokens to eliminate unused null gaps
    tokens[count] = token
    count++

    // Tokens that start with a greater than may need to be split
    var tokenKind = token.kind
    var tokenStartsWithGreaterThan = token.firstCodeUnit() == '>'

    // Remove newlines based on the previous token or the next token to enable
    // line continuations. Make sure to be conservative. We want to be like
    // Python, not like JavaScript ASI! Anything that is at all ambiguous
    // should be disallowed.
    if (token.kind == .NEWLINE && previousKind in REMOVE_NEWLINE_AFTER) {
      count--
      continue
    } else if (token.kind in REMOVE_NEWLINE_BEFORE && previousKind == .NEWLINE) {
      tokens[count - 2] = token
      count--

      // Hack for comments after else (TODO: FIXME)
      while (count >= 2 && tokens[count - 2].kind == .NEWLINE) {
        tokens[count - 2] = token
        count--
      }
    }
    previousKind = tokenKind

    // Remove tokens from the stack if they aren't working out
    while (stack.size() != 0) {
      var top = stack.last()
      var topKind = top.kind

      // Stop parsing a type if we find a token that no type expression uses
      if (topKind == .LESS_THAN && tokenKind != .LESS_THAN && tokenKind != .IDENTIFIER && tokenKind != .IS &&
          tokenKind != .COMMA && tokenKind != .DOT && tokenKind != .TICK && !tokenStartsWithGreaterThan) {
        stack.pop()
      } else {
        break
      }
    }

    // Group open
    if (tokenKind == .LEFT_PARENTHESIS || tokenKind == .LEFT_BRACE || tokenKind == .LEFT_BRACKET || tokenKind == .LESS_THAN) {
      stack.push(token)
      continue
    }

    // Group close
    if (tokenKind == .RIGHT_PARENTHESIS || tokenKind == .RIGHT_BRACE || tokenKind == .RIGHT_BRACKET || tokenStartsWithGreaterThan) {
      // Search for a matching opposite token
      while (stack.size() != 0) {
        var top = stack.last()
        var topKind = top.kind

        // Don't match closing angle brackets that don't work since they are just operators
        if (tokenStartsWithGreaterThan && topKind != .LESS_THAN) {
          break
        }

        // Consume the current token
        stack.pop()

        // Special-case angle brackets matches
        if (topKind == .LESS_THAN) {

          // Retentative matches that didn't work out
          if (!tokenStartsWithGreaterThan) {
            continue
          }

          // Break apart operators that start with a closing angle bracket
          if (tokenKind != .GREATER_THAN) {
            var range = token.range
            var start = range.start
            assert i + 1 < tokens.size()
            assert tokens[i + 1] == null
            assert
              tokenKind == .SHIFT_RIGHT ||
              tokenKind == .GREATER_THAN_OR_EQUAL ||
              tokenKind == .ASSIGN_SHIFT_RIGHT
            tokens[i + 1] = Token(Range(range.source, start + 1, range.end),
              tokenKind == .SHIFT_RIGHT ? .GREATER_THAN :
              tokenKind == .GREATER_THAN_OR_EQUAL ? .ASSIGN :
              .GREATER_THAN_OR_EQUAL)
            token.range = Range(range.source, start, start + 1)
          }

          // Convert < and > into bounds for type parameter lists
          top.kind = .START_PARAMETER_LIST
          token.kind = .END_PARAMETER_LIST
        }

        // Stop the search since we found a match
        break
      }
    }
  }

  // Trim off the remaining tokens due to null gap removal
  while (tokens.size() > count) {
    tokens.pop()
  }
}

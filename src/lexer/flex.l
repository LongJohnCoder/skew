%%

\n[ \t\r\n]*                         NEWLINE;
[ \t\r]+                             WHITESPACE;
"//".*                               WHITESPACE;
"/""*"([^*]|"*"*[^*/])*"*"+"/"       WHITESPACE;

"#define"                            PREPROCESSOR_DEFINE;
"#elif"                              PREPROCESSOR_ELIF;
"#else"                              PREPROCESSOR_ELSE;
"#endif"                             PREPROCESSOR_ENDIF;
"#error"                             PREPROCESSOR_ERROR;
"#if"                                PREPROCESSOR_IF;
"#warning"                           PREPROCESSOR_WARNING;
"alias"                              ALIAS;
"assert"                             ASSERT;
"break"                              BREAK;
"case"                               CASE;
"catch"                              CATCH;
"class"                              CLASS;
"const"                              CONST;
"continue"                           CONTINUE;
"default"                            DEFAULT;
"delete"                             DELETE;
"do"                                 DO;
"else"                               ELSE;
"enum"                               ENUM;
"export"                             EXPORT;
"false"                              FALSE;
"final"                              FINAL;
"for"                                FOR;
"if"                                 IF;
"import"                             IMPORT;
"in"                                 IN;
"inline"                             INLINE;
"interface"                          INTERFACE;
"is"                                 IS;
"namespace"                          NAMESPACE;
"new"                                NEW;
"null"                               NULL;
"override"                           OVERRIDE;
"private"                            PRIVATE;
"protected"                          PROTECTED;
"public"                             PUBLIC;
"pure"                               PURE;
"return"                             RETURN;
"static"                             STATIC;
"super"                              SUPER;
"switch"                             SWITCH;
"this"                               THIS;
"true"                               TRUE;
"try"                                TRY;
"using"                              USING;
"var"                                VAR;
"virtual"                            VIRTUAL;
"while"                              WHILE;

"("                                  LEFT_PARENTHESIS;
")"                                  RIGHT_PARENTHESIS;
"{"                                  LEFT_BRACE;
"}"                                  RIGHT_BRACE;
"["                                  LEFT_BRACKET;
"]"                                  RIGHT_BRACKET;
"."                                  DOT;
"~"                                  TILDE;
","                                  COMMA;
";"                                  SEMICOLON;
"?"                                  QUESTION_MARK;
"::"                                 DOUBLE_COLON;
":"                                  COLON;
"++"                                 INCREMENT;
"--"                                 DECREMENT;
"&&"                                 LOGICAL_AND;
"||"                                 LOGICAL_OR;
"+="                                 ASSIGN_PLUS;
"-="                                 ASSIGN_MINUS;
"*="                                 ASSIGN_MULTIPLY;
"/="                                 ASSIGN_DIVIDE;
"%="                                 ASSIGN_REMAINDER;
"&="                                 ASSIGN_BITWISE_AND;
"|="                                 ASSIGN_BITWISE_OR;
"^="                                 ASSIGN_BITWISE_XOR;
"<<="                                ASSIGN_SHIFT_LEFT;
">>="                                ASSIGN_SHIFT_RIGHT;
"->"                                 ARROW;
"+"                                  PLUS;
"-"                                  MINUS;
"*"                                  MULTIPLY;
"/"                                  DIVIDE;
"%"                                  REMAINDER;
"&"                                  BITWISE_AND;
"|"                                  BITWISE_OR;
"^"                                  BITWISE_XOR;
"<<"                                 SHIFT_LEFT;
">>"                                 SHIFT_RIGHT;
"!="                                 NOT_EQUAL;
"=="                                 EQUAL;
"<="                                 LESS_THAN_OR_EQUAL;
">="                                 GREATER_THAN_OR_EQUAL;
"<"                                  LESS_THAN;
">"                                  GREATER_THAN;
"!"                                  NOT;
"="                                  ASSIGN;
"`"                                  TICK;

['](\\.|[^\\'])*[']                  CHARACTER;
["](\\.|[^\\"])*["]                  STRING;
[A-Za-z_][A-Za-z0-9_]*               IDENTIFIER;
#[A-Za-z_][A-Za-z0-9_]*              INVALID_PREPROCESSOR_DIRECTIVE;
@[A-Za-z_][A-Za-z0-9_]*              ANNOTATION;
[0-9]+?\.[0-9]+([eE][-+]?[0-9]+)?f   FLOAT;
[0-9]+?\.[0-9]+([eE][-+]?[0-9]+)?    DOUBLE;
0b[0-1]+                             INT_BINARY;
0o[0-7]+                             INT_OCTAL;
0x[A-Fa-f0-9]+                       INT_HEX;
[0-9]+([eE][-+]?[0-9]+)?f            FLOAT;
[0-9]+[eE][-+]?[0-9]+                DOUBLE;
[0-9]+                               INT_DECIMAL;

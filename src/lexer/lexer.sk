////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ANNOTATION,
  ARROW,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CATCH,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  DOUBLE_COLON,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  INVALID_PREPROCESSOR_DIRECTIVE,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NEWLINE,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  POWER,
  PREPROCESSOR_DEFINE,
  PREPROCESSOR_ELIF,
  PREPROCESSOR_ELSE,
  PREPROCESSOR_ENDIF,
  PREPROCESSOR_ERROR,
  PREPROCESSOR_IF,
  PREPROCESSOR_WARNING,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  PURE,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  SUPER,
  SWITCH,
  THIS,
  TICK,
  TILDE,
  TRUE,
  TRY,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}

final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .TICK, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .POWER, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .ARROW, .DOUBLE, .YY_INVALID_ACTION, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_IF, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .WHITESPACE, .YY_INVALID_ACTION, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRY, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .DOUBLE, .WHITESPACE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PURE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ELIF, .PREPROCESSOR_ELSE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ALIAS, .IDENTIFIER, .BREAK, .CATCH, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ENDIF, .PREPROCESSOR_ERROR, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .SWITCH, .IDENTIFIER, .PREPROCESSOR_DEFINE, .INVALID_PREPROCESSOR_DIRECTIVE, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .VIRTUAL, .PREPROCESSOR_WARNING, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION]
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 30, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 46, 47, 48, 49, 50, 51, 31, 52, 53, 54, 55, 56, 57, 58, 59, 31, 60, 61, 62, 63, 1]
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1]
final var yy_base = [0, 0, 0, 428, 429, 425, 62, 401, 61, 27, 400, 61, 62, 429, 429, 58, 60, 429, 62, 60, 79, 89, 81, 402, 429, 50, 398, 64, 429, 0, 0, 429, 429, 397, 429, 29, 369, 56, 71, 66, 83, 87, 77, 364, 82, 378, 87, 73, 365, 101, 373, 429, 91, 429, 429, 414, 146, 429, 93, 429, 412, 0, 373, 104, 371, 375, 429, 429, 429, 134, 429, 408, 429, 429, 429, 429, 429, 429, 429, 139, 133, 0, 429, 143, 152, 170, 136, 429, 156, 0, 429, 385, 429, 429, 429, 384, 0, 0, 429, 363, 354, 365, 112, 368, 355, 137, 0, 350, 347, 350, 353, 350, 346, 0, 346, 145, 0, 348, 338, 347, 352, 150, 149, 338, 354, 339, 344, 343, 143, 342, 334, 333, 339, 429, 429, 0, 341, 133, 342, 329, 0, 328, 190, 429, 195, 201, 202, 0, 202, 206, 178, 197, 0, 429, 429, 0, 342, 337, 340, 335, 336, 321, 175, 336, 331, 330, 322, 319, 315, 330, 0, 316, 320, 323, 322, 0, 315, 309, 304, 305, 311, 316, 301, 301, 313, 299, 299, 310, 0, 301, 0, 295, 301, 302, 304, 304, 299, 293, 293, 212, 216, 429, 288, 288, 293, 0, 294, 284, 282, 290, 279, 279, 0, 0, 280, 290, 283, 277, 279, 275, 273, 0, 273, 287, 282, 277, 0, 269, 275, 267, 279, 0, 0, 274, 261, 274, 265, 0, 0, 271, 260, 266, 0, 256, 0, 0, 0, 0, 260, 261, 266, 252, 0, 0, 251, 263, 261, 251, 256, 246, 260, 246, 208, 217, 0, 211, 0, 217, 0, 212, 0, 0, 203, 0, 196, 196, 0, 0, 0, 0, 212, 210, 206, 204, 190, 0, 0, 0, 0, 196, 0, 199, 200, 0, 201, 200, 197, 0, 165, 0, 0, 0, 163, 136, 0, 52, 0, 0, 0, 429, 258, 260, 265, 267, 270, 273, 278, 283, 286, 288, 293]
final var yy_def = [0, 309, 1, 309, 309, 309, 309, 309, 310, 311, 309, 309, 312, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 313, 314, 309, 309, 309, 309, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 309, 309, 309, 309, 309, 309, 309, 310, 309, 310, 315, 315, 315, 315, 315, 309, 309, 309, 312, 309, 312, 309, 309, 309, 309, 309, 309, 309, 309, 316, 317, 309, 309, 309, 309, 309, 309, 309, 318, 309, 309, 309, 309, 309, 309, 319, 314, 309, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 309, 309, 315, 315, 315, 315, 315, 315, 315, 309, 309, 316, 320, 316, 317, 309, 309, 309, 309, 318, 309, 309, 319, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 315, 315, 315, 315, 315, 315, 309, 309, 309, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 315, 315, 315, 315, 315, 315, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 315, 315, 315, 315, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 315, 315, 314, 314, 314, 314, 314, 314, 314, 314, 315, 314, 314, 314, 314, 314, 314, 314, 314, 0, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309]
final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 30, 30, 41, 30, 30, 30, 42, 43, 44, 45, 46, 47, 48, 49, 50, 30, 30, 51, 52, 53, 54, 56, 56, 59, 62, 63, 67, 72, 70, 64, 74, 91, 92, 99, 76, 79, 79, 79, 79, 100, 73, 65, 75, 68, 77, 78, 94, 95, 80, 308, 102, 60, 71, 81, 83, 59, 84, 84, 84, 84, 103, 82, 83, 104, 84, 84, 84, 84, 85, 105, 107, 117, 108, 133, 127, 118, 85, 110, 106, 85, 87, 109, 128, 60, 86, 111, 113, 85, 87, 119, 112, 121, 114, 115, 122, 130, 88, 116, 124, 125, 70, 126, 145, 131, 89, 56, 56, 146, 137, 134, 138, 150, 150, 139, 79, 79, 79, 79, 79, 79, 79, 79, 159, 160, 71, 83, 142, 84, 84, 84, 84, 151, 151, 151, 307, 194, 163, 142, 143, 85, 148, 164, 148, 195, 180, 149, 149, 149, 149, 172, 85, 87, 178, 150, 150, 187, 173, 179, 181, 188, 199, 306, 199, 305, 145, 200, 200, 200, 200, 146, 145, 145, 151, 151, 151, 201, 146, 149, 149, 149, 149, 149, 149, 149, 149, 208, 209, 200, 200, 200, 200, 200, 200, 200, 200, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 87, 294, 293, 292, 291, 290, 289, 288, 287, 286, 143, 58, 58, 58, 58, 58, 61, 61, 69, 69, 69, 69, 69, 96, 96, 97, 97, 97, 135, 135, 135, 144, 144, 144, 144, 144, 147, 285, 147, 147, 147, 152, 152, 155, 155, 155, 146, 146, 146, 146, 146, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 207, 206, 205, 204, 203, 202, 198, 197, 196, 193, 192, 191, 190, 189, 186, 185, 184, 183, 182, 177, 176, 175, 174, 171, 170, 169, 168, 167, 166, 165, 162, 161, 158, 157, 156, 154, 153, 309, 141, 140, 136, 309, 55, 132, 129, 123, 120, 101, 98, 93, 90, 66, 57, 55, 309, 3, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309]
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 9, 9, 11, 15, 12, 9, 16, 25, 25, 35, 18, 19, 19, 19, 19, 35, 15, 9, 16, 11, 18, 18, 27, 27, 20, 305, 37, 8, 12, 20, 22, 58, 22, 22, 22, 22, 37, 20, 21, 37, 21, 21, 21, 21, 22, 38, 39, 42, 39, 52, 47, 42, 21, 40, 38, 22, 22, 39, 47, 58, 21, 40, 41, 21, 21, 42, 40, 44, 41, 41, 44, 49, 21, 41, 46, 46, 69, 46, 80, 49, 21, 56, 56, 80, 63, 52, 63, 86, 86, 63, 79, 79, 79, 79, 83, 83, 83, 83, 102, 102, 69, 84, 79, 84, 84, 84, 84, 88, 88, 88, 303, 137, 105, 79, 79, 84, 85, 105, 85, 137, 122, 85, 85, 85, 85, 115, 84, 84, 121, 150, 150, 128, 115, 121, 122, 128, 142, 302, 142, 298, 144, 142, 142, 142, 142, 144, 145, 146, 151, 151, 151, 145, 146, 148, 148, 148, 148, 149, 149, 149, 149, 162, 162, 199, 199, 199, 199, 200, 200, 200, 200, 296, 295, 294, 292, 291, 289, 284, 283, 282, 281, 149, 280, 275, 274, 272, 269, 267, 265, 263, 262, 200, 310, 310, 310, 310, 310, 311, 311, 312, 312, 312, 312, 312, 313, 313, 314, 314, 314, 315, 315, 315, 316, 316, 316, 316, 316, 317, 261, 317, 317, 317, 318, 318, 319, 319, 319, 320, 320, 320, 320, 320, 260, 259, 258, 257, 256, 255, 254, 251, 250, 249, 248, 243, 241, 240, 239, 236, 235, 234, 233, 230, 229, 228, 227, 225, 224, 223, 222, 220, 219, 218, 217, 216, 215, 214, 211, 210, 209, 208, 207, 206, 204, 203, 202, 198, 197, 196, 195, 194, 193, 192, 191, 189, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 174, 173, 172, 171, 169, 168, 167, 166, 165, 164, 163, 161, 160, 159, 158, 157, 156, 141, 139, 138, 136, 132, 131, 130, 129, 127, 126, 125, 124, 123, 120, 119, 118, 117, 114, 112, 111, 110, 109, 108, 107, 104, 103, 101, 100, 99, 95, 91, 71, 65, 64, 62, 60, 55, 50, 48, 45, 43, 36, 33, 26, 23, 10, 7, 5, 3, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309]

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = []
  var text = source.contents
  var text_length = text.size()

  // For backing up
  var yy_last_accepting_state = 0
  var yy_last_accepting_cpos = 0

  // The current character pointer
  var yy_cp = 0

  while (yy_cp < text_length) {
    var yy_current_state = 1 // Reset the NFA
    var yy_bp = yy_cp // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 309) {
      if (yy_cp >= text_length) {
        break // This prevents syntax errors from causing infinite loops
      }
      var c = text[yy_cp]
      var index = c < 127 ? c : 127
      var yy_c = yy_ec[index]
      if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state
        yy_last_accepting_cpos = yy_cp
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = yy_def[yy_current_state]
        if (yy_current_state >= 310) {
          yy_c = yy_meta[yy_c]
        }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
      yy_cp++
    }

    // Find the action
    var yy_act = yy_accept[yy_current_state]
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos
      yy_current_state = yy_last_accepting_state
      yy_act = yy_accept[yy_current_state]
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
      iterator.nextCodePoint()
      var range = Range(source, yy_bp, iterator.index)
      syntaxErrorExtraData(log, range, range.toString())
      break
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))

      // These tokens start with a ">" and may need to be split if we discover
      // that they should really be END_PARAMETER_LIST tokens. Save enough room
      // for these tokens to be split into pieces, that way all of the tokens
      // don't have to be shifted over repeatedly inside prepareTokens(). The
      // ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
      // and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
      if (yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL) {
        tokens.push(null)
        if (yy_act == .ASSIGN_SHIFT_RIGHT) {
          tokens.push(null)
        }
      }
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

  // Also return preprocessor token presence so the preprocessor can be avoided
  return tokens
}

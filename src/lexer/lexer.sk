////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FN,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  IS,
  LAMBDA,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LET,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  STRUCT,
  SUPER,
  SWITCH,
  THIS,
  TILDE,
  TRUE,
  UNTYPED,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}
final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NOT, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .LAMBDA, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FN, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .WHITESPACE, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LET, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .FLOAT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ALIAS, .IDENTIFIER, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .STRUCT, .SWITCH, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .UNTYPED, .VIRTUAL, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION];
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 1, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 28, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 28, 42, 43, 44, 45, 46, 47, 28, 48, 49, 50, 51, 52, 53, 54, 55, 28, 56, 57, 58, 59, 1];
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1];
final var yy_base = [0, 0, 0, 322, 323, 58, 297, 57, 296, 56, 56, 323, 323, 295, 53, 323, 52, 323, 51, 73, 64, 323, 323, 45, 46, 48, 323, 0, 323, 323, 294, 46, 269, 63, 48, 54, 71, 76, 279, 85, 263, 50, 277, 73, 65, 29, 96, 273, 323, 76, 323, 323, 128, 323, 98, 323, 309, 323, 323, 323, 102, 323, 308, 323, 323, 323, 323, 323, 0, 323, 121, 127, 117, 323, 131, 0, 286, 323, 323, 323, 323, 285, 0, 323, 267, 258, 269, 256, 271, 258, 113, 0, 253, 250, 253, 256, 253, 0, 249, 0, 249, 109, 0, 245, 250, 240, 249, 254, 112, 256, 239, 121, 241, 246, 245, 234, 234, 242, 234, 233, 239, 323, 323, 0, 143, 149, 153, 0, 323, 323, 246, 241, 244, 239, 226, 124, 241, 236, 235, 227, 224, 220, 235, 0, 221, 225, 228, 0, 227, 0, 220, 214, 209, 210, 216, 207, 207, 205, 218, 204, 204, 215, 196, 205, 0, 199, 205, 323, 198, 198, 203, 0, 195, 193, 201, 190, 190, 0, 0, 191, 201, 194, 188, 190, 186, 184, 0, 184, 198, 193, 188, 180, 186, 191, 177, 189, 0, 0, 176, 183, 170, 183, 0, 169, 0, 0, 0, 173, 174, 179, 165, 0, 0, 164, 176, 174, 164, 169, 159, 173, 172, 161, 170, 154, 0, 163, 165, 0, 168, 0, 0, 149, 149, 0, 0, 0, 0, 165, 164, 160, 156, 130, 0, 0, 0, 0, 0, 143, 135, 140, 0, 141, 140, 131, 0, 127, 0, 0, 0, 120, 118, 0, 107, 0, 0, 0, 323, 181, 185, 187, 191, 112];
final var yy_def = [0, 266, 1, 266, 266, 266, 266, 267, 266, 266, 268, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 269, 266, 266, 266, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 266, 266, 266, 266, 266, 266, 267, 266, 267, 266, 266, 266, 268, 266, 268, 266, 266, 266, 266, 266, 270, 266, 266, 266, 266, 266, 266, 271, 266, 266, 266, 266, 266, 266, 269, 266, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 266, 266, 270, 266, 266, 266, 271, 266, 266, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 266, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 0, 266, 266, 266, 266, 266];
final var yy_nxt = [0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 4, 29, 30, 31, 32, 33, 34, 35, 36, 27, 27, 37, 27, 38, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 27, 27, 48, 49, 50, 51, 52, 52, 55, 58, 61, 64, 66, 68, 76, 77, 78, 79, 80, 81, 116, 69, 67, 65, 117, 70, 59, 71, 71, 71, 71, 90, 62, 56, 70, 84, 71, 71, 71, 71, 91, 85, 87, 92, 108, 93, 121, 109, 73, 55, 95, 114, 88, 72, 94, 89, 61, 73, 96, 115, 99, 127, 97, 98, 104, 74, 100, 101, 105, 111, 112, 102, 113, 75, 56, 118, 52, 52, 62, 122, 125, 125, 106, 119, 124, 124, 124, 124, 70, 265, 71, 71, 71, 71, 126, 126, 126, 136, 145, 152, 156, 264, 137, 263, 153, 146, 124, 124, 124, 124, 262, 73, 125, 125, 261, 157, 126, 126, 126, 173, 174, 260, 259, 258, 257, 256, 255, 167, 54, 54, 54, 54, 60, 60, 60, 60, 82, 82, 123, 254, 123, 123, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 172, 171, 170, 169, 168, 166, 165, 164, 163, 162, 161, 160, 159, 158, 155, 154, 151, 150, 149, 148, 147, 144, 143, 142, 141, 140, 139, 138, 135, 134, 133, 132, 131, 130, 129, 128, 266, 266, 120, 110, 107, 103, 86, 83, 63, 57, 53, 266, 3, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266];
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 9, 10, 14, 16, 18, 23, 23, 24, 24, 25, 25, 45, 18, 16, 14, 45, 20, 9, 20, 20, 20, 20, 34, 10, 7, 19, 31, 19, 19, 19, 19, 34, 31, 33, 35, 41, 35, 49, 41, 20, 54, 36, 44, 33, 19, 35, 33, 60, 19, 36, 44, 37, 271, 36, 36, 39, 19, 37, 37, 39, 43, 43, 37, 43, 19, 54, 46, 52, 52, 60, 49, 72, 72, 39, 46, 70, 70, 70, 70, 71, 262, 71, 71, 71, 71, 74, 74, 74, 90, 101, 108, 111, 260, 90, 259, 108, 101, 124, 124, 124, 124, 255, 71, 125, 125, 253, 111, 126, 126, 126, 135, 135, 252, 251, 249, 248, 247, 241, 124, 267, 267, 267, 267, 268, 268, 268, 268, 269, 269, 270, 240, 270, 270, 239, 238, 237, 232, 231, 228, 226, 225, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 210, 209, 208, 207, 203, 201, 200, 199, 198, 195, 194, 193, 192, 191, 190, 189, 188, 187, 185, 184, 183, 182, 181, 180, 179, 176, 175, 174, 173, 172, 170, 169, 168, 166, 165, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 148, 146, 145, 144, 142, 141, 140, 139, 138, 137, 136, 134, 133, 132, 131, 130, 120, 119, 118, 117, 116, 115, 114, 113, 112, 110, 109, 107, 106, 105, 104, 103, 100, 98, 96, 95, 94, 93, 92, 89, 88, 87, 86, 85, 84, 81, 76, 62, 56, 47, 42, 40, 38, 32, 30, 13, 8, 6, 3, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266];

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = [];
  var text = source.contents;
  var text_length = text.size();

  // For backing up
  var yy_last_accepting_state = 0;
  var yy_last_accepting_cpos = 0;

  // The current character pointer
  var yy_cp = 0;

  while (yy_cp < text_length) {
    var yy_current_state = 1; // Reset the NFA
    var yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 266) {
      if (yy_cp >= text_length) {
        break; // This prevents syntax errors from causing infinite loops
      }
      var c = text.codeUnitAt(yy_cp);
      var index = c < 127 ? c : 127;
      var yy_c = yy_ec.get(index);
      if (yy_accept.get(yy_current_state) != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk.get(yy_base.get(yy_current_state) + yy_c) != yy_current_state) {
        yy_current_state = yy_def.get(yy_current_state);
        if (yy_current_state >= 267) {
          yy_c = yy_meta.get(yy_c);
        }
      }
      yy_current_state = yy_nxt.get(yy_base.get(yy_current_state) + yy_c);
      yy_cp++;
    }

    // Find the action
    TokenKind yy_act = yy_accept.get(yy_current_state);
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept.get(yy_current_state);
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      syntaxErrorExtraData(log, Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE, ""));

  // Do a single post-processing pass on the token list
  prepareTokens(tokens);
  return tokens;
}

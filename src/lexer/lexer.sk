////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FN,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  IS,
  LAMBDA,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  STRUCT,
  SUPER,
  SWITCH,
  THIS,
  TILDE,
  TRUE,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}
final List<TokenKind> yy_accept = { TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.END_OF_FILE, TokenKind.ERROR, TokenKind.WHITESPACE, TokenKind.NOT, TokenKind.ERROR, TokenKind.REMAINDER, TokenKind.BITWISE_AND, TokenKind.ERROR, TokenKind.LEFT_PARENTHESIS, TokenKind.RIGHT_PARENTHESIS, TokenKind.MULTIPLY, TokenKind.PLUS, TokenKind.COMMA, TokenKind.MINUS, TokenKind.DOT, TokenKind.DIVIDE, TokenKind.INT_DECIMAL, TokenKind.INT_DECIMAL, TokenKind.COLON, TokenKind.SEMICOLON, TokenKind.LESS_THAN, TokenKind.ASSIGN, TokenKind.GREATER_THAN, TokenKind.QUESTION_MARK, TokenKind.IDENTIFIER, TokenKind.LEFT_BRACKET, TokenKind.RIGHT_BRACKET, TokenKind.BITWISE_XOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.LEFT_BRACE, TokenKind.BITWISE_OR, TokenKind.RIGHT_BRACE, TokenKind.TILDE, TokenKind.WHITESPACE, TokenKind.NOT_EQUAL, TokenKind.YY_INVALID_ACTION, TokenKind.STRING, TokenKind.YY_INVALID_ACTION, TokenKind.ASSIGN_REMAINDER, TokenKind.LOGICAL_AND, TokenKind.ASSIGN_BITWISE_AND, TokenKind.YY_INVALID_ACTION, TokenKind.CHARACTER, TokenKind.YY_INVALID_ACTION, TokenKind.ASSIGN_MULTIPLY, TokenKind.INCREMENT, TokenKind.ASSIGN_PLUS, TokenKind.DECREMENT, TokenKind.ASSIGN_MINUS, TokenKind.WHITESPACE, TokenKind.ASSIGN_DIVIDE, TokenKind.YY_INVALID_ACTION, TokenKind.INT_DECIMAL, TokenKind.YY_INVALID_ACTION, TokenKind.FLOAT, TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.SHIFT_LEFT, TokenKind.LESS_THAN_OR_EQUAL, TokenKind.EQUAL, TokenKind.LAMBDA, TokenKind.GREATER_THAN_OR_EQUAL, TokenKind.SHIFT_RIGHT, TokenKind.IDENTIFIER, TokenKind.ASSIGN_BITWISE_XOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.DO, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FN, TokenKind.IDENTIFIER, TokenKind.IF, TokenKind.IDENTIFIER, TokenKind.IN, TokenKind.IS, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.ASSIGN_BITWISE_OR, TokenKind.LOGICAL_OR, TokenKind.WHITESPACE, TokenKind.DOUBLE, TokenKind.INT_BINARY, TokenKind.INT_OCTAL, TokenKind.INT_HEX, TokenKind.ASSIGN_SHIFT_RIGHT, TokenKind.ASSIGN_SHIFT_LEFT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.VAR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FLOAT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.CASE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.ELSE, TokenKind.ENUM, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.NULL, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.THIS, TokenKind.TRUE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.BREAK, TokenKind.CLASS, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FALSE, TokenKind.FINAL, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.SUPER, TokenKind.IDENTIFIER, TokenKind.USING, TokenKind.IDENTIFIER, TokenKind.WHILE, TokenKind.ASSERT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.EXPORT, TokenKind.IMPORT, TokenKind.INLINE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.PUBLIC, TokenKind.RETURN, TokenKind.STATIC, TokenKind.STRUCT, TokenKind.SWITCH, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.DEFAULT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.PRIVATE, TokenKind.IDENTIFIER, TokenKind.VIRTUAL, TokenKind.CONTINUE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.OVERRIDE, TokenKind.IDENTIFIER, TokenKind.INTERFACE, TokenKind.NAMESPACE, TokenKind.PROTECTED, TokenKind.YY_INVALID_ACTION };
final List<int> yy_ec = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 1, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 28, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 28, 42, 43, 44, 45, 46, 47, 28, 48, 49, 50, 51, 52, 53, 54, 28, 28, 55, 56, 57, 58, 1 };
final List<int> yy_meta = { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1 };
final List<int> yy_base = { 0, 0, 0, 301, 302, 57, 276, 56, 275, 55, 55, 302, 302, 274, 52, 302, 51, 302, 50, 72, 63, 302, 302, 44, 45, 47, 302, 0, 302, 302, 273, 247, 247, 51, 56, 53, 67, 71, 44, 242, 63, 256, 71, 77, 243, 86, 251, 302, 49, 302, 302, 101, 302, 118, 302, 287, 302, 302, 302, 120, 302, 286, 302, 302, 302, 302, 302, 0, 302, 112, 118, 122, 302, 124, 0, 264, 302, 302, 302, 302, 263, 0, 302, 237, 248, 235, 250, 237, 243, 0, 231, 228, 231, 234, 231, 0, 227, 0, 227, 101, 0, 229, 229, 234, 106, 236, 219, 101, 221, 226, 225, 214, 223, 215, 214, 220, 302, 302, 0, 140, 128, 136, 0, 302, 302, 223, 226, 221, 208, 206, 222, 217, 209, 206, 202, 217, 0, 203, 207, 210, 209, 202, 196, 191, 192, 198, 189, 189, 187, 200, 186, 186, 197, 188, 0, 182, 188, 302, 182, 187, 0, 179, 186, 175, 0, 0, 177, 187, 180, 174, 176, 172, 170, 0, 170, 184, 179, 174, 166, 172, 177, 163, 175, 0, 0, 170, 157, 170, 156, 0, 0, 160, 161, 153, 0, 0, 152, 164, 162, 152, 157, 147, 161, 160, 149, 158, 140, 0, 137, 0, 143, 0, 0, 124, 124, 0, 0, 0, 140, 139, 135, 133, 119, 0, 0, 0, 0, 0, 125, 130, 0, 131, 130, 127, 0, 126, 0, 0, 125, 124, 0, 63, 0, 0, 0, 302, 178, 182, 184, 188, 85 };
final List<int> yy_def = { 0, 245, 1, 245, 245, 245, 245, 246, 245, 245, 247, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 248, 245, 245, 245, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 245, 245, 245, 245, 245, 245, 246, 245, 246, 245, 245, 245, 247, 245, 247, 245, 245, 245, 245, 245, 249, 245, 245, 245, 245, 245, 245, 250, 245, 245, 245, 245, 245, 245, 248, 245, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 245, 245, 249, 245, 245, 245, 250, 245, 245, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 245, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 0, 245, 245, 245, 245, 245 };
final List<int> yy_nxt = { 0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 4, 29, 30, 31, 32, 33, 34, 35, 36, 27, 27, 37, 27, 27, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 27, 47, 48, 49, 50, 51, 51, 54, 57, 60, 63, 65, 67, 75, 76, 77, 78, 79, 80, 116, 68, 66, 64, 101, 69, 58, 70, 70, 70, 70, 85, 61, 55, 69, 122, 70, 70, 70, 70, 88, 86, 102, 90, 87, 91, 244, 93, 72, 89, 51, 51, 117, 71, 92, 94, 97, 72, 104, 95, 96, 105, 98, 99, 110, 73, 113, 100, 107, 108, 54, 109, 111, 74, 114, 60, 119, 119, 119, 119, 69, 147, 70, 70, 70, 70, 120, 120, 121, 121, 121, 138, 120, 120, 143, 55, 148, 61, 139, 144, 121, 121, 121, 72, 119, 119, 119, 119, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 157, 53, 53, 53, 53, 59, 59, 59, 59, 81, 81, 118, 226, 118, 118, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 156, 155, 154, 153, 152, 151, 150, 149, 146, 145, 142, 141, 140, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 245, 245, 115, 112, 106, 103, 84, 83, 82, 62, 56, 52, 245, 3, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245 };
final List<int> yy_chk = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 9, 10, 14, 16, 18, 23, 23, 24, 24, 25, 25, 48, 18, 16, 14, 38, 20, 9, 20, 20, 20, 20, 33, 10, 7, 19, 250, 19, 19, 19, 19, 34, 33, 38, 35, 33, 35, 241, 36, 20, 34, 51, 51, 48, 19, 35, 36, 37, 19, 40, 36, 36, 40, 37, 37, 43, 19, 45, 37, 42, 42, 53, 42, 43, 19, 45, 59, 69, 69, 69, 69, 70, 107, 70, 70, 70, 70, 71, 71, 73, 73, 73, 99, 120, 120, 104, 53, 107, 59, 99, 104, 121, 121, 121, 70, 119, 119, 119, 119, 239, 238, 235, 233, 232, 231, 229, 228, 222, 221, 220, 219, 218, 214, 213, 210, 208, 119, 246, 246, 246, 246, 247, 247, 247, 247, 248, 248, 249, 206, 249, 249, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 193, 192, 191, 188, 187, 186, 185, 182, 181, 180, 179, 178, 177, 176, 175, 174, 172, 171, 170, 169, 168, 167, 166, 163, 162, 161, 159, 158, 156, 155, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 115, 114, 113, 112, 111, 110, 109, 108, 106, 105, 103, 102, 101, 98, 96, 94, 93, 92, 91, 90, 88, 87, 86, 85, 84, 83, 80, 75, 61, 55, 46, 44, 41, 39, 32, 31, 30, 13, 8, 6, 3, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245 };

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = {};
  string text = source.contents;
  int text_length = text.length;

  // For backing up
  int yy_last_accepting_state = 0;
  int yy_last_accepting_cpos = 0;

  // The current character pointer
  int yy_cp = 0;

  while (yy_cp < text_length) {
    int yy_current_state = 1; // Reset the NFA
    int yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 245) {
      int index = 0;
      if (yy_cp < text_length) {
        int c = text.codeUnitAt(yy_cp);
        if (c < 0x7F) index = c;
      } else {
        break; // This prevents syntax errors from causing infinite loops
      }
      int yy_c = yy_ec.get(index);
      if (yy_accept.get(yy_current_state) != TokenKind.YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk.get(yy_base.get(yy_current_state) + yy_c) != yy_current_state) {
        yy_current_state = yy_def.get(yy_current_state);
        if (yy_current_state >= 246) {
          yy_c = yy_meta.get(yy_c);
        }
      }
      yy_current_state = yy_nxt.get(yy_base.get(yy_current_state) + yy_c);
      yy_cp = yy_cp + 1;
    }

    // Find the action
    TokenKind yy_act = yy_accept.get(yy_current_state);
    while (yy_act == TokenKind.YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept.get(yy_current_state);
    }

    // Ignore whitespace
    if (yy_act == TokenKind.WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == TokenKind.ERROR) {
      syntaxErrorExtraData(log, new Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != TokenKind.END_OF_FILE) {
      tokens.push(new Token(new Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(new Token(new Range(source, text_length, text_length), TokenKind.END_OF_FILE, ""));

  // Do a single post-processing pass on the token list
  prepareTokens(tokens);
  return tokens;
}

////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FN,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  IS,
  LAMBDA,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LET,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  STRUCT,
  SUPER,
  SWITCH,
  THIS,
  TILDE,
  TRUE,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}
final List<TokenKind> yy_accept = { TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.END_OF_FILE, TokenKind.ERROR, TokenKind.WHITESPACE, TokenKind.NOT, TokenKind.ERROR, TokenKind.REMAINDER, TokenKind.BITWISE_AND, TokenKind.ERROR, TokenKind.LEFT_PARENTHESIS, TokenKind.RIGHT_PARENTHESIS, TokenKind.MULTIPLY, TokenKind.PLUS, TokenKind.COMMA, TokenKind.MINUS, TokenKind.DOT, TokenKind.DIVIDE, TokenKind.INT_DECIMAL, TokenKind.INT_DECIMAL, TokenKind.COLON, TokenKind.SEMICOLON, TokenKind.LESS_THAN, TokenKind.ASSIGN, TokenKind.GREATER_THAN, TokenKind.QUESTION_MARK, TokenKind.IDENTIFIER, TokenKind.LEFT_BRACKET, TokenKind.RIGHT_BRACKET, TokenKind.BITWISE_XOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.LEFT_BRACE, TokenKind.BITWISE_OR, TokenKind.RIGHT_BRACE, TokenKind.TILDE, TokenKind.WHITESPACE, TokenKind.NOT_EQUAL, TokenKind.YY_INVALID_ACTION, TokenKind.STRING, TokenKind.YY_INVALID_ACTION, TokenKind.ASSIGN_REMAINDER, TokenKind.LOGICAL_AND, TokenKind.ASSIGN_BITWISE_AND, TokenKind.YY_INVALID_ACTION, TokenKind.CHARACTER, TokenKind.YY_INVALID_ACTION, TokenKind.ASSIGN_MULTIPLY, TokenKind.INCREMENT, TokenKind.ASSIGN_PLUS, TokenKind.DECREMENT, TokenKind.ASSIGN_MINUS, TokenKind.WHITESPACE, TokenKind.ASSIGN_DIVIDE, TokenKind.YY_INVALID_ACTION, TokenKind.INT_DECIMAL, TokenKind.YY_INVALID_ACTION, TokenKind.FLOAT, TokenKind.YY_INVALID_ACTION, TokenKind.YY_INVALID_ACTION, TokenKind.SHIFT_LEFT, TokenKind.LESS_THAN_OR_EQUAL, TokenKind.EQUAL, TokenKind.LAMBDA, TokenKind.GREATER_THAN_OR_EQUAL, TokenKind.SHIFT_RIGHT, TokenKind.IDENTIFIER, TokenKind.ASSIGN_BITWISE_XOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.DO, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FN, TokenKind.IDENTIFIER, TokenKind.IF, TokenKind.IDENTIFIER, TokenKind.IN, TokenKind.IS, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.ASSIGN_BITWISE_OR, TokenKind.LOGICAL_OR, TokenKind.WHITESPACE, TokenKind.DOUBLE, TokenKind.INT_BINARY, TokenKind.INT_OCTAL, TokenKind.INT_HEX, TokenKind.ASSIGN_SHIFT_LEFT, TokenKind.ASSIGN_SHIFT_RIGHT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FOR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.LET, TokenKind.IDENTIFIER, TokenKind.NEW, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.VAR, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FLOAT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.CASE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.ELSE, TokenKind.ENUM, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.NULL, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.THIS, TokenKind.TRUE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.ALIAS, TokenKind.IDENTIFIER, TokenKind.BREAK, TokenKind.CLASS, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.FALSE, TokenKind.FINAL, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.SUPER, TokenKind.IDENTIFIER, TokenKind.USING, TokenKind.IDENTIFIER, TokenKind.WHILE, TokenKind.ASSERT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.EXPORT, TokenKind.IMPORT, TokenKind.INLINE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.PUBLIC, TokenKind.RETURN, TokenKind.STATIC, TokenKind.STRUCT, TokenKind.SWITCH, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.DEFAULT, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.PRIVATE, TokenKind.IDENTIFIER, TokenKind.VIRTUAL, TokenKind.CONTINUE, TokenKind.IDENTIFIER, TokenKind.IDENTIFIER, TokenKind.OVERRIDE, TokenKind.IDENTIFIER, TokenKind.INTERFACE, TokenKind.NAMESPACE, TokenKind.PROTECTED, TokenKind.YY_INVALID_ACTION };
final List<int> yy_ec = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 1, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 28, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 28, 42, 43, 44, 45, 46, 47, 28, 48, 49, 50, 51, 52, 53, 54, 28, 28, 55, 56, 57, 58, 1 };
final List<int> yy_meta = { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1 };
final List<int> yy_base = { 0, 0, 0, 309, 310, 57, 284, 56, 283, 55, 55, 310, 310, 282, 52, 310, 51, 310, 50, 72, 63, 310, 310, 44, 45, 47, 310, 0, 310, 310, 281, 45, 256, 62, 47, 53, 70, 75, 266, 84, 250, 49, 264, 72, 64, 251, 95, 259, 310, 53, 310, 310, 127, 310, 97, 310, 295, 310, 310, 310, 123, 310, 294, 310, 310, 310, 310, 310, 0, 310, 120, 126, 115, 310, 130, 0, 272, 310, 310, 310, 310, 271, 0, 310, 253, 244, 255, 242, 257, 244, 250, 0, 238, 235, 238, 241, 238, 0, 234, 0, 234, 107, 0, 230, 235, 225, 234, 239, 110, 241, 224, 66, 226, 231, 230, 219, 228, 220, 219, 225, 310, 310, 0, 141, 137, 148, 0, 310, 310, 232, 227, 230, 225, 212, 210, 226, 221, 213, 210, 206, 221, 0, 207, 211, 214, 0, 213, 0, 206, 200, 195, 196, 202, 193, 193, 191, 204, 190, 190, 201, 192, 0, 186, 192, 310, 185, 185, 190, 0, 182, 189, 178, 0, 0, 180, 190, 183, 177, 179, 175, 173, 0, 173, 187, 182, 177, 169, 175, 180, 166, 178, 0, 0, 173, 160, 173, 0, 159, 0, 0, 163, 164, 156, 0, 0, 155, 167, 165, 155, 160, 150, 164, 163, 152, 161, 145, 0, 154, 0, 158, 0, 0, 127, 127, 0, 0, 0, 143, 142, 138, 136, 122, 0, 0, 0, 0, 0, 128, 133, 0, 134, 133, 126, 0, 125, 0, 0, 115, 105, 0, 98, 0, 0, 0, 310, 179, 183, 185, 189, 70 };
final List<int> yy_def = { 0, 254, 1, 254, 254, 254, 254, 255, 254, 254, 256, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 257, 254, 254, 254, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 254, 254, 254, 254, 254, 254, 255, 254, 255, 254, 254, 254, 256, 254, 256, 254, 254, 254, 254, 254, 258, 254, 254, 254, 254, 254, 254, 259, 254, 254, 254, 254, 254, 254, 257, 254, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 254, 254, 258, 254, 254, 254, 259, 254, 254, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 254, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 0, 254, 254, 254, 254, 254 };
final List<int> yy_nxt = { 0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 4, 29, 30, 31, 32, 33, 34, 35, 36, 27, 27, 37, 27, 38, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 27, 48, 49, 50, 51, 52, 52, 55, 58, 61, 64, 66, 68, 76, 77, 78, 79, 80, 81, 126, 69, 67, 65, 120, 70, 59, 71, 71, 71, 71, 90, 62, 56, 70, 84, 71, 71, 71, 71, 91, 85, 87, 92, 108, 93, 154, 109, 73, 55, 95, 114, 88, 72, 94, 89, 121, 73, 96, 115, 99, 155, 97, 98, 104, 74, 100, 101, 105, 111, 112, 102, 113, 75, 56, 117, 52, 52, 61, 124, 124, 253, 106, 118, 123, 123, 123, 123, 70, 252, 71, 71, 71, 71, 125, 125, 125, 143, 150, 251, 62, 124, 124, 151, 144, 123, 123, 123, 123, 250, 249, 73, 125, 125, 125, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 164, 54, 54, 54, 54, 60, 60, 60, 60, 82, 82, 122, 237, 122, 122, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 163, 162, 161, 160, 159, 158, 157, 156, 153, 152, 149, 148, 147, 146, 145, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 254, 254, 119, 116, 110, 107, 103, 86, 83, 63, 57, 53, 254, 3, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254 };
final List<int> yy_chk = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 9, 10, 14, 16, 18, 23, 23, 24, 24, 25, 25, 259, 18, 16, 14, 49, 20, 9, 20, 20, 20, 20, 34, 10, 7, 19, 31, 19, 19, 19, 19, 34, 31, 33, 35, 41, 35, 111, 41, 20, 54, 36, 44, 33, 19, 35, 33, 49, 19, 36, 44, 37, 111, 36, 36, 39, 19, 37, 37, 39, 43, 43, 37, 43, 19, 54, 46, 52, 52, 60, 72, 72, 250, 39, 46, 70, 70, 70, 70, 71, 248, 71, 71, 71, 71, 74, 74, 74, 101, 108, 247, 60, 124, 124, 108, 101, 123, 123, 123, 123, 244, 242, 71, 125, 125, 125, 241, 240, 238, 237, 231, 230, 229, 228, 227, 223, 222, 123, 255, 255, 255, 255, 256, 256, 256, 256, 257, 257, 258, 219, 258, 258, 217, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 202, 201, 200, 197, 195, 194, 193, 190, 189, 188, 187, 186, 185, 184, 183, 182, 180, 179, 178, 177, 176, 175, 174, 171, 170, 169, 167, 166, 165, 163, 162, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 146, 144, 143, 142, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 119, 118, 117, 116, 115, 114, 113, 112, 110, 109, 107, 106, 105, 104, 103, 100, 98, 96, 95, 94, 93, 92, 90, 89, 88, 87, 86, 85, 84, 81, 76, 62, 56, 47, 45, 42, 40, 38, 32, 30, 13, 8, 6, 3, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254 };

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = {};
  string text = source.contents;
  int text_length = text.length;

  // For backing up
  int yy_last_accepting_state = 0;
  int yy_last_accepting_cpos = 0;

  // The current character pointer
  int yy_cp = 0;

  while (yy_cp < text_length) {
    int yy_current_state = 1; // Reset the NFA
    int yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 254) {
      int index = 0;
      if (yy_cp < text_length) {
        int c = text.codeUnitAt(yy_cp);
        if (c < 0x7F) index = c;
      } else {
        break; // This prevents syntax errors from causing infinite loops
      }
      int yy_c = yy_ec.get(index);
      if (yy_accept.get(yy_current_state) != TokenKind.YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk.get(yy_base.get(yy_current_state) + yy_c) != yy_current_state) {
        yy_current_state = yy_def.get(yy_current_state);
        if (yy_current_state >= 255) {
          yy_c = yy_meta.get(yy_c);
        }
      }
      yy_current_state = yy_nxt.get(yy_base.get(yy_current_state) + yy_c);
      yy_cp = yy_cp + 1;
    }

    // Find the action
    TokenKind yy_act = yy_accept.get(yy_current_state);
    while (yy_act == TokenKind.YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept.get(yy_current_state);
    }

    // Ignore whitespace
    if (yy_act == TokenKind.WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == TokenKind.ERROR) {
      syntaxErrorExtraData(log, Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != TokenKind.END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), TokenKind.END_OF_FILE, ""));

  // Do a single post-processing pass on the token list
  prepareTokens(tokens);
  return tokens;
}

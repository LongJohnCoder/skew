////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ANNOTATION,
  ARROW,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CATCH,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  DOUBLE_COLON,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  INVALID_PREPROCESSOR_DIRECTIVE,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NEWLINE,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PREPROCESSOR_DEFINE,
  PREPROCESSOR_ELIF,
  PREPROCESSOR_ELSE,
  PREPROCESSOR_ENDIF,
  PREPROCESSOR_ERROR,
  PREPROCESSOR_IF,
  PREPROCESSOR_WARNING,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  PURE,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  SUPER,
  SWITCH,
  THIS,
  TICK,
  TILDE,
  TRUE,
  TRY,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}

final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NEWLINE, .NOT, .ERROR, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .TICK, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NEWLINE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .ARROW, .DOUBLE, .YY_INVALID_ACTION, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_IF, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .WHITESPACE, .YY_INVALID_ACTION, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRY, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .DOUBLE, .WHITESPACE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PURE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ELIF, .PREPROCESSOR_ELSE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ALIAS, .IDENTIFIER, .BREAK, .CATCH, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ENDIF, .PREPROCESSOR_ERROR, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .SWITCH, .IDENTIFIER, .PREPROCESSOR_DEFINE, .INVALID_PREPROCESSOR_DIRECTIVE, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .VIRTUAL, .PREPROCESSOR_WARNING, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION]
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 30, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 46, 47, 48, 49, 50, 51, 31, 52, 53, 54, 55, 56, 57, 58, 59, 31, 60, 61, 62, 63, 1]
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1]
final var yy_base = [0, 0, 0, 427, 428, 424, 62, 400, 61, 27, 399, 61, 62, 428, 428, 398, 57, 428, 62, 55, 66, 80, 86, 400, 428, 55, 396, 64, 428, 0, 0, 428, 428, 395, 428, 50, 367, 76, 67, 62, 87, 87, 78, 362, 79, 376, 87, 41, 363, 102, 371, 428, 87, 428, 428, 412, 143, 428, 120, 428, 410, 0, 371, 102, 369, 373, 428, 428, 428, 134, 428, 406, 428, 428, 428, 428, 428, 428, 138, 138, 0, 428, 142, 153, 169, 146, 428, 157, 0, 428, 383, 428, 428, 428, 382, 0, 0, 428, 361, 352, 363, 132, 366, 353, 149, 0, 348, 345, 348, 351, 348, 344, 0, 344, 145, 0, 346, 336, 345, 350, 148, 114, 336, 352, 337, 342, 341, 142, 340, 332, 331, 337, 428, 428, 0, 339, 125, 340, 327, 0, 326, 187, 428, 192, 198, 199, 0, 199, 203, 194, 207, 0, 428, 428, 0, 340, 335, 338, 333, 334, 319, 175, 334, 329, 328, 320, 317, 313, 328, 0, 314, 318, 321, 320, 0, 313, 307, 302, 303, 309, 314, 299, 299, 311, 297, 297, 308, 0, 299, 0, 293, 299, 300, 302, 302, 297, 291, 291, 212, 216, 428, 286, 286, 291, 0, 292, 282, 280, 288, 277, 277, 0, 0, 278, 288, 281, 275, 277, 273, 271, 0, 271, 285, 280, 275, 0, 267, 273, 265, 277, 0, 0, 272, 259, 272, 263, 0, 0, 269, 258, 264, 0, 254, 0, 0, 0, 0, 258, 259, 264, 250, 0, 0, 249, 261, 259, 249, 254, 231, 218, 217, 206, 215, 0, 209, 0, 215, 0, 210, 0, 0, 201, 0, 194, 194, 0, 0, 0, 0, 210, 209, 204, 202, 188, 0, 0, 0, 0, 194, 0, 197, 198, 0, 199, 175, 162, 0, 140, 0, 0, 0, 73, 51, 0, 41, 0, 0, 0, 428, 258, 260, 265, 267, 270, 273, 278, 283, 286, 288, 293]
final var yy_def = [0, 308, 1, 308, 308, 308, 308, 308, 309, 310, 308, 308, 311, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 312, 313, 308, 308, 308, 308, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 308, 308, 308, 308, 308, 308, 308, 309, 308, 309, 314, 314, 314, 314, 314, 308, 308, 308, 311, 308, 311, 308, 308, 308, 308, 308, 308, 308, 315, 316, 308, 308, 308, 308, 308, 308, 308, 317, 308, 308, 308, 308, 308, 308, 318, 313, 308, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 308, 308, 314, 314, 314, 314, 314, 314, 314, 308, 308, 315, 319, 315, 316, 308, 308, 308, 308, 317, 308, 308, 318, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 314, 314, 314, 314, 314, 314, 308, 308, 308, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 314, 314, 314, 314, 314, 314, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 314, 314, 314, 314, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 314, 314, 313, 313, 313, 313, 313, 313, 313, 313, 314, 313, 313, 313, 313, 313, 313, 313, 313, 0, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308]
final var yy_nxt = [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 30, 30, 41, 30, 30, 30, 42, 43, 44, 45, 46, 47, 48, 49, 50, 30, 30, 51, 52, 53, 54, 56, 56, 59, 62, 63, 67, 73, 70, 64, 78, 78, 78, 78, 75, 79, 90, 91, 307, 74, 80, 65, 126, 68, 76, 77, 93, 94, 81, 306, 127, 60, 71, 82, 98, 83, 83, 83, 83, 82, 99, 83, 83, 83, 83, 104, 106, 84, 107, 132, 101, 305, 116, 84, 105, 85, 117, 108, 84, 86, 102, 109, 59, 103, 84, 86, 112, 87, 120, 110, 118, 121, 113, 114, 111, 88, 129, 115, 123, 124, 70, 125, 56, 56, 130, 133, 136, 144, 137, 179, 60, 138, 145, 78, 78, 78, 78, 78, 78, 78, 78, 149, 149, 180, 71, 141, 82, 193, 83, 83, 83, 83, 150, 150, 150, 194, 141, 142, 304, 147, 84, 147, 158, 159, 148, 148, 148, 148, 162, 171, 177, 84, 86, 163, 186, 178, 172, 198, 187, 198, 303, 144, 199, 199, 199, 199, 145, 144, 144, 149, 149, 302, 200, 145, 148, 148, 148, 148, 148, 148, 148, 148, 150, 150, 150, 207, 208, 199, 199, 199, 199, 199, 199, 199, 199, 301, 300, 299, 298, 297, 296, 295, 86, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 142, 58, 58, 58, 58, 58, 61, 61, 69, 69, 69, 69, 69, 95, 95, 96, 96, 96, 134, 134, 134, 143, 143, 143, 143, 143, 146, 282, 146, 146, 146, 151, 151, 154, 154, 154, 145, 145, 145, 145, 145, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 206, 205, 204, 203, 202, 201, 197, 196, 195, 192, 191, 190, 189, 188, 185, 184, 183, 182, 181, 176, 175, 174, 173, 170, 169, 168, 167, 166, 165, 164, 161, 160, 157, 156, 155, 153, 152, 308, 140, 139, 135, 308, 55, 131, 128, 122, 119, 100, 97, 92, 89, 72, 66, 57, 55, 308, 3, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308]
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8, 9, 9, 11, 16, 12, 9, 19, 19, 19, 19, 18, 20, 25, 25, 304, 16, 20, 9, 47, 11, 18, 18, 27, 27, 20, 302, 47, 8, 12, 21, 35, 21, 21, 21, 21, 22, 35, 22, 22, 22, 22, 38, 39, 21, 39, 52, 37, 301, 42, 22, 38, 21, 42, 39, 21, 21, 37, 40, 58, 37, 22, 22, 41, 21, 44, 40, 42, 44, 41, 41, 40, 21, 49, 41, 46, 46, 69, 46, 56, 56, 49, 52, 63, 79, 63, 121, 58, 63, 79, 78, 78, 78, 78, 82, 82, 82, 82, 85, 85, 121, 69, 78, 83, 136, 83, 83, 83, 83, 87, 87, 87, 136, 78, 78, 297, 84, 83, 84, 101, 101, 84, 84, 84, 84, 104, 114, 120, 83, 83, 104, 127, 120, 114, 141, 127, 141, 295, 143, 141, 141, 141, 141, 143, 144, 145, 149, 149, 294, 144, 145, 147, 147, 147, 147, 148, 148, 148, 148, 150, 150, 150, 161, 161, 198, 198, 198, 198, 199, 199, 199, 199, 293, 291, 290, 288, 283, 282, 281, 148, 280, 279, 274, 273, 271, 268, 266, 264, 262, 261, 260, 259, 199, 309, 309, 309, 309, 309, 310, 310, 311, 311, 311, 311, 311, 312, 312, 313, 313, 313, 314, 314, 314, 315, 315, 315, 315, 315, 316, 258, 316, 316, 316, 317, 317, 318, 318, 318, 319, 319, 319, 319, 319, 257, 256, 255, 254, 253, 250, 249, 248, 247, 242, 240, 239, 238, 235, 234, 233, 232, 229, 228, 227, 226, 224, 223, 222, 221, 219, 218, 217, 216, 215, 214, 213, 210, 209, 208, 207, 206, 205, 203, 202, 201, 197, 196, 195, 194, 193, 192, 191, 190, 188, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 173, 172, 171, 170, 168, 167, 166, 165, 164, 163, 162, 160, 159, 158, 157, 156, 155, 140, 138, 137, 135, 131, 130, 129, 128, 126, 125, 124, 123, 122, 119, 118, 117, 116, 113, 111, 110, 109, 108, 107, 106, 103, 102, 100, 99, 98, 94, 90, 71, 65, 64, 62, 60, 55, 50, 48, 45, 43, 36, 33, 26, 23, 15, 10, 7, 5, 3, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308]

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = []
  var text = source.contents
  var text_length = text.size()

  // For backing up
  var yy_last_accepting_state = 0
  var yy_last_accepting_cpos = 0

  // The current character pointer
  var yy_cp = 0

  while (yy_cp < text_length) {
    var yy_current_state = 1 // Reset the NFA
    var yy_bp = yy_cp // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 308) {
      if (yy_cp >= text_length) {
        break // This prevents syntax errors from causing infinite loops
      }
      var c = text[yy_cp]
      var index = c < 127 ? c : 127
      var yy_c = yy_ec[index]
      if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state
        yy_last_accepting_cpos = yy_cp
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = yy_def[yy_current_state]
        if (yy_current_state >= 309) {
          yy_c = yy_meta[yy_c]
        }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c]
      yy_cp++
    }

    // Find the action
    var yy_act = yy_accept[yy_current_state]
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos
      yy_current_state = yy_last_accepting_state
      yy_act = yy_accept[yy_current_state]
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      var iterator = unicode.StringIterator.INSTANCE.reset(text, yy_bp)
      iterator.nextCodePoint()
      var range = Range(source, yy_bp, iterator.index)
      syntaxErrorExtraData(log, range, range.toString())
      break
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act))

      // These tokens start with a ">" and may need to be split if we discover
      // that they should really be END_PARAMETER_LIST tokens. Save enough room
      // for these tokens to be split into pieces, that way all of the tokens
      // don't have to be shifted over repeatedly inside prepareTokens(). The
      // ">>" token may become ">" + ">", the ">=" token may become ">" + "=",
      // and the ">>=" token may become ">" + ">=" and so ">" + ">" + "=".
      if (yy_act == .ASSIGN_SHIFT_RIGHT || yy_act == .SHIFT_RIGHT || yy_act == .GREATER_THAN_OR_EQUAL) {
        tokens.push(null)
        if (yy_act == .ASSIGN_SHIFT_RIGHT) {
          tokens.push(null)
        }
      }
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE))

  // Also return preprocessor token presence so the preprocessor can be avoided
  return tokens
}

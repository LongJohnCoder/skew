////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ANNOTATION,
  ARROW,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  DOUBLE_COLON,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  INVALID_PREPROCESSOR_DIRECTIVE,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PREPROCESSOR_ELIF,
  PREPROCESSOR_ELSE,
  PREPROCESSOR_ENDIF,
  PREPROCESSOR_ERROR,
  PREPROCESSOR_IF,
  PREPROCESSOR_WARNING,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  SUPER,
  SWITCH,
  THIS,
  TICK,
  TILDE,
  TRUE,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}

class TokenizeResult {
  List<Token> tokens;
  bool needsPreprocessor;
}

final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NOT, .ERROR, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .TICK, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .ARROW, .DOUBLE, .YY_INVALID_ACTION, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_IF, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .WHITESPACE, .YY_INVALID_ACTION, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .WHITESPACE, .DOUBLE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PREPROCESSOR_ELIF, .PREPROCESSOR_ELSE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .DOUBLE, .ALIAS, .IDENTIFIER, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .PREPROCESSOR_ENDIF, .PREPROCESSOR_ERROR, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .SWITCH, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .VIRTUAL, .PREPROCESSOR_WARNING, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION];
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 30, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 46, 47, 48, 49, 50, 51, 31, 52, 53, 54, 55, 56, 57, 58, 31, 31, 59, 60, 61, 62, 1];
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1];
final var yy_base = [0, 0, 0, 404, 405, 61, 378, 60, 25, 377, 59, 59, 405, 405, 376, 56, 405, 60, 53, 66, 78, 84, 378, 405, 52, 374, 54, 405, 0, 0, 405, 405, 373, 405, 42, 345, 74, 60, 60, 85, 64, 86, 340, 35, 354, 77, 85, 341, 101, 349, 405, 90, 405, 405, 137, 405, 128, 405, 389, 0, 95, 349, 353, 405, 405, 405, 134, 405, 386, 405, 405, 405, 405, 405, 405, 133, 143, 0, 405, 138, 150, 149, 130, 405, 158, 0, 405, 363, 405, 405, 405, 362, 0, 0, 405, 341, 332, 343, 330, 345, 332, 137, 0, 327, 324, 327, 330, 327, 323, 0, 323, 118, 0, 325, 315, 324, 329, 136, 331, 314, 330, 315, 320, 319, 308, 317, 309, 308, 314, 405, 405, 0, 137, 318, 305, 0, 304, 170, 405, 176, 177, 183, 0, 178, 183, 185, 0, 405, 405, 0, 318, 313, 316, 311, 298, 153, 313, 308, 307, 299, 296, 292, 307, 0, 293, 297, 300, 299, 0, 292, 286, 281, 282, 288, 279, 279, 291, 277, 277, 288, 279, 0, 273, 279, 283, 283, 278, 272, 272, 190, 405, 194, 267, 267, 272, 0, 264, 262, 270, 259, 259, 0, 0, 260, 270, 263, 257, 259, 255, 253, 0, 253, 267, 262, 257, 249, 255, 247, 259, 0, 0, 254, 241, 254, 0, 0, 252, 241, 247, 198, 0, 237, 0, 0, 0, 241, 242, 247, 233, 0, 0, 232, 244, 242, 232, 237, 227, 228, 200, 189, 198, 0, 191, 0, 197, 0, 0, 0, 184, 0, 177, 177, 0, 0, 0, 0, 193, 192, 188, 186, 172, 0, 0, 0, 0, 178, 181, 182, 0, 183, 182, 179, 0, 146, 0, 0, 0, 132, 104, 0, 48, 0, 0, 0, 405, 240, 242, 247, 249, 252, 255, 260, 265, 268, 270, 275];
final var yy_def = [0, 294, 1, 294, 294, 294, 294, 295, 296, 294, 294, 297, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 298, 299, 294, 294, 294, 294, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 294, 294, 294, 294, 294, 294, 295, 294, 295, 300, 300, 300, 300, 294, 294, 294, 297, 294, 297, 294, 294, 294, 294, 294, 294, 294, 301, 302, 294, 294, 294, 294, 294, 294, 294, 303, 294, 294, 294, 294, 294, 294, 304, 299, 294, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 294, 294, 300, 300, 300, 300, 300, 300, 294, 294, 301, 305, 301, 302, 294, 294, 294, 303, 294, 294, 304, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300, 300, 300, 300, 294, 294, 294, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300, 300, 300, 300, 294, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300, 300, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 299, 299, 299, 299, 299, 299, 299, 299, 300, 299, 299, 299, 299, 299, 299, 299, 299, 0, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294];
final var yy_nxt = [0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 40, 29, 29, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 29, 50, 51, 52, 53, 54, 54, 57, 60, 64, 67, 70, 61, 75, 75, 75, 75, 72, 87, 88, 76, 90, 91, 71, 62, 77, 65, 73, 74, 117, 293, 95, 118, 78, 68, 58, 79, 96, 80, 80, 80, 80, 79, 101, 80, 80, 80, 80, 109, 103, 81, 104, 102, 98, 110, 111, 81, 129, 82, 112, 105, 81, 83, 99, 106, 113, 100, 81, 83, 114, 84, 123, 107, 120, 121, 57, 122, 108, 85, 124, 126, 54, 54, 115, 132, 67, 133, 292, 127, 134, 144, 144, 130, 75, 75, 75, 75, 140, 75, 75, 75, 75, 141, 58, 143, 137, 143, 165, 79, 68, 80, 80, 80, 80, 166, 291, 137, 138, 145, 145, 145, 156, 81, 171, 184, 189, 157, 189, 172, 290, 140, 140, 185, 81, 83, 141, 190, 140, 191, 191, 191, 191, 141, 144, 144, 145, 145, 145, 197, 198, 229, 229, 229, 229, 191, 191, 191, 191, 229, 229, 229, 229, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 83, 273, 272, 271, 138, 56, 56, 56, 56, 56, 59, 59, 66, 66, 66, 66, 66, 92, 92, 93, 93, 93, 131, 131, 131, 139, 139, 139, 139, 139, 142, 270, 142, 142, 142, 146, 146, 149, 149, 149, 141, 141, 141, 141, 141, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 196, 195, 194, 193, 192, 188, 187, 186, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 170, 169, 168, 167, 164, 163, 162, 161, 160, 159, 158, 155, 154, 153, 152, 151, 150, 148, 147, 294, 136, 135, 294, 128, 125, 119, 116, 97, 94, 89, 86, 69, 63, 55, 294, 3, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294];
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 8, 10, 11, 15, 8, 18, 18, 18, 18, 17, 24, 24, 19, 26, 26, 15, 8, 19, 10, 17, 17, 43, 290, 34, 43, 19, 11, 7, 20, 34, 20, 20, 20, 20, 21, 37, 21, 21, 21, 21, 40, 38, 20, 38, 37, 36, 40, 40, 21, 51, 20, 40, 38, 20, 20, 36, 39, 41, 36, 21, 21, 41, 20, 46, 39, 45, 45, 56, 45, 39, 20, 46, 48, 54, 54, 41, 60, 66, 60, 288, 48, 60, 82, 82, 51, 75, 75, 75, 75, 76, 79, 79, 79, 79, 76, 56, 81, 75, 81, 111, 80, 66, 80, 80, 80, 80, 111, 287, 75, 75, 84, 84, 84, 101, 80, 117, 132, 137, 101, 137, 117, 283, 139, 140, 132, 80, 80, 139, 140, 141, 143, 143, 143, 143, 141, 144, 144, 145, 145, 145, 155, 155, 189, 189, 189, 189, 191, 191, 191, 191, 229, 229, 229, 229, 281, 280, 279, 277, 276, 275, 270, 269, 268, 267, 266, 261, 260, 258, 254, 252, 191, 250, 249, 248, 229, 295, 295, 295, 295, 295, 296, 296, 297, 297, 297, 297, 297, 298, 298, 299, 299, 299, 300, 300, 300, 301, 301, 301, 301, 301, 302, 247, 302, 302, 302, 303, 303, 304, 304, 304, 305, 305, 305, 305, 305, 246, 245, 244, 243, 242, 241, 238, 237, 236, 235, 231, 228, 227, 226, 223, 222, 221, 218, 217, 216, 215, 214, 213, 212, 211, 209, 208, 207, 206, 205, 204, 203, 200, 199, 198, 197, 196, 194, 193, 192, 188, 187, 186, 185, 184, 183, 182, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 167, 166, 165, 164, 162, 161, 160, 159, 158, 157, 156, 154, 153, 152, 151, 150, 136, 134, 133, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 116, 115, 114, 113, 110, 108, 107, 106, 105, 104, 103, 100, 99, 98, 97, 96, 95, 91, 87, 68, 62, 61, 58, 49, 47, 44, 42, 35, 32, 25, 22, 14, 9, 6, 3, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294];

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
TokenizeResult tokenize(Log log, Source source) {
  List<Token> tokens = [];
  var needsPreprocessor = false;
  var text = source.contents;
  var text_length = text.size();

  // For backing up
  var yy_last_accepting_state = 0;
  var yy_last_accepting_cpos = 0;

  // The current character pointer
  var yy_cp = 0;

  while (yy_cp < text_length) {
    var yy_current_state = 1; // Reset the NFA
    var yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 294) {
      if (yy_cp >= text_length) {
        break; // This prevents syntax errors from causing infinite loops
      }
      var c = text[yy_cp];
      var index = c < 127 ? c : 127;
      var yy_c = yy_ec[index];
      if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = yy_def[yy_current_state];
        if (yy_current_state >= 295) {
          yy_c = yy_meta[yy_c];
        }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
      yy_cp++;
    }

    // Find the action
    var yy_act = yy_accept[yy_current_state];
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept[yy_current_state];
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      syntaxErrorExtraData(log, Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));

      // Track the presence of preprocessor tokens
      if (yy_act >= .PREPROCESSOR_ELIF && yy_act <= .PREPROCESSOR_WARNING || yy_act == .INVALID_PREPROCESSOR_DIRECTIVE) {
        needsPreprocessor = true;
      }
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE, ""));

  // Also return preprocessor token presence so the preprocessor can be avoided
  return TokenizeResult(tokens, needsPreprocessor);
}

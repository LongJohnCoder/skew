////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ARROW,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  DOUBLE_COLON,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  SUPER,
  SWITCH,
  THIS,
  TICK,
  TILDE,
  TRUE,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}
final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NOT, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .TICK, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .ARROW, .DOUBLE, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .YY_INVALID_ACTION, .FLOAT, .WHITESPACE, .YY_INVALID_ACTION, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .YY_INVALID_ACTION, .DOUBLE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DOUBLE, .ALIAS, .IDENTIFIER, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .SWITCH, .IDENTIFIER, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .VIRTUAL, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION];
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 1, 27, 27, 27, 27, 28, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 31, 32, 33, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 29, 44, 45, 46, 47, 48, 49, 29, 50, 51, 52, 53, 54, 55, 56, 29, 29, 57, 58, 59, 60, 1];
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1];
final var yy_base = [0, 0, 0, 345, 346, 59, 320, 58, 319, 57, 57, 346, 346, 318, 54, 346, 55, 53, 51, 75, 81, 320, 346, 53, 316, 58, 346, 0, 346, 346, 315, 346, 23, 288, 62, 65, 61, 81, 79, 52, 283, 82, 297, 81, 95, 284, 103, 292, 346, 60, 346, 346, 83, 346, 97, 346, 330, 346, 346, 346, 119, 346, 329, 346, 346, 346, 346, 346, 346, 123, 0, 346, 135, 141, 135, 147, 346, 149, 0, 346, 307, 346, 346, 346, 306, 0, 346, 286, 277, 288, 275, 290, 277, 99, 0, 272, 269, 272, 275, 272, 268, 0, 268, 125, 0, 270, 260, 269, 274, 128, 276, 259, 275, 260, 265, 264, 253, 262, 254, 253, 259, 346, 346, 160, 346, 0, 165, 161, 169, 0, 346, 346, 266, 261, 264, 259, 246, 138, 261, 256, 255, 247, 244, 240, 255, 0, 241, 245, 248, 247, 0, 240, 234, 229, 230, 236, 227, 227, 239, 225, 225, 236, 227, 0, 221, 227, 174, 178, 220, 220, 225, 0, 217, 215, 223, 212, 212, 0, 0, 213, 223, 216, 210, 212, 208, 206, 0, 206, 220, 215, 210, 202, 208, 200, 212, 0, 0, 207, 194, 207, 182, 0, 193, 0, 0, 0, 197, 198, 203, 189, 0, 0, 188, 200, 198, 188, 191, 169, 183, 182, 170, 179, 0, 173, 0, 179, 0, 0, 160, 160, 0, 0, 0, 0, 176, 175, 171, 169, 155, 0, 0, 0, 0, 161, 166, 0, 167, 166, 136, 0, 134, 0, 0, 118, 109, 0, 84, 0, 0, 0, 346, 222, 226, 228, 232, 109];
final var yy_def = [0, 260, 1, 260, 260, 260, 260, 261, 260, 260, 262, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 263, 260, 260, 260, 260, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 260, 260, 260, 260, 260, 260, 261, 260, 261, 260, 260, 260, 262, 260, 262, 260, 260, 260, 260, 260, 260, 260, 264, 260, 260, 260, 260, 260, 260, 260, 265, 260, 260, 260, 260, 260, 260, 263, 260, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 260, 260, 260, 260, 264, 260, 260, 260, 265, 260, 260, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 260, 260, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 260, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 0, 260, 260, 260, 260, 260];
final var yy_nxt = [0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 26, 27, 27, 27, 28, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 27, 27, 38, 27, 27, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 27, 48, 49, 50, 51, 52, 52, 55, 58, 61, 64, 70, 87, 66, 69, 69, 69, 69, 88, 71, 80, 81, 65, 67, 68, 59, 83, 84, 121, 52, 52, 105, 62, 56, 72, 106, 73, 73, 73, 73, 72, 90, 73, 73, 73, 73, 55, 74, 93, 107, 95, 91, 96, 74, 92, 75, 129, 94, 74, 76, 98, 97, 122, 101, 74, 76, 259, 77, 99, 102, 103, 61, 56, 100, 104, 78, 109, 112, 113, 110, 114, 115, 118, 138, 69, 69, 69, 69, 139, 116, 119, 126, 258, 126, 62, 123, 69, 69, 69, 69, 72, 257, 73, 73, 73, 73, 123, 124, 127, 127, 128, 128, 128, 74, 147, 153, 166, 256, 166, 255, 154, 148, 127, 127, 74, 76, 167, 167, 167, 167, 128, 128, 128, 173, 174, 200, 200, 200, 200, 167, 167, 167, 167, 200, 200, 200, 200, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 76, 239, 238, 237, 124, 54, 54, 54, 54, 60, 60, 60, 60, 85, 85, 125, 236, 125, 125, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 172, 171, 170, 169, 168, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 152, 151, 150, 149, 146, 145, 144, 143, 142, 141, 140, 137, 136, 135, 134, 133, 132, 131, 130, 260, 260, 120, 117, 111, 108, 89, 86, 82, 79, 63, 57, 53, 260, 3, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260];
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 9, 10, 14, 18, 32, 16, 17, 17, 17, 17, 32, 18, 23, 23, 14, 16, 16, 9, 25, 25, 49, 52, 52, 39, 10, 7, 19, 39, 19, 19, 19, 19, 20, 34, 20, 20, 20, 20, 54, 19, 35, 39, 36, 34, 36, 20, 34, 19, 265, 35, 19, 19, 37, 36, 49, 38, 20, 20, 256, 19, 37, 38, 38, 60, 54, 37, 38, 19, 41, 43, 43, 41, 43, 44, 46, 93, 69, 69, 69, 69, 93, 44, 46, 74, 254, 74, 60, 69, 72, 72, 72, 72, 73, 253, 73, 73, 73, 73, 69, 69, 75, 75, 77, 77, 77, 73, 103, 109, 123, 250, 123, 248, 109, 103, 127, 127, 73, 73, 126, 126, 126, 126, 128, 128, 128, 137, 137, 166, 166, 166, 166, 167, 167, 167, 167, 200, 200, 200, 200, 247, 246, 244, 243, 238, 237, 236, 235, 234, 229, 228, 225, 223, 221, 220, 167, 219, 218, 217, 200, 261, 261, 261, 261, 262, 262, 262, 262, 263, 263, 264, 216, 264, 264, 215, 214, 213, 212, 209, 208, 207, 206, 202, 199, 198, 197, 194, 193, 192, 191, 190, 189, 188, 187, 185, 184, 183, 182, 181, 180, 179, 176, 175, 174, 173, 172, 170, 169, 168, 165, 164, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 149, 148, 147, 146, 144, 143, 142, 141, 140, 139, 138, 136, 135, 134, 133, 132, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 108, 107, 106, 105, 102, 100, 99, 98, 97, 96, 95, 92, 91, 90, 89, 88, 87, 84, 80, 62, 56, 47, 45, 42, 40, 33, 30, 24, 21, 13, 8, 6, 3, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260];

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = [];
  var text = source.contents;
  var text_length = text.size();

  // For backing up
  var yy_last_accepting_state = 0;
  var yy_last_accepting_cpos = 0;

  // The current character pointer
  var yy_cp = 0;

  while (yy_cp < text_length) {
    var yy_current_state = 1; // Reset the NFA
    var yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 260) {
      if (yy_cp >= text_length) {
        break; // This prevents syntax errors from causing infinite loops
      }
      var c = text.codeUnitAt(yy_cp);
      var index = c < 127 ? c : 127;
      var yy_c = yy_ec.get(index);
      if (yy_accept.get(yy_current_state) != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk.get(yy_base.get(yy_current_state) + yy_c) != yy_current_state) {
        yy_current_state = yy_def.get(yy_current_state);
        if (yy_current_state >= 261) {
          yy_c = yy_meta.get(yy_c);
        }
      }
      yy_current_state = yy_nxt.get(yy_base.get(yy_current_state) + yy_c);
      yy_cp++;
    }

    // Find the action
    TokenKind yy_act = yy_accept.get(yy_current_state);
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept.get(yy_current_state);
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      syntaxErrorExtraData(log, Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE, ""));

  // Do a single post-processing pass on the token list
  prepareTokens(tokens);
  return tokens;
}

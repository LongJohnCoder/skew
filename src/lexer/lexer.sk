////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ANNOTATION,
  ARROW,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CATCH,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DELETE,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  DOUBLE_COLON,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  INVALID_PREPROCESSOR_DIRECTIVE,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PREPROCESSOR_DEFINE,
  PREPROCESSOR_ELIF,
  PREPROCESSOR_ELSE,
  PREPROCESSOR_ENDIF,
  PREPROCESSOR_ERROR,
  PREPROCESSOR_IF,
  PREPROCESSOR_WARNING,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  SUPER,
  SWITCH,
  THIS,
  TICK,
  TILDE,
  TRUE,
  TRY,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}

final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NOT, .ERROR, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .ERROR, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .TICK, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .ARROW, .DOUBLE, .YY_INVALID_ACTION, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .DOUBLE_COLON, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_IF, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .WHITESPACE, .YY_INVALID_ACTION, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .ANNOTATION, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .TRY, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .YY_INVALID_ACTION, .WHITESPACE, .DOUBLE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ELIF, .PREPROCESSOR_ELSE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .INVALID_PREPROCESSOR_DIRECTIVE, .DOUBLE, .ALIAS, .IDENTIFIER, .BREAK, .CATCH, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .INVALID_PREPROCESSOR_DIRECTIVE, .PREPROCESSOR_ENDIF, .PREPROCESSOR_ERROR, .INVALID_PREPROCESSOR_DIRECTIVE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .DELETE, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .SWITCH, .IDENTIFIER, .PREPROCESSOR_DEFINE, .INVALID_PREPROCESSOR_DIRECTIVE, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .VIRTUAL, .PREPROCESSOR_WARNING, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION];
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 30, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 46, 47, 48, 49, 50, 51, 31, 52, 53, 54, 55, 56, 57, 58, 59, 31, 60, 61, 62, 63, 1];
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1];
final var yy_base = [0, 0, 0, 415, 416, 62, 389, 61, 27, 388, 61, 62, 416, 416, 387, 57, 416, 62, 55, 66, 80, 86, 389, 416, 55, 385, 64, 416, 0, 0, 416, 416, 384, 416, 50, 356, 76, 67, 62, 87, 87, 78, 351, 79, 365, 87, 41, 352, 102, 360, 416, 87, 416, 416, 143, 416, 120, 416, 400, 0, 361, 102, 359, 363, 416, 416, 416, 134, 416, 396, 416, 416, 416, 416, 416, 416, 138, 138, 0, 416, 142, 153, 151, 157, 416, 166, 0, 416, 373, 416, 416, 416, 372, 0, 0, 416, 351, 342, 353, 124, 356, 343, 123, 0, 338, 335, 338, 341, 338, 334, 0, 334, 134, 0, 336, 326, 335, 340, 137, 342, 325, 341, 326, 331, 330, 134, 329, 321, 320, 326, 416, 416, 0, 328, 145, 329, 316, 0, 315, 184, 416, 179, 188, 189, 0, 189, 184, 193, 0, 416, 416, 0, 329, 324, 327, 322, 323, 308, 161, 323, 318, 317, 309, 306, 302, 317, 0, 303, 307, 310, 309, 0, 302, 296, 291, 292, 298, 289, 289, 301, 287, 287, 298, 0, 289, 0, 283, 289, 290, 292, 292, 287, 281, 281, 198, 416, 202, 276, 276, 281, 0, 282, 272, 270, 278, 267, 267, 0, 0, 268, 278, 271, 265, 267, 263, 261, 0, 261, 275, 270, 265, 257, 263, 255, 267, 0, 0, 262, 249, 262, 253, 0, 0, 259, 248, 254, 206, 0, 244, 0, 0, 0, 0, 248, 249, 254, 240, 0, 0, 239, 251, 249, 239, 244, 221, 208, 207, 196, 204, 0, 198, 0, 204, 0, 199, 0, 0, 190, 0, 183, 183, 0, 0, 0, 0, 199, 198, 194, 192, 178, 0, 0, 0, 0, 184, 0, 187, 188, 0, 189, 165, 151, 0, 111, 0, 0, 0, 73, 51, 0, 41, 0, 0, 0, 416, 248, 250, 255, 257, 260, 263, 268, 273, 276, 278, 283];
final var yy_def = [0, 304, 1, 304, 304, 304, 304, 305, 306, 304, 304, 307, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 308, 309, 304, 304, 304, 304, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 304, 304, 304, 304, 304, 304, 305, 304, 305, 310, 310, 310, 310, 310, 304, 304, 304, 307, 304, 307, 304, 304, 304, 304, 304, 304, 304, 311, 312, 304, 304, 304, 304, 304, 304, 304, 313, 304, 304, 304, 304, 304, 304, 314, 309, 304, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 304, 304, 310, 310, 310, 310, 310, 310, 310, 304, 304, 311, 315, 311, 312, 304, 304, 304, 313, 304, 304, 314, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 310, 310, 310, 310, 310, 310, 304, 304, 304, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 310, 310, 310, 310, 310, 310, 304, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 310, 310, 310, 310, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 310, 310, 309, 309, 309, 309, 309, 309, 309, 309, 310, 309, 309, 309, 309, 309, 309, 309, 309, 0, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304];
final var yy_nxt = [0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 40, 29, 29, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49, 29, 29, 50, 51, 52, 53, 54, 54, 57, 60, 61, 65, 71, 68, 62, 76, 76, 76, 76, 73, 77, 88, 89, 303, 72, 78, 63, 124, 66, 74, 75, 91, 92, 79, 302, 125, 58, 69, 80, 96, 81, 81, 81, 81, 80, 97, 81, 81, 81, 81, 102, 104, 82, 105, 130, 99, 301, 114, 82, 103, 83, 115, 106, 82, 84, 100, 107, 57, 101, 82, 84, 110, 85, 118, 108, 116, 119, 111, 112, 109, 86, 127, 113, 121, 122, 68, 123, 54, 54, 128, 131, 134, 142, 135, 300, 58, 136, 143, 76, 76, 76, 76, 76, 76, 76, 76, 145, 159, 145, 69, 139, 80, 160, 81, 81, 81, 81, 146, 146, 155, 156, 139, 140, 168, 174, 82, 147, 147, 147, 175, 169, 182, 189, 142, 299, 183, 82, 84, 143, 194, 190, 194, 142, 142, 146, 146, 298, 195, 143, 196, 196, 196, 196, 147, 147, 147, 203, 204, 236, 236, 236, 236, 196, 196, 196, 196, 236, 236, 236, 236, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 84, 281, 280, 279, 140, 56, 56, 56, 56, 56, 59, 59, 67, 67, 67, 67, 67, 93, 93, 94, 94, 94, 132, 132, 132, 141, 141, 141, 141, 141, 144, 278, 144, 144, 144, 148, 148, 151, 151, 151, 143, 143, 143, 143, 143, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 202, 201, 200, 199, 198, 197, 193, 192, 191, 188, 187, 186, 185, 184, 181, 180, 179, 178, 177, 176, 173, 172, 171, 170, 167, 166, 165, 164, 163, 162, 161, 158, 157, 154, 153, 152, 150, 149, 304, 138, 137, 133, 304, 129, 126, 120, 117, 98, 95, 90, 87, 70, 64, 55, 304, 3, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304];
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 8, 8, 10, 15, 11, 8, 18, 18, 18, 18, 17, 19, 24, 24, 300, 15, 19, 8, 46, 10, 17, 17, 26, 26, 19, 298, 46, 7, 11, 20, 34, 20, 20, 20, 20, 21, 34, 21, 21, 21, 21, 37, 38, 20, 38, 51, 36, 297, 41, 21, 37, 20, 41, 38, 20, 20, 36, 39, 56, 36, 21, 21, 40, 20, 43, 39, 41, 43, 40, 40, 39, 20, 48, 40, 45, 45, 67, 45, 54, 54, 48, 51, 61, 77, 61, 293, 56, 61, 77, 76, 76, 76, 76, 80, 80, 80, 80, 82, 102, 82, 67, 76, 81, 102, 81, 81, 81, 81, 83, 83, 99, 99, 76, 76, 112, 118, 81, 85, 85, 85, 118, 112, 125, 134, 141, 291, 125, 81, 81, 141, 139, 134, 139, 142, 143, 146, 146, 290, 142, 143, 145, 145, 145, 145, 147, 147, 147, 158, 158, 194, 194, 194, 194, 196, 196, 196, 196, 236, 236, 236, 236, 289, 287, 286, 284, 279, 278, 277, 276, 275, 270, 269, 267, 264, 262, 260, 258, 196, 257, 256, 255, 236, 305, 305, 305, 305, 305, 306, 306, 307, 307, 307, 307, 307, 308, 308, 309, 309, 309, 310, 310, 310, 311, 311, 311, 311, 311, 312, 254, 312, 312, 312, 313, 313, 314, 314, 314, 315, 315, 315, 315, 315, 253, 252, 251, 250, 249, 246, 245, 244, 243, 238, 235, 234, 233, 230, 229, 228, 227, 224, 223, 222, 221, 220, 219, 218, 217, 215, 214, 213, 212, 211, 210, 209, 206, 205, 204, 203, 202, 201, 199, 198, 197, 193, 192, 191, 190, 189, 188, 187, 186, 184, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 170, 169, 168, 167, 165, 164, 163, 162, 161, 160, 159, 157, 156, 155, 154, 153, 152, 138, 136, 135, 133, 129, 128, 127, 126, 124, 123, 122, 121, 120, 119, 117, 116, 115, 114, 111, 109, 108, 107, 106, 105, 104, 101, 100, 98, 97, 96, 92, 88, 69, 63, 62, 60, 58, 49, 47, 44, 42, 35, 32, 25, 22, 14, 9, 6, 3, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304];

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = [];
  var text = source.contents;
  var text_length = text.size();

  // For backing up
  var yy_last_accepting_state = 0;
  var yy_last_accepting_cpos = 0;

  // The current character pointer
  var yy_cp = 0;

  while (yy_cp < text_length) {
    var yy_current_state = 1; // Reset the NFA
    var yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 304) {
      if (yy_cp >= text_length) {
        break; // This prevents syntax errors from causing infinite loops
      }
      var c = text[yy_cp];
      var index = c < 127 ? c : 127;
      var yy_c = yy_ec[index];
      if (yy_accept[yy_current_state] != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = yy_def[yy_current_state];
        if (yy_current_state >= 305) {
          yy_c = yy_meta[yy_c];
        }
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
      yy_cp++;
    }

    // Find the action
    var yy_act = yy_accept[yy_current_state];
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept[yy_current_state];
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      var range = Range(source, yy_bp, yy_cp);
      syntaxErrorExtraData(log, range, range.toString());
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE));

  // Also return preprocessor token presence so the preprocessor can be avoided
  return tokens;
}

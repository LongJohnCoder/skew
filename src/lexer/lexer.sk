////////////////////////////////////////////////////////////////////////////////
//
// This is a generated file, all edits will be lost!
//
////////////////////////////////////////////////////////////////////////////////

enum TokenKind {
  ALIAS,
  ASSERT,
  ASSIGN,
  ASSIGN_BITWISE_AND,
  ASSIGN_BITWISE_OR,
  ASSIGN_BITWISE_XOR,
  ASSIGN_DIVIDE,
  ASSIGN_MINUS,
  ASSIGN_MULTIPLY,
  ASSIGN_PLUS,
  ASSIGN_REMAINDER,
  ASSIGN_SHIFT_LEFT,
  ASSIGN_SHIFT_RIGHT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BREAK,
  CASE,
  CHARACTER,
  CLASS,
  COLON,
  COMMA,
  CONST,
  CONTINUE,
  DECREMENT,
  DEFAULT,
  DIVIDE,
  DO,
  DOT,
  DOUBLE,
  ELSE,
  END_OF_FILE,
  ENUM,
  EQUAL,
  ERROR,
  EXPORT,
  FALSE,
  FINAL,
  FLOAT,
  FOR,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL,
  IDENTIFIER,
  IF,
  IMPORT,
  IN,
  INCREMENT,
  INLINE,
  INTERFACE,
  INT_BINARY,
  INT_DECIMAL,
  INT_HEX,
  INT_OCTAL,
  IS,
  LEFT_BRACE,
  LEFT_BRACKET,
  LEFT_PARENTHESIS,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MINUS,
  MULTIPLY,
  NAMESPACE,
  NEW,
  NOT,
  NOT_EQUAL,
  NULL,
  OVERRIDE,
  PLUS,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  QUESTION_MARK,
  REMAINDER,
  RETURN,
  RIGHT_BRACE,
  RIGHT_BRACKET,
  RIGHT_PARENTHESIS,
  SEMICOLON,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  STATIC,
  STRING,
  STRUCT,
  SUPER,
  SWITCH,
  THIS,
  TILDE,
  TRUE,
  UNTYPED,
  USING,
  VAR,
  VIRTUAL,
  WHILE,
  WHITESPACE,
  YY_INVALID_ACTION,

  // Token kinds not used by flex
  START_PARAMETER_LIST,
  END_PARAMETER_LIST,
}
final List<TokenKind> yy_accept = [.YY_INVALID_ACTION, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .END_OF_FILE, .ERROR, .WHITESPACE, .NOT, .ERROR, .REMAINDER, .BITWISE_AND, .ERROR, .LEFT_PARENTHESIS, .RIGHT_PARENTHESIS, .MULTIPLY, .PLUS, .COMMA, .MINUS, .DOT, .DIVIDE, .INT_DECIMAL, .INT_DECIMAL, .COLON, .SEMICOLON, .LESS_THAN, .ASSIGN, .GREATER_THAN, .QUESTION_MARK, .IDENTIFIER, .LEFT_BRACKET, .RIGHT_BRACKET, .BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .LEFT_BRACE, .BITWISE_OR, .RIGHT_BRACE, .TILDE, .WHITESPACE, .NOT_EQUAL, .YY_INVALID_ACTION, .STRING, .YY_INVALID_ACTION, .ASSIGN_REMAINDER, .LOGICAL_AND, .ASSIGN_BITWISE_AND, .YY_INVALID_ACTION, .CHARACTER, .YY_INVALID_ACTION, .ASSIGN_MULTIPLY, .INCREMENT, .ASSIGN_PLUS, .DECREMENT, .ASSIGN_MINUS, .WHITESPACE, .ASSIGN_DIVIDE, .YY_INVALID_ACTION, .INT_DECIMAL, .YY_INVALID_ACTION, .FLOAT, .YY_INVALID_ACTION, .YY_INVALID_ACTION, .SHIFT_LEFT, .LESS_THAN_OR_EQUAL, .EQUAL, .GREATER_THAN_OR_EQUAL, .SHIFT_RIGHT, .IDENTIFIER, .ASSIGN_BITWISE_XOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DO, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IF, .IDENTIFIER, .IN, .IS, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ASSIGN_BITWISE_OR, .LOGICAL_OR, .WHITESPACE, .DOUBLE, .INT_BINARY, .INT_OCTAL, .INT_HEX, .ASSIGN_SHIFT_LEFT, .ASSIGN_SHIFT_RIGHT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FOR, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NEW, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .VAR, .IDENTIFIER, .IDENTIFIER, .FLOAT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .CASE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ELSE, .ENUM, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .NULL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .THIS, .TRUE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .ALIAS, .IDENTIFIER, .BREAK, .CLASS, .CONST, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .FALSE, .FINAL, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .SUPER, .IDENTIFIER, .IDENTIFIER, .USING, .IDENTIFIER, .WHILE, .ASSERT, .IDENTIFIER, .IDENTIFIER, .EXPORT, .IMPORT, .INLINE, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PUBLIC, .RETURN, .STATIC, .STRUCT, .SWITCH, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .DEFAULT, .IDENTIFIER, .IDENTIFIER, .IDENTIFIER, .PRIVATE, .IDENTIFIER, .UNTYPED, .VIRTUAL, .CONTINUE, .IDENTIFIER, .IDENTIFIER, .OVERRIDE, .IDENTIFIER, .INTERFACE, .NAMESPACE, .PROTECTED, .YY_INVALID_ACTION];
final var yy_ec = [0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 24, 25, 26, 1, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 28, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 28, 42, 43, 44, 45, 46, 47, 28, 48, 49, 50, 51, 52, 53, 54, 55, 28, 56, 57, 58, 59, 1];
final var yy_meta = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1];
final var yy_base = [0, 0, 0, 314, 315, 58, 289, 57, 288, 56, 56, 315, 315, 287, 53, 315, 52, 315, 51, 73, 64, 315, 315, 45, 286, 46, 315, 0, 315, 315, 285, 29, 260, 52, 57, 54, 63, 68, 77, 255, 67, 269, 70, 76, 56, 89, 265, 315, 76, 315, 315, 71, 315, 120, 315, 301, 315, 315, 315, 118, 315, 300, 315, 315, 315, 315, 315, 0, 315, 117, 123, 114, 315, 127, 0, 278, 315, 315, 315, 277, 0, 315, 259, 250, 261, 248, 263, 250, 256, 0, 244, 241, 244, 247, 244, 240, 0, 240, 104, 0, 242, 232, 241, 246, 110, 248, 231, 116, 233, 238, 237, 226, 226, 234, 226, 225, 231, 315, 315, 0, 140, 135, 148, 0, 315, 315, 238, 233, 236, 231, 218, 113, 233, 228, 220, 217, 213, 228, 0, 214, 218, 221, 220, 0, 213, 207, 202, 203, 209, 200, 200, 198, 211, 197, 197, 208, 189, 198, 0, 192, 198, 315, 191, 191, 196, 0, 188, 186, 194, 183, 0, 0, 185, 195, 188, 182, 184, 180, 178, 0, 178, 192, 187, 182, 174, 180, 185, 171, 183, 0, 0, 170, 177, 164, 177, 0, 163, 0, 0, 0, 167, 168, 160, 0, 0, 159, 171, 169, 159, 164, 154, 168, 167, 156, 165, 149, 0, 158, 160, 0, 163, 0, 0, 144, 144, 0, 0, 0, 160, 157, 141, 139, 125, 0, 0, 0, 0, 0, 138, 130, 135, 0, 136, 135, 132, 0, 131, 0, 0, 0, 118, 102, 0, 93, 0, 0, 0, 315, 178, 182, 184, 188, 86];
final var yy_def = [0, 257, 1, 257, 257, 257, 257, 258, 257, 257, 259, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 260, 257, 257, 257, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 257, 257, 257, 257, 257, 257, 258, 257, 258, 257, 257, 257, 259, 257, 259, 257, 257, 257, 257, 257, 261, 257, 257, 257, 257, 257, 257, 262, 257, 257, 257, 257, 257, 260, 257, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 257, 257, 261, 257, 257, 257, 262, 257, 257, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 257, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 0, 257, 257, 257, 257, 257];
final var yy_nxt = [0, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 4, 29, 30, 31, 32, 33, 34, 35, 36, 27, 27, 37, 27, 27, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 27, 27, 47, 48, 49, 50, 51, 51, 54, 57, 60, 63, 65, 67, 75, 76, 78, 79, 82, 51, 51, 68, 66, 64, 83, 69, 58, 70, 70, 70, 70, 85, 61, 55, 69, 123, 70, 70, 70, 70, 88, 86, 93, 90, 87, 91, 117, 112, 72, 89, 94, 113, 96, 71, 92, 95, 100, 72, 97, 98, 101, 104, 110, 99, 105, 73, 107, 108, 114, 109, 111, 54, 60, 74, 102, 256, 115, 121, 121, 118, 120, 120, 120, 120, 69, 255, 70, 70, 70, 70, 122, 122, 122, 140, 61, 150, 55, 146, 121, 121, 141, 254, 147, 120, 120, 120, 120, 72, 167, 168, 151, 122, 122, 122, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 161, 53, 53, 53, 53, 59, 59, 59, 59, 80, 80, 119, 243, 119, 119, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 166, 165, 164, 163, 162, 160, 159, 158, 157, 156, 155, 154, 153, 152, 149, 148, 145, 144, 143, 142, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 257, 257, 116, 106, 103, 84, 81, 77, 62, 56, 52, 257, 3, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257];
final var yy_chk = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 9, 10, 14, 16, 18, 23, 23, 25, 25, 31, 51, 51, 18, 16, 14, 31, 20, 9, 20, 20, 20, 20, 33, 10, 7, 19, 262, 19, 19, 19, 19, 34, 33, 36, 35, 33, 35, 48, 44, 20, 34, 36, 44, 37, 19, 35, 36, 38, 19, 37, 37, 38, 40, 43, 37, 40, 19, 42, 42, 45, 42, 43, 53, 59, 19, 38, 253, 45, 71, 71, 48, 69, 69, 69, 69, 70, 251, 70, 70, 70, 70, 73, 73, 73, 98, 59, 107, 53, 104, 121, 121, 98, 250, 104, 120, 120, 120, 120, 70, 131, 131, 107, 122, 122, 122, 246, 244, 243, 242, 240, 239, 238, 232, 231, 230, 120, 258, 258, 258, 258, 259, 259, 259, 259, 260, 260, 261, 229, 261, 261, 228, 224, 223, 220, 218, 217, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 202, 201, 200, 196, 194, 193, 192, 191, 188, 187, 186, 185, 184, 183, 182, 181, 180, 178, 177, 176, 175, 174, 173, 172, 169, 168, 167, 166, 164, 163, 162, 160, 159, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 137, 136, 135, 134, 133, 132, 130, 129, 128, 127, 126, 116, 115, 114, 113, 112, 111, 110, 109, 108, 106, 105, 103, 102, 101, 100, 97, 95, 94, 93, 92, 91, 90, 88, 87, 86, 85, 84, 83, 82, 79, 75, 61, 55, 46, 41, 39, 32, 30, 24, 13, 8, 6, 3, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257];

// This is the inner loop from "flex", an ancient lexer generator. The output
// of flex is pretty bad (obfuscated variable names and the opposite of modular
// code) but it's fast and somewhat standard for compiler design. The code below
// replaces a simple hand-coded lexer and offers much better performance.
List<Token> tokenize(Log log, Source source) {
  List<Token> tokens = [];
  var text = source.contents;
  var text_length = text.size();

  // For backing up
  var yy_last_accepting_state = 0;
  var yy_last_accepting_cpos = 0;

  // The current character pointer
  var yy_cp = 0;

  while (yy_cp < text_length) {
    var yy_current_state = 1; // Reset the NFA
    var yy_bp = yy_cp; // The pointer to the beginning of the token

    // Search for a match
    while (yy_current_state != 257) {
      if (yy_cp >= text_length) {
        break; // This prevents syntax errors from causing infinite loops
      }
      var c = text.codeUnitAt(yy_cp);
      var index = c < 127 ? c : 127;
      var yy_c = yy_ec.get(index);
      if (yy_accept.get(yy_current_state) != .YY_INVALID_ACTION) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk.get(yy_base.get(yy_current_state) + yy_c) != yy_current_state) {
        yy_current_state = yy_def.get(yy_current_state);
        if (yy_current_state >= 258) {
          yy_c = yy_meta.get(yy_c);
        }
      }
      yy_current_state = yy_nxt.get(yy_base.get(yy_current_state) + yy_c);
      yy_cp++;
    }

    // Find the action
    TokenKind yy_act = yy_accept.get(yy_current_state);
    while (yy_act == .YY_INVALID_ACTION) {
      // Have to back up
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept.get(yy_current_state);
    }

    // Ignore whitespace
    if (yy_act == .WHITESPACE) {
      continue;
    }

    // This is the default action in flex, which is usually called ECHO
    else if (yy_act == .ERROR) {
      syntaxErrorExtraData(log, Range(source, yy_bp, yy_cp), text.slice(yy_bp, yy_cp));
      break;
    }

    // Ignore END_OF_FILE since this loop must still perform the last action
    else if (yy_act != .END_OF_FILE) {
      tokens.push(Token(Range(source, yy_bp, yy_cp), yy_act, text.slice(yy_bp, yy_cp)));
    }
  }

  // Every token stream ends in END_OF_FILE
  tokens.push(Token(Range(source, text_length, text_length), .END_OF_FILE, ""));

  // Do a single post-processing pass on the token list
  prepareTokens(tokens);
  return tokens;
}

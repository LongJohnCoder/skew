namespace lisp {
  string dump(Node node) {
    var visitor = DumpVisitor();
    visitor.visit(node);
    visitor.builder.append("\n");
    return visitor.builder.toString();
  }

  class Emitter : IEmitter {
    private CompilerOptions options;

    override List<Source> emitProgram(Node program) {
      List<Source> outputs = [];
      if (options.outputDirectory == "") {
        outputs.push(Source(options.outputFile, dump(program)));
      } else {
        for (var i = 0; i < program.children.size(); i++) {
          var file = program.children[i];
          outputs.push(Source(joinPath(options.outputDirectory, file.range.source.name + ".lisp"), dump(file)));
        }
      }
      return outputs;
    }
  }

  class DumpVisitor {
    var builder = StringBuilder();
    var indent = "";

    void visit(Node node) {
      if (node == null) {
        builder.append("nil");
        return;
      }
      builder.append("(" + node.kind.prettyPrint());
      if (node.content != null) {
        switch (node.content.type()) {
          case .INT { builder.append(" " + node.asInt()); }
          case .BOOL { builder.append(" " + node.asBool()); }
          case .DOUBLE { builder.append(" " + node.asDouble()); }
          case .STRING { builder.append(" " + quoteString(node.asString(), '"')); }
        }
      }
      if (node.hasChildren()) {
        var old = indent;
        indent += "  ";
        for (var i = 0; i < node.children.size(); i++) {
          builder.append("\n" + indent);
          visit(node.children[i]);
        }
        indent = old;
      }
      builder.append(")");
    }
  }
}

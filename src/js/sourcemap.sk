class SourceMapping {
  int sourceIndex;
  int originalLine; // 0-based
  int originalColumn; // 0-based
  int generatedLine; // 0-based
  int generatedColumn; // 0-based
}

class SourceMappingComparison : Comparison<SourceMapping> {
  static final var INSTANCE = SourceMappingComparison();

  override int compare(SourceMapping left, SourceMapping right) {
    var delta = left.generatedLine - right.generatedLine;
    return delta != 0 ? delta : left.generatedColumn - right.generatedColumn;
  }
}

// Based on: https://github.com/mozilla/source-map
class SourceMapGenerator {
  List<SourceMapping> mappings = [];
  List<Source> sources = [];

  void addMapping(Source source, int originalLine, int originalColumn, int generatedLine, int generatedColumn) {
    var sourceIndex = sources.indexOf(source);
    if (sourceIndex == -1) {
      sourceIndex = sources.size();
      sources.push(source);
    }
    mappings.push(SourceMapping(sourceIndex, originalLine, originalColumn, generatedLine, generatedColumn));
  }

  string toString() {
    List<string> sourceNames = [];
    List<string> sourceContents = [];

    for (var i = 0; i < sources.size(); i++) {
      Source source = sources[i];
      sourceNames.push(quoteString(source.name, '"'));
      sourceContents.push(quoteString(source.contents, '"'));
    }

    var result = "{\"version\":3,\"sources\":[" + ",".join(sourceNames) +
      "],\"sourcesContent\":[" + ",".join(sourceContents) + "],\"names\":[],\"mappings\":\"";

    // Sort the mappings in increasing order by generated location
    mappings.sort(SourceMappingComparison.INSTANCE);

    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 0;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousSourceIndex = 0;

    // Generate the base64 VLQ encoded mappings
    for (var i = 0; i < mappings.size(); i++) {
      var mapping = mappings[i];
      var generatedLine = mapping.generatedLine;

      // Insert ',' for the same line and ';' for a line
      if (previousGeneratedLine == generatedLine) {
        if (previousGeneratedColumn == mapping.generatedColumn && (
            previousGeneratedLine != 0 || previousGeneratedColumn != 0)) {
          continue;
        }
        result += ",";
      } else {
        previousGeneratedColumn = 0;
        while (previousGeneratedLine < generatedLine) {
          result += ";";
          previousGeneratedLine++;
        }
      }

      // Record the generated column (the line is recorded using ';' above)
      result += encodeVLQ(mapping.generatedColumn - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      // Record the generated source
      result += encodeVLQ(mapping.sourceIndex - previousSourceIndex);
      previousSourceIndex = mapping.sourceIndex;

      // Record the original line
      result += encodeVLQ(mapping.originalLine - previousOriginalLine);
      previousOriginalLine = mapping.originalLine;

      // Record the original column
      result += encodeVLQ(mapping.originalColumn - previousOriginalColumn);
      previousOriginalColumn = mapping.originalColumn;
    }

    return result + "\"}\n";
  }

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the continuation
  // bit. The continuation bit tells us whether there are more digits in this
  // value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011
  //
  static string encodeVLQ(int value) {
    var vlq = value < 0 ? -value << 1 | 1 : value << 1;
    var encoded = "";
    do {
      var digit = vlq & 31;
      vlq >>= 5;

      // If there are still more digits in this value, we must make sure the
      // continuation bit is marked
      if (vlq != 0) digit |= 32;

      encoded += BASE64.sliceCodeUnit(digit);
    } while (vlq != 0);
    return encoded;
  }

  static final string BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
}

namespace js {
  const var NATIVE_LIBRARY = "
import class int { string toString(); }
import class bool { string toString(); }
import class float { string toString(); }
import class double { string toString(); }

import class string {
  string slice(int start, int end);
  int indexOf(string value);
  int lastIndexOf(string value);
  string toLowerCase();
  string toUpperCase();
}

in string {
  inline {
    int size() { return this.`length`; }
    static string fromCodeUnit(int value) { return `String`.fromCharCode(value); }
    string get(int index) { return `this`[index]; }
    string join(List<string> values) { return values.`join`(this); }
    int codeUnitAt(int index) { return this.`charCodeAt`(index); }
  }

  bool startsWith(string prefix) { return size() >= prefix.size() && slice(0, prefix.size()) == prefix; }
  bool endsWith(string suffix) { return size() >= suffix.size() && slice(size() - suffix.size(), size()) == suffix; }
  string repeat(int count) { var result = \"\"; for (var i = 0; i < count; i++) result += this; return result; }
}

interface Comparison<T> {
  virtual int compare(T left, T right);
}

void bindCompare<T>(Comparison<T> comparison) {
  return comparison.compare.`bind`(comparison);
}

import class List<T> {
  new();
  void push(T value);
  void unshift(T value);
  List<T> slice(int start, int end);
  int indexOf(T value);
  int lastIndexOf(T value);
  T shift();
  T pop();
  void reverse();
}

in List {
  inline {
    int size() { return this.`length`; }
    void sort(Comparison<T> comparison) { this.`sort`(bindCompare<T>(comparison)); }
    List<T> clone() { return this.`slice`(); }
    T remove(int index) { return this.`splice`(index, 1)[0]; }
    void insert(int index, T value) { this.`splice`(index, 0, value); }
    T get(int index) { return `this`[index]; }
    void set(int index, T value) { `this`[index] = value; }
  }

  void swap(int a, int b) { var temp = get(a); set(a, get(b)); set(b, temp); }
}

class StringMap<T> {
  var _table = `Object`.create(null);

  inline {
    T get(string key) { return _table[key]; }
    void set(string key, T value) { _table[key] = value; }
    bool has(string key) { return key in _table; }
    void remove(string key) { delete _table[key]; }
  }

  T getOrDefault(string key, T defaultValue) {
    return has(key) ? get(key) : defaultValue;
  }

  List<string> keys() {
    List<string> keys = [];
    for (string key in _table) keys.push(key);
    return keys;
  }

  List<T> values() {
    List<T> values = [];
    for (string key in _table) values.push(get(key));
    return values;
  }

  StringMap<T> clone() {
    var clone = StringMap<T>();
    for (string key in _table) clone.set(key, get(key));
    return clone;
  }
}

class IntMap<T> {
  var _table = `Object`.create(null);

  inline {
    T get(int key) { return _table[key]; }
    void set(int key, T value) { _table[key] = value; }
    bool has(int key) { return key in _table; }
    void remove(int key) { delete _table[key]; }
  }

  T getOrDefault(int key, T defaultValue) {
    return has(key) ? get(key) : defaultValue;
  }

  List<int> keys() {
    List<int> keys = [];
    for (double key in _table) keys.push((int)key);
    return keys;
  }

  List<T> values() {
    List<T> values = [];
    for (int key in _table) values.push(get(key));
    return values;
  }

  IntMap<T> clone() {
    var clone = IntMap<T>();
    for (int key in _table) clone.set(key, get(key));
    return clone;
  }
}

namespace math {
  inline {
    double abs(double x) { return `Math`.abs(x); }
    double sin(double x) { return `Math`.sin(x); }
    double cos(double x) { return `Math`.cos(x); }
    double tan(double x) { return `Math`.tan(x); }
    double asin(double x) { return `Math`.asin(x); }
    double acos(double x) { return `Math`.acos(x); }
    double atan(double x) { return `Math`.atan(x); }
    double atan2(double y, double x) { return `Math`.atan2(y, x); }
    double sqrt(double x) { return `Math`.sqrt(x); }
    double exp(double x) { return `Math`.exp(x); }
    double log(double x) { return `Math`.log(x); }
    double pow(double x, double y) { return `Math`.pow(x, y); }
    double floor(double x) { return `Math`.floor(x); }
    double round(double x) { return `Math`.round(x); }
    double ceil(double x) { return `Math`.ceil(x); }
    double min(double x, double y) { return `Math`.min(x, y); }
    double max(double x, double y) { return `Math`.max(x, y); }
  }

  const {
    double SQRT2 = 1.414213562373095;
    double PI = 3.141592653589793;
    double E = 2.718281828459045;
    double INFINITY = 1 / 0.0;
    double NAN = 0 / 0.0;
  }
}
";
}

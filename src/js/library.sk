namespace js {
  const var NATIVE_LIBRARY = "
import class int { string toString(); }
import class bool { string toString(); }
import class float { string toString(); }
import class double { string toString(); }

import namespace operators {
  void delete(int value);
  void sort<T>(List<T> list, Comparison<T> comparison);
}

import class string {
  string slice(int start, int end);
  int indexOf(string value);
  int lastIndexOf(string value);
  string toLowerCase();
  string toUpperCase();
}

in string {
  inline {
    int size() { return untyped(this.length); }
    static string fromCodeUnit(int value) { return untyped(String.fromCharCode(typed(value))); }
    string get(int index) { return untyped(this[typed(index)]); }
    string join(List<string> values) { return untyped(typed(values).join(this)); }
    int codeUnitAt(int index) { return untyped(this.charCodeAt(typed(index))); }
  }

  bool startsWith(string prefix) { return size() >= prefix.size() && slice(0, prefix.size()) == prefix; }
  bool endsWith(string suffix) { return size() >= suffix.size() && slice(size() - suffix.size(), size()) == suffix; }
  string repeat(int count) { var result = \"\"; for (var i = 0; i < count; i++) result += this; return result; }
}

export interface Comparison<T> {
  virtual int compare(T left, T right);
}

import class List<T> {
  new();
  void push(T value);
  void unshift(T value);
  List<T> slice(int start, int end);
  int indexOf(T value);
  int lastIndexOf(T value);
  T shift();
  T pop();
  void reverse();
}

in List {
  inline {
    int size() { return untyped(this.length); }
    void sort(Comparison<T> comparison) { operators.sort<T>(this, comparison); }
    List<T> clone() { return untyped(this.slice()); }
    T remove(int index) { return untyped(this.splice(typed(index), 1)[0]); }
    void insert(int index, T value) { untyped(this.splice(typed(index), 0, typed(value))); }
    T get(int index) { return untyped(this[typed(index)]); }
    void set(int index, T value) { untyped(this[typed(index)] = typed(value)); }
  }

  void swap(int a, int b) { var temp = get(a); set(a, get(b)); set(b, temp); }
}

class StringMap<T> {
  var _table = untyped(Object.create(null));

  inline {
    T get(string key) { return _table[key]; }
    void set(string key, T value) { _table[key] = value; }
    bool has(string key) { return key in _table; }
    void remove(string key) { operators.delete(_table[key]); }
  }

  T getOrDefault(string key, T defaultValue) {
    return has(key) ? get(key) : defaultValue;
  }

  List<string> keys() {
    List<string> keys = [];
    for (string key in _table) keys.push(key);
    return keys;
  }

  List<T> values() {
    List<T> values = [];
    for (string key in _table) values.push(get(key));
    return values;
  }

  StringMap<T> clone() {
    var clone = StringMap<T>();
    for (string key in _table) clone.set(key, get(key));
    return clone;
  }
}

class IntMap<T> {
  var _table = untyped(Object.create(null));

  inline {
    T get(int key) { return _table[key]; }
    void set(int key, T value) { _table[key] = value; }
    bool has(int key) { return key in _table; }
    void remove(int key) { operators.delete(_table[key]); }
  }

  T getOrDefault(int key, T defaultValue) {
    return has(key) ? get(key) : defaultValue;
  }

  List<int> keys() {
    List<int> keys = [];
    for (double key in _table) keys.push((int)key);
    return keys;
  }

  List<T> values() {
    List<T> values = [];
    for (int key in _table) values.push(get(key));
    return values;
  }

  IntMap<T> clone() {
    var clone = IntMap<T>();
    for (int key in _table) clone.set(key, get(key));
    return clone;
  }
}

namespace math {
  inline {
    double abs(double x) { return untyped(Math.abs(typed(x))); }
    double sin(double x) { return untyped(Math.sin(typed(x))); }
    double cos(double x) { return untyped(Math.cos(typed(x))); }
    double tan(double x) { return untyped(Math.tan(typed(x))); }
    double asin(double x) { return untyped(Math.asin(typed(x))); }
    double acos(double x) { return untyped(Math.acos(typed(x))); }
    double atan(double x) { return untyped(Math.atan(typed(x))); }
    double atan2(double y, double x) { return untyped(Math.atan2(typed(y), typed(x))); }
    double sqrt(double x) { return untyped(Math.sqrt(typed(x))); }
    double exp(double x) { return untyped(Math.exp(typed(x))); }
    double log(double x) { return untyped(Math.log(typed(x))); }
    double pow(double x, double y) { return untyped(Math.pow(typed(x), typed(y))); }
    double floor(double x) { return untyped(Math.floor(typed(x))); }
    double round(double x) { return untyped(Math.round(typed(x))); }
    double ceil(double x) { return untyped(Math.ceil(typed(x))); }
    double min(double x, double y) { return untyped(Math.min(typed(x), typed(y))); }
    double max(double x, double y) { return untyped(Math.max(typed(x), typed(y))); }
  }

  const {
    double SQRT2 = 1.414213562373095;
    double PI = 3.141592653589793;
    double E = 2.718281828459045;
    double INFINITY = 1 / 0.0;
    double NAN = 0 / 0.0;
  }
}
";
}

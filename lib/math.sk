#if TARGET_JS

  namespace math {
    inline pure {
      double abs(double x) { return `Math`.abs(x); }
      double sin(double x) { return `Math`.sin(x); }
      double cos(double x) { return `Math`.cos(x); }
      double tan(double x) { return `Math`.tan(x); }
      double asin(double x) { return `Math`.asin(x); }
      double acos(double x) { return `Math`.acos(x); }
      double atan(double x) { return `Math`.atan(x); }
      double atan2(double y, double x) { return `Math`.atan2(y, x); }
      double sqrt(double x) { return `Math`.sqrt(x); }
      double exp(double x) { return `Math`.exp(x); }
      double log(double x) { return `Math`.log(x); }
      double pow(double x, double y) { return `Math`.pow(x, y); }
      double floor(double x) { return `Math`.floor(x); }
      double round(double x) { return `Math`.round(x); }
      double ceil(double x) { return `Math`.ceil(x); }
      double min(double x, double y) { return `Math`.min(x, y); }
      double max(double x, double y) { return `Math`.max(x, y); }
      bool isNaN(double x) { return `isNaN`(x); }
    }

    inline double random() { return `Math`.random(); }
  }

#elif TARGET_CPP

  namespace math {
    inline pure @NeedsInclude("<cmath>") {
      double abs(double x) { return `std`::abs(x); }
      double sin(double x) { return `std`::sin(x); }
      double cos(double x) { return `std`::cos(x); }
      double tan(double x) { return `std`::tan(x); }
      double asin(double x) { return `std`::asin(x); }
      double acos(double x) { return `std`::acos(x); }
      double atan(double x) { return `std`::atan(x); }
      double atan2(double y, double x) { return `std`::atan2(y, x); }
      double sqrt(double x) { return `std`::sqrt(x); }
      double exp(double x) { return `std`::exp(x); }
      double log(double x) { return `std`::log(x); }
      double pow(double x, double y) { return `std`::pow(x, y); }
      double floor(double x) { return `std`::floor(x); }
      double round(double x) { return `std`::round(x); }
      double ceil(double x) { return `std`::ceil(x); }
      double min(double x, double y) { return `std`::fmin(x, y); }
      double max(double x, double y) { return `std`::fmax(x, y); }
      bool isNaN(double x) { return `std`::isnan(x); }
    }

    @NeedsInclude("<random>") {
      `std::uniform_real_distribution<double>` _distribution_;
      `(std::mt19937 *)` _generator_ = null;

      double random() {
        if (_generator_ == null) {
          _generator_ = new `std`::mt19937(`std`::random_device()());
        }
        return _distribution_(*_generator_);
      }
    }
  }

#else

  import namespace math {
    pure {
      double abs(double x);
      double sin(double x);
      double cos(double x);
      double tan(double x);
      double asin(double x);
      double acos(double x);
      double atan(double x);
      double atan2(double y, double x);
      double sqrt(double x);
      double exp(double x);
      double log(double x);
      double pow(double x, double y);
      double floor(double x);
      double round(double x);
      double ceil(double x);
      double min(double x, double y);
      double max(double x, double y);
      double random();
      bool isNaN(double x);
    }
  }

#endif

in math {
  const {
    var SQRT2 = 1.414213562373095;
    var PI = 3.141592653589793;
    var TWOPI = 2 * PI;
    var E = 2.718281828459045;
    var INFINITY = 1 / 0.0;
    var NAN = 0 / 0.0;
  }
}

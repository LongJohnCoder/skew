test("
int x = (in)1.5;
", "
<stdin>:1:10: error: Unexpected IN
int x = (in)1.5;
         ~~
<stdin>:1:13: error: Expected SEMICOLON but found DOUBLE
int x = (in)1.5;
            ~~~
");

test("
int x = .
", "
<stdin>:1:10: error: Expected IDENTIFIER but found END_OF_FILE
int x = .
         ^
");

test("
int x = .;
", "
<stdin>:1:10: error: Expected IDENTIFIER but found SEMICOLON
int x = .;
         ^
");

test("
enum Foo { FOO }
Foo x = Foo.;
", "
<stdin>:2:13: error: Expected IDENTIFIER but found SEMICOLON
Foo x = Foo.;
            ^
");

test("
enum Foo { FOO }
Foo x = .FOO;
bool y = (Foo).FOO;
", "
<stdin>:3:10: error: Cannot convert from type \"Foo\" to type \"bool\" without a cast
bool y = (Foo).FOO;
         ~~~~~~~~~
");

test("
for (int x, y in z) {}
", "
<stdin>:1:6: error: More than one variable inside a for-each loop
for (int x, y in z) {}
     ~~~~~~~~
<stdin>:1:18: error: \"z\" is not declared
for (int x, y in z) {}
                 ^
");

test("
if
", "
<stdin>:1:3: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
if
  ^
");

test("
while
", "
<stdin>:1:6: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
while
     ^
");

test("
for
", "
<stdin>:1:4: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
for
   ^
");

test("
do {} while
", "
<stdin>:1:12: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
do {} while
           ^
");

test("
do {} while;
do {} while;
", "
<stdin>:1:12: error: Expected LEFT_PARENTHESIS but found SEMICOLON
do {} while;
           ^
<stdin>:2:12: error: Expected LEFT_PARENTHESIS but found SEMICOLON
do {} while;
           ^
");

test("
for (int x in
", "
<stdin>:1:14: error: Unexpected END_OF_FILE
for (int x in
             ^
");

test("
for (int x in) {}
", "
<stdin>:1:14: error: Unexpected RIGHT_PARENTHESIS
for (int x in) {}
             ^
");

test("
else
", "
<stdin>:1:1: error: Unexpected ELSE
else
~~~~
");

test("
if () {}
", "
<stdin>:1:5: error: Unexpected RIGHT_PARENTHESIS
if () {}
    ^
");

test("
=>;
=> 0;
=> {};
=> { return; };

() =>;
() => 0;
() => {};
() => { return; };

x =>;
x => 0;
x => {};
x => { return; };

(x) =>;
(x) => 0;
(x) => {};
(x) => { return; };

(x, y) =>;
(x, y) => 0;
(x, y) => {};
(x, y) => { return; };
", "
");

test("
int fn(int, float) foo = null, bar = null;
", "
");

test("
int fn(int, float) fn(int fn(int, float), float fn(int, float)) foo = null, bar = null;
", "
");

test("
(int) fn(int, float) foo = null, bar = null;
", "
<stdin>:1:7: error: Unexpected FN
(int) fn(int, float) foo = null, bar = null;
      ~~
<stdin>:1:22: error: Expected SEMICOLON but found IDENTIFIER
(int) fn(int, float) foo = null, bar = null;
                     ~~~
");

test("
int fn(int x, float y) foo = null, bar = null;
", "
<stdin>:1:12: error: Expected COMMA but found IDENTIFIER
int fn(int x, float y) foo = null, bar = null;
           ^
");

test("
int. fn() foo = null, bar = null;
", "
<stdin>:1:6: error: Expected IDENTIFIER but found FN
int. fn() foo = null, bar = null;
     ~~
");

test("
100 fn() foo = null, bar = null;
", "
<stdin>:1:5: error: Unexpected FN
100 fn() foo = null, bar = null;
    ~~
<stdin>:1:10: error: Expected SEMICOLON but found IDENTIFIER
100 fn() foo = null, bar = null;
         ~~~
");

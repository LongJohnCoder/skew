test("
void();
", "
<stdin>:1:1: error: Cannot construct type \"void\"
void();
~~~~
");

test("
void fn()();
", "
<stdin>:1:1: error: Cannot construct type \"void fn()\"
void fn()();
~~~~~~~~~
");

test("
struct Foo {
  Foo(int x) {}
}
int foo = Foo();
", "
<stdin>:4:14: error: Expected 1 argument but found 0 arguments
int foo = Foo();
             ~~
<stdin>:4:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo();
          ~~~~~
");

test("
class Foo {
  Foo() {}
}
int foo = Foo(1);
", "
<stdin>:4:14: error: Expected 0 arguments but found 1 argument
int foo = Foo(1);
             ~~~
<stdin>:4:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo(1);
          ~~~~~~
");

test("
class Foo {}
int foo = Foo(1);
", "
<stdin>:2:14: error: Expected 0 arguments but found 1 argument
int foo = Foo(1);
             ~~~
<stdin>:2:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo(1);
          ~~~~~~
");

test("
int foo = { false };
", "
<stdin>:1:11: error: Cannot construct type \"int\"
int foo = { false };
          ~~~~~~~~~
");

test("
void fn() foo = { false };
", "
<stdin>:1:17: error: Cannot construct type \"void fn()\"
void fn() foo = { false };
                ~~~~~~~~~
");

test("
class Foo {
  Foo(int x) {}
}
Foo foo = { false };
", "
<stdin>:4:13: error: Cannot convert from type \"bool\" to type \"int\" without a cast
Foo foo = { false };
            ~~~~~
");

test("
class Foo {
  Foo(int x) {}
}
Foo foo = { 0, 1 };
", "
<stdin>:4:11: error: Expected 1 argument but found 2 arguments
Foo foo = { 0, 1 };
          ~~~~~~~~
");

test("
class Foo {
  Foo foo = false;
  Foo() {}
}
", "
<stdin>:2:13: error: Cannot convert from type \"bool\" to type \"Foo\"
  Foo foo = false;
            ~~~~~
");

test("
class Foo { Foo() {} }
class Bar : Foo {}
Bar.Foo foo;
", "
<stdin>:3:5: error: \"Foo\" is not declared on type \"Bar\"
Bar.Foo foo;
    ~~~
");

test("
class Foo { Foo() {} }
class Bar : Foo { int Foo() {} }
", "
<stdin>:2:13: error: Cannot access \"Foo\" from a static context
class Bar : Foo { int Foo() {} }
            ~~~
");

test("
class Foo { Foo() {} }
class Bar : Foo {}
class Baz : Bar { int Foo() {} }
", "
");

test("
class Foo : IFoo { bool foo; }
interface IFoo { int Foo(); }
Foo foo = { 1 };
", "
<stdin>:1:7: error: Cannot inherit \"IFoo.Foo\" because it conflicts with the constructor name
class Foo : IFoo { bool foo; }
      ~~~
<stdin>:3:13: error: Cannot convert from type \"int\" to type \"bool\" without a cast
Foo foo = { 1 };
            ^
");

test("
class Foo {
  Bar() {}
}
", "
<stdin>:2:3: error: Non-constructor function \"Bar\" must have a return type
  Bar() {}
  ~~~
");

test("
class Foo<T> : T {}
", "
<stdin>:1:16: error: Base type \"T\" must be an interface
class Foo<T> : T {}
               ^
");

test("
struct Foo : Bar {}
struct Bar {}
", "
<stdin>:1:14: error: A struct cannot inherit from another type
struct Foo : Bar {}
             ~~~
");

test("
interface IFoo {}
class Foo : IFoo, Bar {}
class Bar {}
", "
<stdin>:2:19: error: Base type \"Bar\" must come first in a class declaration
class Foo : IFoo, Bar {}
                  ~~~
");

test("
class Foo : Bar {}
class Bar {}
", "
");

test("
interface IFoo : IBar {}
interface IBar {}
", "
");

test("
interface IFoo : Bar {}
struct Bar {}
", "
<stdin>:1:18: error: Base type \"Bar\" must be an interface
interface IFoo : Bar {}
                 ~~~
");

test("
interface IFoo : Bar {}
class Bar {}
", "
<stdin>:1:18: error: Base type \"Bar\" must be an interface
interface IFoo : Bar {}
                 ~~~
");

test("
class Foo : IFoo, IFoo {}
interface IFoo {}
", "
<stdin>:1:19: error: Duplicate base type \"IFoo\"
class Foo : IFoo, IFoo {}
                  ~~~~
");

test("
class Foo {}
in Foo : Bar {}
class Bar {}
", "
<stdin>:2:10: error: Base type \"Bar\" must come first in a class declaration
in Foo : Bar {}
         ~~~
");

test("
class Foo {}
in Foo : IFoo {}
in Foo : IFoo {}
interface IFoo {}
", "
<stdin>:3:10: error: Duplicate base type \"IFoo\"
in Foo : IFoo {}
         ~~~~
");

test("
class Foo : IBar {}
class Bar : Foo, IBar {}
interface IFoo {}
interface IBar : IFoo {}
", "
");

test("
class Foo<T> {
  T foo = 0;
}
Foo.T foo = 0;
", "
<stdin>:2:11: error: Cannot convert from type \"int\" to type \"T\"
  T foo = 0;
          ^
<stdin>:4:5: error: \"T\" is not declared on type \"Foo\"
Foo.T foo = 0;
    ^
");

test("
class Foo : Bar {}
in Foo { class Bar {} }
", "
<stdin>:1:13: error: \"Bar\" is not declared
class Foo : Bar {}
            ~~~
");

test("
interface A { void foo(); }
interface B { void foo(); }
interface C : A, B {}
int foo(C foo) { return foo.foo(); }
", "
<stdin>:4:25: error: Cannot convert from type \"void\" to type \"int\"
int foo(C foo) { return foo.foo(); }
                        ~~~~~~~~~
");

test("
int foo(C foo) { foo.foo(); }
interface C : A, B {}
interface A { void foo(); }
interface B { int foo(); }
", "
<stdin>:2:11: error: Member \"C.foo\" has an ambiguous inherited type, could be type \"void fn()\" or type \"int fn()\"
interface C : A, B {}
          ^
");

test("
interface G : C, F {}
int foo(G foo) { foo.foo(); }

interface A { void foo(); }
interface B { int foo(); }
interface C : A, B {}

interface D { bool foo(); }
interface E { float foo(); }
interface F : E, D {}
", "
<stdin>:6:11: error: Member \"C.foo\" has an ambiguous inherited type, could be type \"void fn()\" or type \"int fn()\"
interface C : A, B {}
          ^
<stdin>:10:11: error: Member \"F.foo\" has an ambiguous inherited type, could be type \"float fn()\" or type \"bool fn()\"
interface F : E, D {}
          ^
");

test("
int foo(G foo) { foo.foo(); }
interface G : C, F {}

interface A { int foo(); }
interface B { int foo(); }
interface C : A, B {}

interface D { bool foo(); }
interface E { bool foo(); }
interface F : E, D {}
", "
<stdin>:2:11: error: Member \"G.foo\" has an ambiguous inherited type, could be type \"int fn()\" or type \"bool fn()\"
interface G : C, F {}
          ^
");

test("
interface Foo { bool foo(); }
interface Bar { int foo(); }
interface Baz : Foo, Bar {}
", "
<stdin>:3:11: error: Member \"Baz.foo\" has an ambiguous inherited type, could be type \"bool fn()\" or type \"int fn()\"
interface Baz : Foo, Bar {}
          ~~~
");

test("
interface Foo {}
in Foo { namespace foo {} }
interface Bar {}
in Bar { int foo(); }
interface Baz : Foo, Bar {}
", "
<stdin>:5:11: error: Member \"Baz.foo\" has an ambiguous inherited type, could be type \"Foo.foo\" or type \"int fn()\"
interface Baz : Foo, Bar {}
          ~~~
");

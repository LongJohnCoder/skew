import void registerTest(TestBase test);
import void expect(string output, string expected);

in string {
  import string trim();
}

export class TestBase {
  string input;
  string expected;
  var options = CompilerOptions();

  virtual void run();
}

class Test : TestBase {
  override void run() {
    options.inputs = [Source("<stdin>", input)];
    var compiler = Compiler();
    var result = compiler.compile(options);
    expect(compiler.log.toString(), expected);
  }
}

class TestJS : TestBase {
  override void run() {
    options.inputs = [Source("<stdin>", input)];
    options.targetFormat = .JAVASCRIPT;
    testHelper(options, expected);
  }
}

class TestMinifyJS : TestBase {
  override void run() {
    options.inputs = [Source("<stdin>", input)];
    options.targetFormat = .JAVASCRIPT;
    options.minify = true;
    options.mangle = true;
    options.foldAllConstants = true;
    options.inlineAllFunctions = true;
    options.globalizeAllFunctions = true;
    testHelper(options, expected);
  }
}

class TestCPP : TestBase {
  override void run() {
    options.inputs = [Source("<stdin>", input)];
    options.targetFormat = .CPP;
    testHelper(options, expected);
  }
}

void test(string input, string expected) {
  registerTest(Test(input.trim(), expected));
}

void testJS(string input, string expected) {
  registerTest(TestJS(input.trim(), expected));
}

void testCPP(string input, string expected) {
  registerTest(TestCPP(input.trim(), expected));
}

void testMinifyJS(string input, string expected) {
  registerTest(TestMinifyJS(input.trim(), expected));
}

void testHelper(CompilerOptions options, string expected) {
  var compiler = Compiler();
  var result = compiler.compile(options);
  if (result.outputs.size() > 0) {
    var output = "";
    for (var i = 0; i < result.outputs.size(); i++) {
      output += result.outputs.get(i).contents + "\n";
    }
    expect(output, expected);
  } else {
    expect(compiler.log.toString(), expected);
  }
}

export void start() {
  core.testAnnotations();
  core.testCalls();
  core.testConst();
  core.testConstructors();
  core.testConversions();
  core.testCyclic();
  core.testEnums();
  core.testExpressions();
  core.testFunctions();
  core.testGenerics();
  core.testLists();
  core.testMerging();
  core.testModifiers();
  core.testObjects();
  core.testParsing();
  core.testPreprocessor();
  core.testStatements();
  core.testStatic();
  core.testSwitch();
  core.testTypes();
  core.testUsing();
  core.testVar();

  js.testAnnotations();
  js.testExpressions();
  js.testFunctions();
  js.testInlining();
  js.testMinify();
  js.testObjects();
  js.testStatements();

  cpp.testAnnotations();
  cpp.testExpressions();
  cpp.testFunctions();
  cpp.testNeedsInclude();
  cpp.testObjects();
}

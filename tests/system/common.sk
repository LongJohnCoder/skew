import void registerTest(string input, void fn() callback);
import void expect(string output, string expected);

import in string {
  import string trim();
}

void test(string input, string expected) {
  input = input.trim();
  registerTest(input, => {
    var options = CompilerOptions();
    options.inputs = [Source("<stdin>", input)];
    var compiler = Compiler();
    var result = compiler.compile(options);
    expect(compiler.log.toString(), expected);
  });
}

void testJS(string input, string expected) {
  input = input.trim();
  registerTest(input, => {
    var options = CompilerOptions();
    options.inputs = [Source("<stdin>", input)];
    testHelperJS(options, expected);
  });
}

void testMinifyJS(string input, string expected) {
  input = input.trim();
  registerTest(input, => {
    var options = CompilerOptions();
    options.inputs = [Source("<stdin>", input)];
    options.jsMinify = true;
    options.jsMangle = true;
    options.foldAllConstants = true;
    options.inlineAllFunctions = true;
    options.convertAllInstanceToStatic = true;
    testHelperJS(options, expected);
  });
}

void testHelperJS(CompilerOptions options, string expected) {
  options.targetFormat = .JS;
  var compiler = Compiler();
  var result = compiler.compile(options);
  if (result.outputs.length > 0) {
    var output = "";
    for (var i = 0; i < result.outputs.length; i++) {
      output += result.outputs.get(i).contents + "\n";
    }
    expect(output, expected);
  } else {
    expect(compiler.log.toString(), expected);
  }
}

export void start() {
  core.testCalls();
  core.testConst();
  core.testConstructors();
  core.testConversions();
  core.testCyclic();
  core.testEnums();
  core.testFunctions();
  core.testGenerics();
  core.testLambdas();
  core.testLet();
  core.testLists();
  core.testMerging();
  core.testModifiers();
  core.testObjects();
  core.testParsing();
  core.testStatements();
  core.testStatic();
  core.testSwitch();
  core.testTypes();
  core.testUsing();
  core.testVar();

  js.testExpressions();
  js.testFunctions();
  js.testInlining();
  js.testMinify();
  js.testObjects();
  js.testStatements();
}

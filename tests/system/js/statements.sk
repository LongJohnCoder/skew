namespace js { void testStatements() {

testJS("
import int foo
", "
(function() {
}());
")

testJS("
int foo = 0
class Foo {}
class Bar : Foo {}
", "
(function() {
}());
")

testJS("
enum Foo { A, B, C }
export Foo foo() { return .A }
export Foo bar() { return .C }
", "
(function() {
  var Foo = {
    A: 0,
    C: 2
  };

  foo = function() {
    return Foo.A;
  };

  bar = function() {
    return Foo.C;
  };
}());
")

testJS("
export int foo(int x) {
  int y
  switch (x) {
    case 1 { y = 1 }
    case 2 { y = 2 }
  }
  return y
}
", "
(function() {
  foo = function(x) {
    var y = 0;

    switch (x) {
    case 1:
      y = 1;
      break;

    case 2:
      y = 2;
      break;
    }

    return y;
  };
}());
")

testJS("
interface IFoo {}
export class Foo<T is IFoo> {
  T foo() {
    T foo
    return foo
  }
}
", "
(function() {
  Foo = function() {
  };

  Foo.prototype.foo = function() {
    var foo = null;
    return foo;
  };
}());
")

testJS("
class Foo {
  var bar = 0
  void foo() { assert bar > 0 }
}
export void foo() {
  Foo().foo()
}
", "
(function() {
  function Foo() {
    this.bar = 0;
  }

  Foo.prototype.foo = function() {
    if (this.bar <= 0) {
      throw new Error('assert bar > 0 (<stdin>:3:16)');
    }
  };

  foo = function() {
    new Foo().foo();
  };
}());
")

testJS("
export class Foo {
  `var` foo
  dynamic bar
}
", "
(function() {
  Foo = function(_0, _1) {
    this.foo = _0;
    this.bar = _1;
  };
}());
")

testJS("
export enum Foo {
  FOO
}
export Bar foo() {
  return .FOO
}
alias Bar = Foo
", "
(function() {
  Foo = {
    FOO: 0
  };

  foo = function() {
    return Foo.FOO;
  };
}());
")

testJS("
pure int foo() {
  const var bar = 1
  return baz + bar
}
export var bar = foo()
const var baz = 0
", "
(function() {
  function foo() {
    var bar = 1;
    return 0 + bar | 0;
  }

  bar = foo();
  var baz = 0;
}());
")

testJS("
import void bar(int x)
export void foo() {
  try { throw Foo(1) }
  catch (Foo foo) { bar(foo.x) }
  catch { bar(2) }
  finally { bar(3) }
}
class Foo { int x }
", "
(function() {
  function Foo(_0) {
    this.x = _0;
  }

  foo = function() {
    try {
      throw new Foo(1);
    } catch ($exception) {
      if ($exception instanceof Foo) {
        bar($exception.x);
      } else {
        bar(2);
      }
    } finally {
      bar(3);
    }
  };
}());
")

testJS("
import void bar(dynamic x)
export void foo() {
  try { throw Foo() }
  catch (dynamic e) { bar(e.stack) }
}
class Foo {}
", "
(function() {
  function Foo() {
  }

  foo = function() {
    try {
      throw new Foo();
    } catch ($exception) {
      bar($exception.stack);
    }
  };
}());
")

}}

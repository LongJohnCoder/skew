namespace js { void testInlining() {

testJS("
inline int foo(int foo) {
  return foo;
}
export void test() {
  var bar = foo(foo(1));
}
", "
function test() {
  var bar = 1;
}
");

testJS("
inline int foo(int bar) {
  return bar > 0 ? foo(bar - 1) : 0;
}
export void test() {
  var bar = foo(foo(1));
}
", "
function foo(bar) {
  return bar > 0 ? foo(bar - 1 | 0) : 0;
}
function test() {
  var bar = foo(foo(1));
}
");

testJS("
import bool baz();
inline int foo(int bar) {
  return baz() ? foo(bar) : 0;
}
export void test() {
  var bar = foo(foo(1));
}
", "
function foo(bar) {
  return baz() ? foo(bar) : 0;
}
function test() {
  var bar = foo(foo(1));
}
");

testJS("
inline int foo(int x, int y) {
  return x + y;
}
export void test() {
  foo(1, 2);
}
", "
function test() {
  1 + 2 | 0;
}
");

testJS("
inline int foo(int x, int y) {
  return x += y;
}
export void test() {
  foo(1, 2);
}
", "
function foo(x, y) {
  return x = x + y | 0;
}
function test() {
  foo(1, 2);
}
");

testJS("
inline int fn() foo(int x) {
  return => x;
}
export void test() {
  var x = 0;
  var y = foo(x++);
  var z = foo(x++);
}
", "
function foo(x) {
  return function() {
    return x;
  };
}
function test() {
  var x = 0;
  var y = foo((x = x + 1 | 0) - 1 | 0);
  var z = foo((x = x + 1 | 0) - 1 | 0);
}
");

testJS("
class Foo {
  inline virtual void foo() {}
}
class Bar : Foo {
  inline override void foo() {}
}
export void test() {
  Bar().foo();
}
", "
function $extends(derived, base) {
  derived.prototype = Object.create(base.prototype);
  derived.prototype.constructor = derived;
}
function Foo() {
}
Foo.prototype.foo = function() {
};
function Bar() {
  Foo.call(this);
}
$extends(Bar, Foo);
Bar.prototype.foo = function() {
};
function test() {
  new Bar().foo();
}
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
inline int baz(int a) {
  return foo(2, a);
}
export int bar(int a) {
  return foo(1, baz(a));
}
", "
function bar(a) {
  return 1 + (2 + a | 0) | 0;
}
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
export int bar(int a) {
  return foo(1, baz(a));
}
inline int baz(int a) {
  return foo(2, a);
}
", "
function bar(a) {
  return 1 + (2 + a | 0) | 0;
}
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
export int bar(int a) {
  return foo(1, baz(baz(a)));
}
inline int baz(int a) {
  return foo(2, a);
}
", "
function bar(a) {
  return 1 + (2 + (2 + a | 0) | 0) | 0;
}
");

testJS("
inline int foo(int baz) {
  return bar(baz);
}
inline int bar(int baz) {
  return foo(baz);
}
export void test() {
  foo(bar(foo(bar(0))));
}
", "
function foo(baz) {
  return bar(baz);
}
function bar(baz) {
  return foo(baz);
}
function test() {
  foo(bar(foo(bar(0))));
}
");

testJS("
inline int foo(int baz) {
  return bar(foo(baz));
}
inline int bar(int baz) {
  return foo(bar(baz));
}
export void test() {
  foo(bar(foo(bar(0))));
}
", "
function foo(baz) {
  return bar(foo(baz));
}
function bar(baz) {
  return foo(bar(baz));
}
function test() {
  foo(bar(foo(bar(0))));
}
");

testJS("
inline int foo(int x) {
  return x + 1;
}
export int bar(int y) {
  return foo(baz(y));
}
inline int baz(int z) {
  return z + 2;
}
", "
function bar(y) {
  return (y + 2 | 0) + 1 | 0;
}
");

testJS("
inline int foo(int x) {
  return x + 1;
}
export int bar(int y) {
  return baz(foo(y));
}
inline int baz(int z) {
  return z + 2;
}
", "
function bar(y) {
  return (y + 1 | 0) + 2 | 0;
}
");

testJS("
inline void foo(int x) { bar(1, x); }
int bar(int x, int y) { return x + y; }
export void test() {
  foo(2);
}
", "
function bar(x, y) {
  return x + y | 0;
}
function test() {
  bar(1, 2);
}
");

testJS("
inline void foo() { x = 0; }
int x = 0;
export void test() {
  foo();
}
", "
function foo() {
  x = 0;
}
function test() {
  foo();
}
var x = 0;
");

testJS("
inline void foo() { bar(); }
inline void bar() { x = 0; }
int x = 0;
export void test() {
  foo();
}
", "
function bar() {
  x = 0;
}
function test() {
  bar();
}
var x = 0;
");

testJS("
inline void foo() { bar(); }
inline void bar() { baz(); }
inline void baz() { x = 0; }
int x = 0;
export void test() {
  foo();
}
", "
function baz() {
  x = 0;
}
function test() {
  baz();
}
var x = 0;
");

testJS("
import int foo();
inline int bar(int a, int b) { return a; }
export void test() {
  var baz = bar(1, foo());
}
", "
function test() {
  var baz = (foo(), 1);
}
");

testJS("
inline int foo() { return 2; }
inline int bar(int a, int b) { return a; }
export void test() {
  var baz = bar(1, foo());
}
", "
function test() {
  var baz = 1;
}
");

}}

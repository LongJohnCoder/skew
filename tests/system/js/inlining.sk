testJS("
inline int foo(int foo) {
  return foo;
}
var bar = foo(foo(1));
", "
var bar = 1;
");

testJS("
inline int foo(int bar) {
  return bar > 0 ? foo(bar - 1) : 0;
}
var bar = foo(foo(1));
", "
function foo(bar) {
  return bar > 0 ? foo(bar - 1 | 0) : 0;
}
var bar = foo(foo(1));
");

testJS("
inline int foo(int x, int y) {
  return x + y;
}
foo(1, 2);
", "
1 + 2 | 0;
");

testJS("
inline int foo(int x, int y) {
  return x += y;
}
foo(1, 2);
", "
function foo(x, y) {
  return x = x + y | 0;
}
foo(1, 2);
");

testJS("
inline int fn() foo(int x) {
  return => x;
}
var x = 0;
var y = foo(x++);
var z = foo(x++);
", "
function foo(x) {
  return function() {
    return x;
  };
}
var x = 0;
var y = foo((x = x + 1 | 0) - 1 | 0);
var z = foo((x = x + 1 | 0) - 1 | 0);
");

testJS("
class Foo {
  inline virtual void foo() {}
}
class Bar : Foo {
  inline override void foo() {}
}
Bar().foo();
", "
function $extends(derived, base) {
  derived.prototype = Object.create(base.prototype);
  derived.prototype.constructor = derived;
}
function Foo() {
}
Foo.prototype.foo = function() {
};
function Bar() {
  Foo.call(this);
}
$extends(Bar, Foo);
Bar.prototype.foo = function() {
};
new Bar().foo();
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
inline int baz(int a) {
  return foo(2, a);
}
int bar(int a) {
  return foo(1, baz(a));
}
", "
function bar(a) {
  return 1 + (2 + a | 0) | 0;
}
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
int bar(int a) {
  return foo(1, baz(a));
}
inline int baz(int a) {
  return foo(2, a);
}
", "
function bar(a) {
  return 1 + (2 + a | 0) | 0;
}
");

testJS("
inline int foo(int a, int b) {
  return a + b;
}
int bar(int a) {
  return foo(1, baz(baz(a)));
}
inline int baz(int a) {
  return foo(2, a);
}
", "
function bar(a) {
  return 1 + (2 + (2 + a | 0) | 0) | 0;
}
");

testJS("
inline int foo(int baz) {
  return bar(baz);
}
inline int bar(int baz) {
  return foo(baz);
}
foo(bar(foo(bar(0))));
", "
function foo(baz) {
  return bar(foo(baz));
}
function bar(baz) {
  return foo(bar(baz));
}
foo(bar(foo(bar(0))));
");

testJS("
inline int foo(int baz) {
  return bar(foo(baz));
}
inline int bar(int baz) {
  return foo(bar(baz));
}
foo(bar(foo(bar(0))));
", "
function foo(baz) {
  return bar(foo(baz));
}
function bar(baz) {
  return foo(bar(baz));
}
foo(bar(foo(bar(0))));
");

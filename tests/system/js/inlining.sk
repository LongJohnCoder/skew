testJS("
inline int foo(int foo) {
  return foo;
}
var z = foo(foo(1));
", "
var z = 1;
");

testJS("
inline int foo(int x, int y) {
  return x + y;
}
foo(1, 2);
", "
1 + 2 | 0;
");

testJS("
inline int foo(int x, int y) {
  return x += y;
}
foo(1, 2);
", "
function foo(x, y) {
  return x = x + y | 0;
}
foo(1, 2);
");

testJS("
inline int fn() foo(int x) {
  return => x;
}
var x = 0;
var y = foo(x++);
var z = foo(x++);
", "
function foo(x) {
  return function() {
    return x;
  };
}
var x = 0;
var y = foo((x = x + 1 | 0) - 1 | 0);
var z = foo((x = x + 1 | 0) - 1 | 0);
");

testJS("
class Foo {
  inline virtual void foo() {}
}
class Bar : Foo {
  inline override void foo() {}
}
Bar().foo();
", "
function $extends(derived, base) {
  derived.prototype = Object.create(base.prototype);
  derived.prototype.constructor = derived;
}
function Foo() {
}
Foo.prototype.foo = function() {
};
function Bar() {
  Foo.call(this);
}
$extends(Bar, Foo);
Bar.prototype.foo = function() {
};
new Bar().foo();
");

namespace js { void minify() {

testMinify("
export int foo() {
  return untyped(0) in 1;
}
", "
function foo(){return 0 in 1}
");

testMinify("
export int foo(int foo) {
  return foo + +1;
}
", "
function foo(foo){return foo+1|0}
");

testMinify("
export int foo(int foo) {
  return foo - -1;
}
", "
function foo(foo){return foo- -1|0}
");

testMinify("
export int foo(void fn() foo) {
  foo();
  return 1;
}
", "
function foo(foo){return foo(),1}
");

testMinify("
export int foo(void fn() foo) {
  foo();
  foo();
  return 1;
}
", "
function foo(foo){return foo(),foo(),1}
");

testMinify("
export int foo(int foo) {
  if (foo < 0) return -1;
  else if (foo > 0) return 1;
  else return 1;
}
", "
function foo(foo){return foo<0?-1:foo>0?1:1}
");

testMinify("
export int foo(int foo) {
  if (foo < 0) return -1;
  if (foo > 0) return 1;
  return 1;
}
", "
function foo(foo){return foo<0?-1:foo>0?1:1}
");

testMinify("
export int foo(int x, void fn() y) {
  if (x < 0) {
    y();
    return 1;
  }
  return 2;
}
", "
function foo(x,y){return x<0?(y(),1):2}
");

testMinify("
export int foo() {
  int foo;
  int bar;
  return foo + bar;
}
", "
function foo(){var foo=0,bar=0;return foo+bar|0}
");

testMinify("
const bool bar = false;
export int foo(int y) {
  if (y < 0) {
    return -y;
  } else if (bar) {
    return 100;
  }
  return y;
}
", "
function foo(y){return y<0?-y:y}
");

testMinify("
export int foo(int y) {
  if (y > 0) y++;
  else if (y < 0) y += 2;
  else y--;
  return y;
}
", "
function foo(y){return y=(y>0?y+1:y<0?y+2:y-1)|0,y}
");

testMinify("
export int foo(int x, int y) {
  if (x < 0) {
    x++;
    y--;
  } else if (y < 0) {
    x -= y;
  } else {
    x--;
    y++;
  }
  return y;
}
", "
function foo(x,y){return x<0?(x=x+1|0,y=y-1|0):y<0?x=x-y|0:(x=x-1|0,y=y+1|0),y}
");

testMinify("
export bool foo(int x, int y) {
  var bar = x == 0 && y != 0;
  if (x == 0 && y != 0) return true;
  else return bar;
}
", "
function foo(x,y){var bar=x===0&&y!==0;return !x&&y?!0:bar}
");

testMinify("
export bool foo(float x, double y) {
  var bar = x == 0 && y != 0;
  if (x == 0 && y != 0) return true;
  else return bar;
}
", "
function foo(x,y){var bar=x===0&&y!==0;return x===0&&y!==0?!0:bar}
");

testMinify("
export bool foo(void fn() fn() x) {
  var bar = x != null && x() == null;
  if (x != null && x() == null) return true;
  else return bar;
}
", "
function foo(x){var bar=x!==null&&x()===null;return x&&!x()?!0:bar}
");

testMinify("
export bool foo(string x) {
  var bar = x == \"\" || x.slice(1, 2) == \"\";
  if (x == \"\" || x.slice(1, 2) == \"\") return true;
  else return bar;
}
", "
function foo(x){var bar=x===\"\"||x.slice(1,2)===\"\";return !x||!x.slice(1,2)?!0:bar}
");

testMinify("
export void foo(bool fn() foo, void fn() bar) {
  if (foo()) {
    bar();
    if (foo()) {
      bar();
      if (foo()) bar();
    }
  }
}
", "
function foo(foo,bar){foo()&&(bar(),foo()&&(bar(),foo()&&bar()))}
");

testMinify("
export int foo(int a, int b) {
  return a != b ? 1 : 2;
}
", "
function foo(a,b){return a^b?1:2}
");

testMinify("
export void foo(bool a, void fn() b) {
  if (!a) b();
}
", "
function foo(a,b){!a&&b()}
");

testMinify("
export int foo(bool a, void fn() b) {
  if (!a) {
    b();
    return 1;
  } else {
    return 2;
  }
}
", "
function foo(a,b){return a?2:(b(),1)}
");

testMinify("
export int foo(bool a) {
  return !a ? 1 : 2;
}
", "
function foo(a){return a?2:1}
");

testMinify("
enum Foo {}
export void foo(Foo a, Foo b, void fn() c, void fn() d) {
  if (a == b) c();
  else d();
}
", "
function foo(a,b,c,d){a^b?d():c()}
");

testMinify("
export int foo(int x) {
  int y;
  switch (x) {
    case 1 { y = 1; }
    case 2 { y = 2; }
  }
  return y;
}
", "
function foo(x){var y=0;switch(x){case 1:y=1;break;case 2:y=2}return y}
");

}}

namespace js { void testMinify() {

testMinifyJS("
export void foo() {
  do {} while (true);
}
", "
(function(){foo=function(){do;while(!0)}}());
");

testMinifyJS("
export void foo(void fn() x) {
  do { x(); } while (true);
}
", "
(function(){foo=function(a){do a();while(!0)}}());
");

testMinifyJS("
export void foo(void fn() x) {
  do { x(); break; } while (true);
}
", "
(function(){foo=function(a){do{a();break}while(!0)}}());
");

testMinifyJS("
class Foo {
  int foo;
}
class Bar {
  int bar;
}
export int foo() {
  return Foo(100).foo + Bar(200).bar;
}
", "
(function(){function b(a){this.a=a}function c(a){this.a=a}foo=function(){return new b(100).a+new c(200).a|0}}());
");

testMinifyJS("
class Foo {
  int foo;
}
class Bar : Foo {
  int bar;
}
export int foo() {
  return Foo(100).foo + Bar(200, 300).foo;
}
", "
(function(){function $extends(d,b){d.prototype=Object.create(b.prototype);d.prototype.constructor=d}function c(a){this.a=a}function d(a,b){c.call(this,a),this.b=b}$extends(d,c);foo=function(){return new c(100).a+new d(200,300).a|0}}());
");

testMinifyJS("
import int a();
export int foo(int x) {
  return a() + x;
}
", "
(function(){foo=function(b){return a()+b|0}}());
");

testMinifyJS("
import namespace a {
  import int b();
}
export int foo(int b) {
  return a.b() + b;
}
", "
(function(){foo=function(b){return a.b()+b|0}}());
");

testMinifyJS("
export void foo(int foo) { int bar, baz; }
export void bar(int foo, int bar) { int baz; }
export void baz(int foo, int bar, int baz) {}
", "
(function(){foo=function(a){var b=0,c=0;};bar=function(a,b){var c=0;};baz=function(a,b,c){}}());
");

testMinifyJS("
export int foo() {
  return untyped(0) in 1;
}
", "
(function(){foo=function(){return 0 in 1}}());
");

testMinifyJS("
export int foo(int foo) {
  return foo + +1;
}
", "
(function(){foo=function(a){return a+1|0}}());
");

testMinifyJS("
export int foo(int foo) {
  return foo - -1;
}
", "
(function(){foo=function(a){return a- -1|0}}());
");

testMinifyJS("
export int foo(void fn() foo) {
  foo();
  return 1;
}
", "
(function(){foo=function(a){return a(),1}}());
");

testMinifyJS("
export int foo(void fn() foo) {
  foo();
  foo();
  return 1;
}
", "
(function(){foo=function(a){return a(),a(),1}}());
");

testMinifyJS("
export int foo(int foo) {
  if (foo < 0) return -1;
  else if (foo > 0) return 1;
  else return 1;
}
", "
(function(){foo=function(a){return a<0?-1:a>0?1:1}}());
");

testMinifyJS("
export int foo(int foo) {
  if (foo < 0) return -1;
  if (foo > 0) return 1;
  return 1;
}
", "
(function(){foo=function(a){return a<0?-1:a>0?1:1}}());
");

testMinifyJS("
export int foo(int x, void fn() y) {
  if (x < 0) {
    y();
    return 1;
  }
  return 2;
}
", "
(function(){foo=function(a,b){return a<0?(b(),1):2}}());
");

testMinifyJS("
export int foo() {
  int foo;
  int bar;
  return foo + bar;
}
", "
(function(){foo=function(){var a=0,b=0;return a+b|0}}());
");

testMinifyJS("
const bool bar = false;
export int foo(int y) {
  if (y < 0) {
    return -y;
  } else if (bar) {
    return 100;
  }
  return y;
}
", "
(function(){foo=function(a){return a<0?-a:a}}());
");

testMinifyJS("
export int foo(int y) {
  if (y > 0) y++;
  else if (y < 0) y += 2;
  else y--;
  return y;
}
", "
(function(){foo=function(a){return a=(a>0?a+1:a<0?a+2:a-1)|0,a}}());
");

testMinifyJS("
export int foo(int x, int y) {
  if (x < 0) {
    x++;
    y--;
  } else if (y < 0) {
    x -= y;
  } else {
    x--;
    y++;
  }
  return y;
}
", "
(function(){foo=function(a,b){return a<0?(a=a+1|0,b=b-1|0):b<0?a=a-b|0:(a=a-1|0,b=b+1|0),b}}());
");

testMinifyJS("
export bool foo(int x, int y) {
  var bar = x == 0 && y != 0;
  if (x == 0 && y != 0) return true;
  else return bar;
}
", "
(function(){foo=function(a,b){var c=a===0&&b!==0;return !a&&b?!0:c}}());
");

testMinifyJS("
export bool foo(float x, double y) {
  var bar = x == 0 && y != 0;
  if (x == 0 && y != 0) return true;
  else return bar;
}
", "
(function(){foo=function(a,b){var c=a===0&&b!==0;return a===0&&b!==0?!0:c}}());
");

testMinifyJS("
export bool foo(void fn() fn() x) {
  var bar = x != null && x() == null;
  if (x != null && x() == null) return true;
  else return bar;
}
", "
(function(){foo=function(a){var b=a!==null&&a()===null;return a&&!a()?!0:b}}());
");

testMinifyJS("
export bool foo(string x) {
  var bar = x == \"\" || x.slice(1, 2) == \"\";
  if (x == \"\" || x.slice(1, 2) == \"\") return true;
  else return bar;
}
", "
(function(){foo=function(a){var b=a===''||a.slice(1,2)==='';return !a||!a.slice(1,2)?!0:b}}());
");

testMinifyJS("
export void foo(bool fn() foo, void fn() bar) {
  if (foo()) {
    bar();
    if (foo()) {
      bar();
      if (foo()) bar();
    }
  }
}
", "
(function(){foo=function(a,b){a()&&(b(),a()&&(b(),a()&&b()))}}());
");

testMinifyJS("
export int foo(int a, int b) {
  return a != b ? 1 : 2;
}
", "
(function(){foo=function(a,b){return a^b?1:2}}());
");

testMinifyJS("
export void foo(bool a, void fn() b) {
  if (a) b();
}
", "
(function(){foo=function(a,b){a&&b()}}());
");

testMinifyJS("
export void foo(bool a, void fn() b) {
  if (!a) b();
}
", "
(function(){foo=function(a,b){a||b()}}());
");

testMinifyJS("
export int foo(bool a, void fn() b) {
  if (!a) {
    b();
    return 1;
  } else {
    return 2;
  }
}
", "
(function(){foo=function(a,b){return a?2:(b(),1)}}());
");

testMinifyJS("
export int foo(bool a) {
  return !a ? 1 : 2;
}
", "
(function(){foo=function(a){return a?2:1}}());
");

testMinifyJS("
export void foo(Foo a, Foo b, void fn() c, void fn() d) {
  if (a == b) c();
  else d();
}
enum Foo {}
", "
(function(){foo=function(a,b,c,d){a^b?d():c()}}());
");

testMinifyJS("
export int foo(int x) {
  int y;
  switch (x) {
    case 1 { y = 1; }
    case 2 { y = 2; }
  }
  return y;
}
", "
(function(){foo=function(b){var a=0;switch(b){case 1:a=1;break;case 2:a=2}return a}}());
");

testMinifyJS("
export bool foo(int a) {
  return a >= 5 && a <= 8;
}
export bool bar(int a) {
  return 5 <= a && 8 >= a;
}
", "
(function(){foo=function(a){return a>4&&a<9};bar=function(a){return 4<a&&9>a}}());
");

testMinifyJS("
export void foo(bool x, void fn() y) {
  if (x) {
    y();
    return;
  }
}
", "
(function(){foo=function(a,b){a&&b()}}());
");

testMinifyJS("
export void foo(bool x, void fn() y) {
  if (x) return;
  y();
  y();
}
", "
(function(){foo=function(b,a){b||(a(),a())}}());
");

testMinifyJS("
export void foo(bool x, void fn() y) {
  if (x) return;
  y();
  if (x) return;
  y();
}
", "
(function(){foo=function(a,b){a||(b(),a||b())}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  if (x) {
    if (y) return;
    z();
    z();
  }
}
", "
(function(){foo=function(b,c,a){b&&(c||(a(),a()))}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  if (x) {
    if (y) return;
    z();
    z();
  }
  z();
}
", "
(function(){foo=function(b,c,a){if(b){if(c)return;a(),a()}a()}}());
");

testMinifyJS("
export void foo(bool x, void fn() y) {
  if (x) {
    y();
    return;
  }
  y();
  y();
}
", "
(function(){foo=function(b,a){b?a():(a(),a())}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) {
      z();
      continue;
    }
  }
}
", "
(function(){foo=function(a,b,c){while(a)b&&c()}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) return;
    z();
    z();
  }
}
", "
(function(){foo=function(b,c,a){while(b){if(c)return;a(),a()}}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) continue;
    z();
    z();
  }
}
", "
(function(){foo=function(b,c,a){while(b)c||(a(),a())}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) continue;
    z();
    if (y) continue;
    z();
  }
}
", "
(function(){foo=function(c,a,b){while(c)a||(b(),a||b())}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) {
      z();
      if (y) continue;
      z();
      z();
    }
  }
}
", "
(function(){foo=function(c,b,a){while(c)b&&(a(),b||(a(),a()))}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) {
      z();
      if (y) continue;
      z();
      z();
    }
    z();
  }
}
", "
(function(){foo=function(c,b,a){while(c){if(b){a();if(b)continue;a(),a()}a()}}}());
");

testMinifyJS("
export void foo(bool x, bool y, void fn() z) {
  while (x) {
    if (y) {
      z();
      continue;
    }
    z();
    z();
  }
}
", "
(function(){foo=function(b,c,a){while(b)c?a():(a(),a())}}());
");

}}

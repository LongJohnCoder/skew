namespace js { void testFunctions() {

testJS("
class Foo {
  void foo() {}
}
export void test() {
  Foo().foo()
}
", "
(function() {
  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  test = function() {
    new Foo().foo();
  };
}());
")

testJS("
export class Foo {
  Foo foo
  void bar() {
    foo.bar()
  }
}
", "
(function() {
  Foo = function(_0) {
    this.foo = _0;
  };

  Foo.prototype.bar = function() {
    this.foo.bar();
  };
}());
")

testJS("
void foo(int foo) {}
export void test() {
  foo((1, 2))
}
", "
(function() {
  function foo(foo) {
  }

  test = function() {
    foo((1, 2));
  };
}());
")

testJS("
enum Foo { A, B, C }
in Foo {
  int foo() {
    return this
  }
}
export void test() {
  Foo.A.foo()
}
", "
(function() {
  var Foo = {
    A: 0
  };

  var in_Foo = {};

  in_Foo.foo = function($this) {
    return $this;
  };

  test = function() {
    in_Foo.foo(Foo.A);
  };
}());
")

testJS("
export enum Foo { FOO }
in Foo {
  export string foo() { return toString() }
}
", "
(function() {
  Foo = {
    FOO: 0
  };

  var in_Foo = {};

  in_Foo.foo = function($this) {
    return in_Foo._toString_[$this];
  };

  in_Foo._toString_ = ['FOO'];
}());
")

testJS("
import class Foo {
  new()
}
in Foo {
  void foo() {}
}
export void test() {
  Foo().foo()
}
", "
(function() {
  var in_Foo = {};

  in_Foo.foo = function($this) {
  };

  test = function() {
    in_Foo.foo(new Foo());
  };
}());
")

testJS("
class Foo {
  virtual int foo(int bar) { return bar }
}
class Bar : Foo {
  override int foo(int bar) { return super(bar) }
}
export void test() {
  Bar().foo(1)
}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Foo() {
  }

  Foo.prototype.foo = function(bar) {
    return bar;
  };

  function Bar() {
    Foo.call(this);
  }

  $extends(Bar, Foo);

  Bar.prototype.foo = function(bar) {
    return Foo.prototype.foo.call(this, bar);
  };

  test = function() {
    new Bar().foo(1);
  };
}());
")

testJS("
class Foo {
  virtual void foo() {}
}
class Bar : Foo {
  override void foo() {}
}
class Baz : Foo {
  override void foo() {}
}
export void test() {
  Bar().foo()
}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Foo() {
  }

  function Bar() {
    Foo.call(this);
  }

  $extends(Bar, Foo);

  Bar.prototype.foo = function() {
  };

  test = function() {
    new Bar().foo();
  };
}());
")

testJS("
interface IFoo {
  virtual void foo()
}
class Bar : IFoo {
  override void foo() {}
}
class Baz : IFoo {
  override void foo() {}
}
export void test() {
  ((IFoo)Bar()).foo()
}
", "
(function() {
  function Bar() {
  }

  Bar.prototype.foo = function() {
  };

  test = function() {
    new Bar().foo();
  };
}());
")

testJS("
interface IFoo {
  virtual void foo()
}
interface IBar {
  virtual void bar()
}
class Foo : IFoo {
  override void foo() {}
}
class Foo2 : IFoo {
  override void foo() {}
}
class Bar : IBar {
  IFoo foo
  override void bar() {
    foo.foo()
  }
}
class Bar2 : IBar {
  override void bar() {}
}
export void foo() {
  bar(Bar(Foo()))
}
void bar(IBar bar) {
  bar.bar()
}
", "
(function() {
  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  function Bar(_0) {
    this.foo = _0;
  }

  Bar.prototype.bar = function() {
    this.foo.foo();
  };

  foo = function() {
    bar(new Bar(new Foo()));
  };

  function bar(bar) {
    bar.bar();
  }
}());
")

testJS("
interface IFoo {
  virtual void foo()
}
interface IBar {
  virtual void bar()
}
class Bar : IBar {
  IFoo foo
  override void bar() {
    foo.foo()
  }
}
class Bar2 : IBar {
  override void bar() {}
}
class Foo : IFoo {
  override void foo() {}
}
class Foo2 : IFoo {
  override void foo() {}
}
export void foo() {
  bar(Bar(Foo()))
}
void bar(IBar bar) {
  bar.bar()
}
", "
(function() {
  function Bar(_0) {
    this.foo = _0;
  }

  Bar.prototype.bar = function() {
    this.foo.foo();
  };

  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  foo = function() {
    bar(new Bar(new Foo()));
  };

  function bar(bar) {
    bar.bar();
  }
}());
")

testJS("
import interface IFoo {
  virtual void foo()
}
class Foo : IFoo {
  override void foo() {}
}
export IFoo foo() {
  return Foo()
}
", "
(function() {
  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  foo = function() {
    return new Foo();
  };
}());
")

testJS("
import interface IFoo {
  virtual void foo()
}
class Foo : IFoo {
  override void foo() {}
}
export void foo() {
  bar(Foo())
}
import void bar(IFoo foo)
", "
(function() {
  function Foo() {
  }

  Foo.prototype.foo = function() {
  };

  foo = function() {
    bar(new Foo());
  };
}());
")

testJS("
in Foo {
  void foo() {}
  static void bar() {}
  static int baz
}
export void foo() {
  Bar().foo()
  Bar.bar()
  Bar.baz
}
class Bar : Foo {}
interface Foo {}
", "
(function() {
  function Bar() {
  }

  var in_Foo = {};

  in_Foo.foo = function($this) {
  };

  in_Foo.bar = function() {
  };

  foo = function() {
    in_Foo.foo(new Bar());
    in_Foo.bar();
    in_Foo.baz;
  };

  in_Foo.baz = 0;
}());
")

testJS("
import class Foo {}
in Foo {
  new() { return `100` }
}
export Foo bar() {
  return Foo()
}
", "
(function() {
  var in_Foo = {};

  in_Foo.$new = function() {
    return 100;
  };

  bar = function() {
    return in_Foo.$new();
  };
}());
")

}}

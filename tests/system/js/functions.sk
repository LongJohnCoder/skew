testJS("
class Foo {
  void foo() {}
}
Foo().foo();
", "
function Foo() {
}
Foo.prototype.foo = function() {
};
new Foo().foo();
");

testJS("
class Foo {
  Foo foo;
  export void bar() {
    foo.bar();
  }
}
", "
function Foo(_0) {
  this.foo = _0;
}
Foo.prototype.bar = function() {
  this.foo.bar();
};
");

testJS("
(void fn())(=>);
", "
(function() {
});
");

testJS("
((void fn())=>)();
", "
(function() {
})();
");

testJS("
void fn() foo = =>;
", "
var foo = function() {
};
");

testJS("
void foo(int foo) {}
foo((1, 2));
", "
function foo(foo) {
}
foo((1, 2));
");

testJS("
enum Foo { A, B, C }
in Foo {
  int foo() {
    return this;
  }
}
Foo.A.foo();
", "
var $in = {};
$in.Foo = {};
var Foo = {
  A: 0,
  B: 1,
  C: 2
};
$in.Foo.foo = function($this) {
  return $this;
};
$in.Foo.foo(Foo.A);
");

testJS("
enum Foo { FOO }
in Foo {
  export string foo() { return toString(); }
}
", "
var $in = {};
$in.Foo = {};
var Foo = {
  FOO: 0
};
$in.Foo.foo = function($this) {
  return $in.Foo.toString($this);
};
$in.Foo.toString = function($this) {
  switch ($this) {
  case 0:
    return \"FOO\";
  default:
    return \"\";
  }
};
");

namespace js { void testFunctions() {

testJS("
class Foo {
  void foo() {}
}
export void test() {
  Foo().foo();
}
", "
(function() {
  function Foo() {
  }
  Foo.prototype.foo = function() {
  };
  test = function() {
    new Foo().foo();
  };
}());
");

testJS("
export class Foo {
  Foo foo;
  export void bar() {
    foo.bar();
  }
}
", "
(function() {
  Foo = function(_0) {
    this.foo = _0;
  };
  Foo.prototype.bar = function() {
    this.foo.bar();
  };
}());
");

testJS("
export void test() {
  (void fn())(=>);
}
", "
(function() {
  test = function() {
    (function() {
    });
  };
}());
");

testJS("
export void test() {
  ((void fn())=>)();
}
", "
(function() {
  test = function() {
    (function() {
    })();
  };
}());
");

testJS("
export void fn() foo = =>;
", "
(function() {
  foo = function() {
  };
}());
");

testJS("
void foo(int foo) {}
export void test() {
  foo((1, 2));
}
", "
(function() {
  function foo(foo) {
  }
  test = function() {
    foo((1, 2));
  };
}());
");

testJS("
enum Foo { A, B, C }
in Foo {
  int foo() {
    return this;
  }
}
export void test() {
  Foo.A.foo();
}
", "
(function() {
  var $in = {};
  $in.Foo = {};
  var Foo = {
    A: 0
  };
  $in.Foo.foo = function($this) {
    return $this;
  };
  test = function() {
    $in.Foo.foo(Foo.A);
  };
}());
");

testJS("
export enum Foo { FOO }
export in Foo {
  export string foo() { return toString(); }
}
", "
(function() {
  var $in = {};
  $in.Foo = {};
  Foo = {
    FOO: 0
  };
  $in.Foo.foo = function($this) {
    return $in.Foo.toString($this);
  };
  $in.Foo.toString = function($this) {
    switch ($this) {
    case 0:
      return 'FOO';
    default:
      return '';
    }
  };
}());
");

testJS("
import class Foo {
  import new();
  void foo() {}
}
export void test() {
  Foo().foo();
}
", "
(function() {
  var $in = {};
  $in.Foo = {};
  $in.Foo.foo = function() {
  };
  test = function() {
    new Foo(), $in.Foo.foo();
  };
}());
");

testJS("
class Foo {
  virtual int foo(int bar) { return bar; }
}
class Bar : Foo {
  override int foo(int bar) { return super(bar); }
}
export void test() {
  Bar().foo(1);
}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }
  function Foo() {
  }
  Foo.prototype.foo = function(bar) {
    return bar;
  };
  function Bar() {
    Foo.call(this);
  }
  $extends(Bar, Foo);
  Bar.prototype.foo = function(bar) {
    return Foo.prototype.foo.call(this, bar);
  };
  test = function() {
    new Bar().foo(1);
  };
}());
");

}}

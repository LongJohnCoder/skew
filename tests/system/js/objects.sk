namespace js { void testObjects() {

testJS("
in Foo {}
export class Foo {}
", "
(function() {
  Foo = function() {
  };
}());
")

testJS("
export class Foo {}
in Foo {}
", "
(function() {
  Foo = function() {
  };
}());
")

testJS("
export class Foo : Bar {}
class Bar {}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Bar() {
  }

  Foo = function() {
    Bar.call(this);
  };

  $extends(Foo, Bar);
}());
")

testJS("
export class Foo : Bar {}
class Bar { int x; }
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Bar(_0) {
    this.x = _0;
  }

  Foo = function(_0) {
    Bar.call(this, _0);
  };

  $extends(Foo, Bar);
}());
")

testJS("
export class Foo : Bar { int y; }
class Bar {}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Bar() {
  }

  Foo = function(_0) {
    Bar.call(this);
    this.y = _0;
  };

  $extends(Foo, Bar);
}());
")

testJS("
export class Foo : Bar { int y; }
class Bar { int x; }
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Bar(_0) {
    this.x = _0;
  }

  Foo = function(_0, _1) {
    Bar.call(this, _0);
    this.y = _1;
  };

  $extends(Foo, Bar);
}());
")

testJS("
namespace ns {
  interface IFoo {}
  export class Foo : IFoo {}
  export enum Bar { A, B, C }
}
", "
(function() {
  var ns = {};

  ns.Foo = function() {
  };

  ns.Bar = {
    A: 0,
    B: 1,
    C: 2
  };
}());
")

testJS("
import namespace ns {
  import interface IFoo {}
  import class Foo : IFoo {}
  import enum Bar { A, B, C }
}
", "
(function() {
}());
")

testJS("
export class Foo {
  void foo() {}
}
export class Bar : Foo {}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  Foo = function() {
  };

  Foo.prototype.foo = function() {
  };

  Bar = function() {
    Foo.call(this);
  };

  $extends(Bar, Foo);
}());
")

testJS("
class Foo {}
export class Bar : Foo {
  void foo() {}
}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  function Foo() {
  }

  Bar = function() {
    Foo.call(this);
  };

  $extends(Bar, Foo);

  Bar.prototype.foo = function() {
  };
}());
")

testJS("
export class Foo {
  int foo;
  new() {}
}
", "
(function() {
  Foo = function() {
    this.foo = 0;
  };
}());
")

testJS("
import class Foo : Bar {
  new();
}
import class Bar {
  new();
}
export void test() {
  var foo = Foo();
}
", "
(function() {
  test = function() {
    var foo = new Foo();
  };
}());
")

testJS("
namespace x {
  export class c : y.b {}
  export class a {}
}
namespace y {
  export class b : x.a {}
}
", "
(function() {
  function $extends(derived, base) {
    derived.prototype = Object.create(base.prototype);
    derived.prototype.constructor = derived;
  }

  var x = {};

  x.a = function() {
  };

  var y = {};

  y.b = function() {
    x.a.call(this);
  };

  $extends(y.b, x.a);

  x.c = function() {
    y.b.call(this);
  };

  $extends(x.c, y.b);
}());
")

}}

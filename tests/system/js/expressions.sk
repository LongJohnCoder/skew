namespace js { void testExpressions() {

testJS("
export bool foo(int a, int b, int c, int d) {
  return (a == b) == (c == d)
}
", "
(function() {
  foo = function(a, b, c, d) {
    return a === b === (c === d);
  };
}());
")

testJS("
export var x = [
  0b1100100,
  0100,
  0o144,
  0x64,
  0xabc,
  0xABC,
]
", "
(function() {
  x = [100, 100, 100, 100, 2748, 2748];
}());
")

testJS("
export var foo = \"'\"
export var bar = \"\\\"\"
", "
(function() {
  foo = \"'\";
  bar = '\"';
}());
")

testJS("
export void test() {
  double x = 0
  - -1
  + +1
  - +1
  + -1
}
", "
(function() {
  test = function() {
    var x = 0;
    - -1 | 0;
    +1 | 0;
    -1 | 0;
    +-1 | 0;
  };
}());
")

testJS("
export void test() {
  -0x80000000
  - -0x80000000
}
", "
(function() {
  test = function() {
    -2147483648;
    - -2147483648 | 0;
  };
}());
")

testJS("
export void test() {
  double x = 0
  (1.0 - 2.0) - 3.0
  (1.0 / 2.0) * 3.0
  1.0 - (2.0 - 3.0)
  1.0 / (2.0 * 3.0)
}
", "
(function() {
  test = function() {
    var x = 0;
    1 - 2 - 3;
    1 / 2 * 3;
    1 - (2 - 3);
    1 / (2 * 3);
  };
}());
")

testJS("
export void test() {
  (bool)1
  (int)false
  (float)false
}
", "
(function() {
  test = function() {
    !!1;
    false | 0;
    +false;
  };
}());
")

testJS("
export void test() {
  assert (bool)1
}
", "
(function() {
  test = function() {
    if (!1) {
      throw new Error('assert (bool)1 (<stdin>:2:3)');
    }
  };
}());
")

testJS("
export void foo(bool foo) {
  (int)foo + 1
  (int)foo - 1
  (int)foo * 1
  (int)foo / 1
  (int)foo % 1
  (int)foo | 1
  (int)foo ^ 1
  (int)foo & 1
  (int)foo << 1
  (int)foo >> 1
  (int)foo, (int)true
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  foo = function(foo) {
    (foo | 0) + 1 | 0;
    (foo | 0) - 1 | 0;
    $imul(foo | 0, 1);
    (foo | 0) / 1 | 0;
    (foo | 0) % 1 | 0;
    foo | 1;
    foo ^ 1;
    foo & 1;
    foo << 1;
    foo >> 1;
    foo | 0, true | 0;
  };
}());
")

testJS("
export void foo(int foo) {
  foo + 1 | 1
  foo - 1 | 1
  foo * 1 | 1
  foo / 1 | 1
  foo % 1 | 1
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  foo = function(foo) {
    foo + 1 | 1;
    foo - 1 | 1;
    $imul(foo, 1) | 1;
    foo / 1 | 1;
    foo % 1 | 1;
  };
}());
")

testJS("
export void foo(int foo, bool bar) {
  foo += (int)bar
  foo -= (int)bar
  foo *= (int)bar
  foo /= (int)bar
  foo %= (int)bar
  foo |= (int)bar
  foo &= (int)bar
  foo ^= (int)bar
  foo <<= (int)bar
  foo >>= (int)bar
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  foo = function(foo, bar) {
    foo = foo + (bar | 0) | 0;
    foo = foo - (bar | 0) | 0;
    foo = $imul(foo, bar | 0);
    foo = foo / (bar | 0) | 0;
    foo = foo % (bar | 0) | 0;
    foo |= bar;
    foo &= bar;
    foo ^= bar;
    foo <<= bar;
    foo >>= bar;
  };
}());
")

testJS("
enum Foo {}
export int foo(bool x) { return (int)x }
export Foo bar(bool x) { return (Foo)x }
export Foo baz(bool x) { return (Foo)(int)x }
", "
(function() {
  var Foo = {
  };

  foo = function(x) {
    return x | 0;
  };

  bar = function(x) {
    return x | 0;
  };

  baz = function(x) {
    return x | 0;
  };
}());
")

testJS("
export void foo(int bar) {
  bar++
  bar--
  ++bar
  --bar
}
", "
(function() {
  foo = function(bar) {
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
  };
}());
")

testJS("
export class Foo {
  int bar
  void baz() {
    bar++
    bar--
    ++bar
    --bar
  }
}
", "
(function() {
  Foo = function(_0) {
    this.bar = _0;
  };

  Foo.prototype.baz = function() {
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
  };
}());
")

testJS("
class Foo {
  int foo = 0
}
export void foo(int baz) {
  bar().foo++
  bar().foo--
  ++bar().foo
  --bar().foo
}
Foo bar() {
  return Foo()
}
", "
(function() {
  function Foo() {
    this.foo = 0;
  }

  foo = function(baz) {
    var $temp0;
    $temp0 = bar(), $temp0.foo = $temp0.foo + 1 | 0;

    var $temp1;
    $temp1 = bar(), $temp1.foo = $temp1.foo - 1 | 0;

    var $temp2;
    $temp2 = bar(), $temp2.foo = $temp2.foo + 1 | 0;

    var $temp3;
    $temp3 = bar(), $temp3.foo = $temp3.foo - 1 | 0;
  };

  function bar() {
    return new Foo();
  }
}());
")

testJS("
export void foo(int bar) {
  bar += 1
  bar -= 1
  bar *= 1
  bar /= 1
  bar %= 1
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  foo = function(bar) {
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
    bar = $imul(bar, 1);
    bar = bar / 1 | 0;
    bar = bar % 1 | 0;
  };
}());
")

testJS("
export class Foo {
  int bar
  void baz() {
    bar += 1
    bar -= 1
    bar *= 1
    bar /= 1
    bar %= 1
  }
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  Foo = function(_0) {
    this.bar = _0;
  };

  Foo.prototype.baz = function() {
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
    this.bar = $imul(this.bar, 1);
    this.bar = this.bar / 1 | 0;
    this.bar = this.bar % 1 | 0;
  };
}());
")

testJS("
export class Foo {
  int foo = 0
  void bar() {
    baz().foo += foo
    baz().foo -= foo
    baz().foo *= foo
    baz().foo /= foo
    baz().foo %= foo
  }
}
Foo baz() {
  return Foo()
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 65535, bh = b >>> 16, bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };

  Foo = function() {
    this.foo = 0;
  };

  Foo.prototype.bar = function() {
    var $temp0;
    $temp0 = baz(), $temp0.foo = $temp0.foo + this.foo | 0;

    var $temp1;
    $temp1 = baz(), $temp1.foo = $temp1.foo - this.foo | 0;

    var $temp2;
    $temp2 = baz(), $temp2.foo = $imul($temp2.foo, this.foo);

    var $temp3;
    $temp3 = baz(), $temp3.foo = $temp3.foo / this.foo | 0;

    var $temp4;
    $temp4 = baz(), $temp4.foo = $temp4.foo % this.foo | 0;
  };

  function baz() {
    return new Foo();
  }
}());
")

testJS("
export void test() {
  int foo = (1, 2)
  foo = (1, 2)
  (1, 2), (3, 4)
}
", "
(function() {
  test = function() {
    var foo = (1, 2);
    foo = (1, 2);
    (1, 2), (3, 4);
  };
}());
")

testJS("
export void test() {
  0.toString()
  0.0.toString()
  0.5.toString()
}
", "
(function() {
  test = function() {
    (0).toString();
    (0).toString();
    (0.5).toString();
  };
}());
")

testJS("
export void test() {
  var a = \"\" + (1 + 2.toString())
  var b = \"\" + (1 + 2).toString()
  var c = \"\" + 1 + 2
}
", "
(function() {
  test = function() {
    var a = '' + ((1).toString() + 2);
    var b = '' + (1 + 2 | 0);
    var c = '' + 1 + 2;
  };
}());
")

testJS("
export void test() {
  var a = (1 + 2.toString()) + \"\"
  var b = (1 + 2).toString() + \"\"
  var c = 1 + 2 + \"\"
}
", "
(function() {
  test = function() {
    var a = (1).toString() + 2 + '';
    var b = (1 + 2 | 0) + '';
    var c = (1 + 2 | 0) + '';
  };
}());
")

testJS("
export string foo() {
  string t
  t += 100.toString()
  return t
}
", "
(function() {
  foo = function() {
    var t = '';
    t += 100;
    return t;
  };
}());
")

testJS("
class Foo {
  @OperatorNegative void negative() {}
  @OperatorComplement void complement() {}

  @OperatorAdd void add(int x) {}
  @OperatorSubtract void subtract(int x) {}
  @OperatorMultiply void multiply(int x) {}
  @OperatorDivide void divide(int x) {}
  @OperatorRemainder void remainder(int x) {}
  @OperatorAnd void and(int x) {}
  @OperatorOr void or(int x) {}
  @OperatorXor void xor(int x) {}
  @OperatorShiftLeft void shiftLeft(int x) {}
  @OperatorShiftRight void shiftRight(int x) {}
  @OperatorIn void contains(int x) {}
  @OperatorCompare void compare(int x) {}

  @OperatorAddAssign void addAssign(int x) {}
  @OperatorSubtractAssign void subtractAssign(int x) {}
  @OperatorMultiplyAssign void multiplyAssign(int x) {}
  @OperatorDivideAssign void divideAssign(int x) {}
  @OperatorRemainderAssign void remainderAssign(int x) {}
  @OperatorAndAssign void andAssign(int x) {}
  @OperatorOrAssign void orAssign(int x) {}
  @OperatorXorAssign void xorAssign(int x) {}
  @OperatorShiftLeftAssign void shiftLeftAssign(int x) {}
  @OperatorShiftRightAssign void shiftRightAssign(int x) {}

  @OperatorGet void get(int x) {}
  @OperatorSet void set(int x, int y) {}
}
export void foo(Foo foo) {
  -foo
  ~foo

  foo + 0
  foo - 0
  foo * 0
  foo / 0
  foo % 0
  foo & 0
  foo | 0
  foo ^ 0
  foo << 0
  foo >> 0
  0 in foo
  foo < 0
  foo <= 0
  foo > 0
  foo >= 0

  foo += 0
  foo -= 0
  foo *= 0
  foo /= 0
  foo %= 0
  foo &= 0
  foo |= 0
  foo ^= 0
  foo <<= 0
  foo >>= 0

  foo[0]
  foo[0] = 1
}
", "
(function() {
  function Foo() {
  }

  Foo.prototype.negative = function() {
  };

  Foo.prototype.complement = function() {
  };

  Foo.prototype.add = function(x) {
  };

  Foo.prototype.subtract = function(x) {
  };

  Foo.prototype.multiply = function(x) {
  };

  Foo.prototype.divide = function(x) {
  };

  Foo.prototype.remainder = function(x) {
  };

  Foo.prototype.and = function(x) {
  };

  Foo.prototype.or = function(x) {
  };

  Foo.prototype.xor = function(x) {
  };

  Foo.prototype.shiftLeft = function(x) {
  };

  Foo.prototype.shiftRight = function(x) {
  };

  Foo.prototype.contains = function(x) {
  };

  Foo.prototype.compare = function(x) {
  };

  Foo.prototype.addAssign = function(x) {
  };

  Foo.prototype.subtractAssign = function(x) {
  };

  Foo.prototype.multiplyAssign = function(x) {
  };

  Foo.prototype.divideAssign = function(x) {
  };

  Foo.prototype.remainderAssign = function(x) {
  };

  Foo.prototype.andAssign = function(x) {
  };

  Foo.prototype.orAssign = function(x) {
  };

  Foo.prototype.xorAssign = function(x) {
  };

  Foo.prototype.shiftLeftAssign = function(x) {
  };

  Foo.prototype.shiftRightAssign = function(x) {
  };

  Foo.prototype.get = function(x) {
  };

  Foo.prototype.set = function(x, y) {
  };

  foo = function(foo) {
    foo.negative();
    foo.complement();
    foo.add(0);
    foo.subtract(0);
    foo.multiply(0);
    foo.divide(0);
    foo.remainder(0);
    foo.and(0);
    foo.or(0);
    foo.xor(0);
    foo.shiftLeft(0);
    foo.shiftRight(0);
    foo.contains(0);
    foo.compare(0) < 0;
    foo.compare(0) <= 0;
    foo.compare(0) > 0;
    foo.compare(0) >= 0;
    foo.addAssign(0);
    foo.subtractAssign(0);
    foo.multiplyAssign(0);
    foo.divideAssign(0);
    foo.remainderAssign(0);
    foo.andAssign(0);
    foo.orAssign(0);
    foo.xorAssign(0);
    foo.shiftLeftAssign(0);
    foo.shiftRightAssign(0);
    foo.get(0);
    foo.set(0, 1);
  };
}());
")

testJS("
#define FOO false
export var foo = FOO
export bool bar() { return FOO }
", "
(function() {
  bar = function() {
    return false;
  };

  foo = false;
}());
")

testJS("
export bool foo() {
  const var foo = false
  return foo
}
", "
(function() {
  foo = function() {
    var foo = false;
    return foo;
  };
}());
")

testJS("
export void foo() {
  -0 ** 1 ** -2
}
", "
(function() {
  foo = function() {
    Math.pow(0, Math.pow(1, -2));
  };
}());
")

}}

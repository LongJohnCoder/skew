namespace js { void testExpressions() {

testJS("
export var foo = \"'\";
export var bar = \"\\\"\";
", "
(function() {
  foo = \"'\";
  bar = '\"';
}());
");

testJS("
export void test() {
  double x = 0;
  - -1;
  + +1;
  - +1;
  + -1;
}
", "
(function() {
  test = function() {
    var x = 0;
    - -1;
    + +1;
    -+1;
    +-1;
  };
}());
");

testJS("
export void test() {
  - -0x80000000;
}
", "
(function() {
  test = function() {
    - -2147483648;
  };
}());
");

testJS("
export void test() {
  double x = 0;
  (1.0 - 2.0) - 3.0;
  (1.0 / 2.0) * 3.0;
  1.0 - (2.0 - 3.0);
  1.0 / (2.0 * 3.0);
}
", "
(function() {
  test = function() {
    var x = 0;
    1 - 2 - 3;
    1 / 2 * 3;
    1 - (2 - 3);
    1 / (2 * 3);
  };
}());
");

testJS("
export void test() {
  (bool)1;
  (int)false;
  (float)false;
}
", "
(function() {
  test = function() {
    !!1;
    false | 0;
    +false;
  };
}());
");

testJS("
export void test() {
  assert (bool)1;
}
", "
(function() {
  test = function() {
    if (!1) {
      throw new Error('assert (bool)1; (<stdin>:2:3)');
    }
  };
}());
");

testJS("
export void foo(bool foo) {
  (int)foo + 1;
  (int)foo - 1;
  (int)foo * 1;
  (int)foo / 1;
  (int)foo % 1;
  (int)foo | 1;
  (int)foo ^ 1;
  (int)foo & 1;
  (int)foo << 1;
  (int)foo >> 1;
  (int)foo, (int)true;
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  foo = function(foo) {
    (foo | 0) + 1 | 0;
    (foo | 0) - 1 | 0;
    $imul(foo | 0, 1);
    (foo | 0) / 1 | 0;
    (foo | 0) % 1 | 0;
    foo | 1;
    foo ^ 1;
    foo & 1;
    foo << 1;
    foo >> 1;
    foo | 0, true | 0;
  };
}());
");

testJS("
export void foo(int foo) {
  foo + 1 | 1;
  foo - 1 | 1;
  foo * 1 | 1;
  foo / 1 | 1;
  foo % 1 | 1;
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  foo = function(foo) {
    foo + 1 | 1;
    foo - 1 | 1;
    $imul(foo, 1) | 1;
    foo / 1 | 1;
    foo % 1 | 1;
  };
}());
");

testJS("
export void foo(int foo, bool bar) {
  foo += (int)bar;
  foo -= (int)bar;
  foo *= (int)bar;
  foo /= (int)bar;
  foo %= (int)bar;
  foo |= (int)bar;
  foo &= (int)bar;
  foo ^= (int)bar;
  foo <<= (int)bar;
  foo >>= (int)bar;
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  foo = function(foo, bar) {
    foo = foo + (bar | 0) | 0;
    foo = foo - (bar | 0) | 0;
    foo = $imul(foo, bar | 0);
    foo = foo / (bar | 0) | 0;
    foo = foo % (bar | 0) | 0;
    foo |= bar;
    foo &= bar;
    foo ^= bar;
    foo <<= bar;
    foo >>= bar;
  };
}());
");

testJS("
export void foo(int bar) {
  bar++;
  bar--;
  ++bar;
  --bar;
}
", "
(function() {
  foo = function(bar) {
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
  };
}());
");

testJS("
export class Foo {
  int bar;
  export void baz() {
    bar++;
    bar--;
    ++bar;
    --bar;
  }
}
", "
(function() {
  Foo = function(_0) {
    this.bar = _0;
  };
  Foo.prototype.baz = function() {
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
  };
}());
");

testJS("
class Foo {
  int foo = 0;
}
export void foo(int baz) {
  bar().foo++;
  bar().foo--;
  ++bar().foo;
  --bar().foo;
}
Foo bar() {
  return Foo();
}
", "
(function() {
  function Foo() {
    this.foo = 0;
  }
  foo = function(baz) {
    (function($temp) {
      return $temp.foo = $temp.foo + 1 | 0;
    })(bar());
    (function($temp) {
      return $temp.foo = $temp.foo - 1 | 0;
    })(bar());
    (function($temp) {
      return $temp.foo = $temp.foo + 1 | 0;
    })(bar());
    (function($temp) {
      return $temp.foo = $temp.foo - 1 | 0;
    })(bar());
  };
  function bar() {
    return new Foo();
  }
}());
");

testJS("
export void foo(int bar) {
  bar += 1;
  bar -= 1;
  bar *= 1;
  bar /= 1;
  bar %= 1;
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  foo = function(bar) {
    bar = bar + 1 | 0;
    bar = bar - 1 | 0;
    bar = $imul(bar, 1);
    bar = bar / 1 | 0;
    bar = bar % 1 | 0;
  };
}());
");

testJS("
export class Foo {
  int bar;
  export void baz() {
    bar += 1;
    bar -= 1;
    bar *= 1;
    bar /= 1;
    bar %= 1;
  }
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  Foo = function(_0) {
    this.bar = _0;
  };
  Foo.prototype.baz = function() {
    this.bar = this.bar + 1 | 0;
    this.bar = this.bar - 1 | 0;
    this.bar = $imul(this.bar, 1);
    this.bar = this.bar / 1 | 0;
    this.bar = this.bar % 1 | 0;
  };
}());
");

testJS("
export class Foo {
  int foo = 0;
  export void bar() {
    baz().foo += foo;
    baz().foo -= foo;
    baz().foo *= foo;
    baz().foo /= foo;
    baz().foo %= foo;
  }
}
Foo baz() {
  return Foo();
}
", "
(function() {
  var $imul = Math.imul || function(a, b) {
    var ah = a >>> 16, al = a & 0xFFFF, bh = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
  Foo = function() {
    this.foo = 0;
  };
  Foo.prototype.bar = function() {
    var $this = this;
    (function($temp) {
      return $temp.foo = $temp.foo + $this.foo | 0;
    })(baz());
    (function($temp) {
      return $temp.foo = $temp.foo - $this.foo | 0;
    })(baz());
    (function($temp) {
      return $temp.foo = $imul($temp.foo, $this.foo);
    })(baz());
    (function($temp) {
      return $temp.foo = $temp.foo / $this.foo | 0;
    })(baz());
    (function($temp) {
      return $temp.foo = $temp.foo % $this.foo | 0;
    })(baz());
  };
  function baz() {
    return new Foo();
  }
}());
");

testJS("
export void test() {
  int foo = (1, 2);
  foo = (1, 2);
  (1, 2), (3, 4);
}
", "
(function() {
  test = function() {
    var foo = (1, 2);
    foo = (1, 2);
    (1, 2), (3, 4);
  };
}());
");

testJS("
export void test() {
  int y = let x = 1 in let x = x + 1 in x + 1;
}
", "
(function() {
  test = function() {
    var y = function(x) {
      return function(x) {
        return x + 1 | 0;
      }(x + 1 | 0);
    }(1);
  };
}());
");

testJS("
export void test() {
  let x = 0 in x;
  let x = 0 in x, 1;
  1, let x = 0 in x, 1;
}
", "
(function() {
  test = function() {
    (function(x) {
      return x;
    })(0);
    (function(x) {
      return x;
    })(0), 1;
    1, function(x) {
      return x;
    }(0), 1;
  };
}());
");

testJS("
export class Foo {
  int foo;
  export int fn() bar() {
    foo;
    int fn() bar = => foo;
    foo;
    int fn() baz = => foo;
    foo;
    return bar;
  }
}
", "
(function() {
  Foo = function(_0) {
    this.foo = _0;
  };
  Foo.prototype.bar = function() {
    var $this = this;
    this.foo;
    var bar = function() {
      return $this.foo;
    };
    this.foo;
    var baz = function() {
      return $this.foo;
    };
    this.foo;
    return bar;
  };
}());
");

testJS("
export class Foo {
  int foo;
  int fn() bar;
  new() : bar = () => foo {}
}
", "
(function() {
  Foo = function() {
    var $this = this;
    this.foo = 0;
    this.bar = function() {
      return $this.foo;
    };
  };
}());
");

testJS("
export class Foo {
  int foo;
  export int bar() {
    return let x = foo in x + foo;
  }
}
", "
(function() {
  Foo = function(_0) {
    this.foo = _0;
  };
  Foo.prototype.bar = function() {
    var $this = this;
    return function(x) {
      return x + $this.foo | 0;
    }(this.foo);
  };
}());
");

testJS("
export void test() {
  0.toString();
  0.0.toString();
  0.5.toString();
}
", "
(function() {
  test = function() {
    (0).toString();
    (0).toString();
    (0.5).toString();
  };
}());
");

testJS("
export void test() {
  var a = \"\" + (1 + 2.toString());
  var b = \"\" + (1 + 2).toString();
  var c = \"\" + 1 + 2;
}
", "
(function() {
  test = function() {
    var a = '' + ((1).toString() + 2);
    var b = '' + (1 + 2 | 0);
    var c = '' + 1 + 2;
  };
}());
");

testJS("
export void test() {
  var a = (1 + 2.toString()) + \"\";
  var b = (1 + 2).toString() + \"\";
  var c = 1 + 2 + \"\";
}
", "
(function() {
  test = function() {
    var a = (1).toString() + 2 + '';
    var b = (1 + 2 | 0) + '';
    var c = (1 + 2 | 0) + '';
  };
}());
");

testJS("
export string foo() {
  string t;
  t += 100.toString();
  return t;
}
", "
(function() {
  foo = function() {
    var t = '';
    t += 100;
    return t;
  };
}());
");

}}

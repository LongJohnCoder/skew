testJS("
double x = 0;
- -1;
+ +1;
- +1;
+ -1;
- --x;
+ ++x;
- ++x;
+ --x;
", "
var x = 0;
- -1;
+ +1;
-+1;
+-1;
- --x;
+ ++x;
-++x;
+--x;
");

testJS("
double x = 0;
(1.0 - 2.0) - 3.0;
(1.0 / 2.0) * 3.0;
1.0 - (2.0 - 3.0);
1.0 / (2.0 * 3.0);
x = (x = x);
", "
var x = 0;
1 - 2 - 3;
1 / 2 * 3;
1 - (2 - 3);
1 / (2 * 3);
x = x = x;
");

testJS("
(bool)1;
(int)false;
(float)false;
", "
!1;
false | 0;
+false;
");

testJS("
assert (bool)1;
", "
if (1) {
  throw new Error(\"assert (bool)1; (<stdin>:1:1)\");
}
");

testJS("
void foo(bool foo) {
  (int)foo + 1;
  (int)foo - 1;
  (int)foo * 1;
  (int)foo / 1;
  (int)foo % 1;
  (int)foo | 1;
  (int)foo ^ 1;
  (int)foo & 1;
  (int)foo << 1;
  (int)foo >> 1;
  (int)foo, (int)true;
}
", "
if (!Math.imul) {
  Math.imul = function(a, b) {
    var ah  = a >>> 16, al = a & 0xFFFF;
    var bh  = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
function foo(foo) {
  (foo | 0) + 1 | 0;
  (foo | 0) - 1 | 0;
  Math.imul(foo | 0, 1);
  (foo | 0) / 1 | 0;
  (foo | 0) % 1 | 0;
  foo | 1;
  foo ^ 1;
  foo & 1;
  foo << 1;
  foo >> 1;
  foo | 0, true | 0;
}
");

testJS("
void foo(int foo) {
  foo + 1 | 1;
  foo - 1 | 1;
  foo * 1 | 1;
  foo / 1 | 1;
  foo % 1 | 1;
}
", "
function foo(foo) {
  foo + 1 | 1;
  foo - 1 | 1;
  foo * 1 | 1;
  foo / 1 | 1;
  foo % 1 | 1;
}
");

testJS("
void foo(int foo, bool bar) {
  foo += (int)bar;
  foo -= (int)bar;
  foo *= (int)bar;
  foo /= (int)bar;
  foo %= (int)bar;
  foo |= (int)bar;
  foo &= (int)bar;
  foo ^= (int)bar;
  foo <<= (int)bar;
  foo >>= (int)bar;
}
", "
if (!Math.imul) {
  Math.imul = function(a, b) {
    var ah  = a >>> 16, al = a & 0xFFFF;
    var bh  = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
function foo(foo, bar) {
  foo = foo + (bar | 0) | 0;
  foo = foo - (bar | 0) | 0;
  foo = Math.imul(foo, bar | 0);
  foo = foo / (bar | 0) | 0;
  foo = foo % (bar | 0) | 0;
  foo |= bar;
  foo &= bar;
  foo ^= bar;
  foo <<= bar;
  foo >>= bar;
}
");

testJS("
void foo(int bar) {
  bar++, bar++;
  bar--, bar--;
  ++bar, ++bar;
  --bar, --bar;
  foo((bar++, bar++));
  foo((bar--, bar--));
  foo((++bar, ++bar));
  foo((--bar, --bar));
}
", "
function foo(bar) {
  bar = bar + 1 | 0, bar = bar + 1 | 0;
  bar = bar - 1 | 0, bar = bar - 1 | 0;
  bar = bar + 1 | 0, bar = bar + 1 | 0;
  bar = bar - 1 | 0, bar = bar - 1 | 0;
  foo((bar = bar + 1 | 0, (bar = bar + 1 | 0) - 1 | 0));
  foo((bar = bar - 1 | 0, (bar = bar - 1 | 0) + 1 | 0));
  foo((bar = bar + 1 | 0, bar = bar + 1 | 0));
  foo((bar = bar - 1 | 0, bar = bar - 1 | 0));
}
");

testJS("
class Foo {
  int bar;
  void foo(int foo) {
  }
  void baz() {
    bar++, bar++;
    bar--, bar--;
    ++bar, ++bar;
    --bar, --bar;
    foo((bar++, bar++));
    foo((bar--, bar--));
    foo((++bar, ++bar));
    foo((--bar, --bar));
  }
}
", "
function Foo(_0) {
  this.bar = _0;
}
Foo.prototype.foo = function(foo) {
};
Foo.prototype.baz = function() {
  this.bar = this.bar + 1 | 0, this.bar = this.bar + 1 | 0;
  this.bar = this.bar - 1 | 0, this.bar = this.bar - 1 | 0;
  this.bar = this.bar + 1 | 0, this.bar = this.bar + 1 | 0;
  this.bar = this.bar - 1 | 0, this.bar = this.bar - 1 | 0;
  this.foo((this.bar = this.bar + 1 | 0, (this.bar = this.bar + 1 | 0) - 1 | 0));
  this.foo((this.bar = this.bar - 1 | 0, (this.bar = this.bar - 1 | 0) + 1 | 0));
  this.foo((this.bar = this.bar + 1 | 0, this.bar = this.bar + 1 | 0));
  this.foo((this.bar = this.bar - 1 | 0, this.bar = this.bar - 1 | 0));
};
");

testJS("
class Foo {
  int foo = 0;
}
void foo(int baz) {
  bar().foo++, bar().foo++;
  bar().foo--, bar().foo--;
  ++bar().foo, ++bar().foo;
  --bar().foo, --bar().foo;
  foo((bar().foo++, bar().foo++));
  foo((bar().foo--, bar().foo--));
  foo((++bar().foo, ++bar().foo));
  foo((--bar().foo, --bar().foo));
}
Foo bar() {
  return Foo();
}
", "
function Foo() {
  this.foo = 0;
}
function foo(baz) {
  (function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  })(bar()), function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar());
  (function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  })(bar()), function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar());
  (function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  })(bar()), function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar());
  (function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  })(bar()), function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar());
  foo((function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar()), function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar()) - 1 | 0));
  foo((function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar()), function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar()) + 1 | 0));
  foo((function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar()), function($temp) {
    return $temp.foo = $temp.foo + 1 | 0;
  }(bar())));
  foo((function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar()), function($temp) {
    return $temp.foo = $temp.foo - 1 | 0;
  }(bar())));
}
function bar() {
  return new Foo();
}
");

testJS("
void foo(int bar) {
  bar += 1;
  bar -= 1;
  bar *= 1;
  bar /= 1;
  bar %= 1;
  foo(bar += 1);
  foo(bar -= 1);
  foo(bar *= 1);
  foo(bar /= 1);
  foo(bar %= 1);
}
", "
if (!Math.imul) {
  Math.imul = function(a, b) {
    var ah  = a >>> 16, al = a & 0xFFFF;
    var bh  = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
function foo(bar) {
  bar = bar + 1 | 0;
  bar = bar - 1 | 0;
  bar = Math.imul(bar, 1);
  bar = bar / 1 | 0;
  bar = bar % 1 | 0;
  foo(bar = bar + 1 | 0);
  foo(bar = bar - 1 | 0);
  foo(bar = Math.imul(bar, 1));
  foo(bar = bar / 1 | 0);
  foo(bar = bar % 1 | 0);
}
");

testJS("
class Foo {
  int bar;
  void foo(int foo) {
  }
  void baz() {
    bar += 1;
    bar -= 1;
    bar *= 1;
    bar /= 1;
    bar %= 1;
    foo(bar += 1);
    foo(bar -= 1);
    foo(bar *= 1);
    foo(bar /= 1);
    foo(bar %= 1);
  }
}
", "
if (!Math.imul) {
  Math.imul = function(a, b) {
    var ah  = a >>> 16, al = a & 0xFFFF;
    var bh  = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
function Foo(_0) {
  this.bar = _0;
}
Foo.prototype.foo = function(foo) {
};
Foo.prototype.baz = function() {
  this.bar = this.bar + 1 | 0;
  this.bar = this.bar - 1 | 0;
  this.bar = Math.imul(this.bar, 1);
  this.bar = this.bar / 1 | 0;
  this.bar = this.bar % 1 | 0;
  this.foo(this.bar = this.bar + 1 | 0);
  this.foo(this.bar = this.bar - 1 | 0);
  this.foo(this.bar = Math.imul(this.bar, 1));
  this.foo(this.bar = this.bar / 1 | 0);
  this.foo(this.bar = this.bar % 1 | 0);
};
");

testJS("
class Foo {
  int foo = 0;
  void bar() {
    baz().foo += foo;
    baz().foo -= foo;
    baz().foo *= foo;
    baz().foo /= foo;
    baz().foo %= foo;
    foo = baz().foo += foo;
    foo = baz().foo -= foo;
    foo = baz().foo *= foo;
    foo = baz().foo /= foo;
    foo = baz().foo %= foo;
  }
}
Foo baz() {
  return Foo();
}
", "
if (!Math.imul) {
  Math.imul = function(a, b) {
    var ah  = a >>> 16, al = a & 0xFFFF;
    var bh  = b >>> 16, bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16) | 0;
  };
}
function Foo() {
  this.foo = 0;
}
Foo.prototype.bar = function() {
  var $this = this;
  (function($temp) {
    return $temp.foo = $temp.foo + $this.foo | 0;
  })(baz());
  (function($temp) {
    return $temp.foo = $temp.foo - $this.foo | 0;
  })(baz());
  (function($temp) {
    return $temp.foo = Math.imul($temp.foo, $this.foo);
  })(baz());
  (function($temp) {
    return $temp.foo = $temp.foo / $this.foo | 0;
  })(baz());
  (function($temp) {
    return $temp.foo = $temp.foo % $this.foo | 0;
  })(baz());
  this.foo = function($temp) {
    return $temp.foo = $temp.foo + $this.foo | 0;
  }(baz());
  this.foo = function($temp) {
    return $temp.foo = $temp.foo - $this.foo | 0;
  }(baz());
  this.foo = function($temp) {
    return $temp.foo = Math.imul($temp.foo, $this.foo);
  }(baz());
  this.foo = function($temp) {
    return $temp.foo = $temp.foo / $this.foo | 0;
  }(baz());
  this.foo = function($temp) {
    return $temp.foo = $temp.foo % $this.foo | 0;
  }(baz());
};
function baz() {
  return new Foo();
}
");

testJS("
int foo = (1, 2);
foo = (1, 2);
foo = 1, 2;
(1, 2), (3, 4);
", "
var foo = (1, 2);
foo = (1, 2);
foo = 1, 2;
(1, 2), (3, 4);
");

testJS("
int y = let x = 1 in let x = x + 1 in x + 1;
", "
var y = function(x) {
  return function(x) {
    return x + 1 | 0;
  }(x + 1 | 0);
}(1);
");

testJS("
let x = 0 in x;
let x = 0 in x, 1;
1, let x = 0 in x, 1;
", "
(function(x) {
  return x;
})(0);
(function(x) {
  return x;
})(0), 1;
1, function(x) {
  return x;
}(0), 1;
");

testJS("
class Foo {
  int foo;
  int fn() bar() {
    foo;
    int fn() bar = => foo;
    foo;
    int fn() baz = => foo;
    foo;
    return bar;
  }
}
", "
function Foo(_0) {
  this.foo = _0;
}
Foo.prototype.bar = function() {
  var $this = this;
  this.foo;
  var bar = function() {
    return $this.foo;
  };
  this.foo;
  var baz = function() {
    return $this.foo;
  };
  this.foo;
  return bar;
};
");

testJS("
class Foo {
  int foo;
  int fn() bar = () => foo;
}
", "
function Foo() {
  var $this = this;
  this.foo = 0;
  this.bar = function() {
    return $this.foo;
  };
}
");

testJS("
class Foo {
  int foo;
  int fn() bar;
  new() : bar = () => foo {}
}
", "
function Foo() {
  var $this = this;
  this.foo = 0;
  this.bar = function() {
    return $this.foo;
  };
}
");

testJS("
class Foo {
  int foo;
  int bar() {
    return let x = foo in x + foo;
  }
}
", "
function Foo(_0) {
  this.foo = _0;
}
Foo.prototype.bar = function() {
  var $this = this;
  return function(x) {
    return x + $this.foo | 0;
  }(this.foo);
};
");

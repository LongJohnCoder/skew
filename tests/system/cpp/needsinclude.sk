namespace cpp { void testNeedsInclude() {

testCPP("
export void foo() { var baz = bar(); }
@NeedsInclude(\"<test>\") inline int bar() { return 0; }
", "
#include <test>

void foo();

void foo() {
  int baz = 0;
}
");

testCPP("
export Foo foo;
@NeedsInclude(\"<test>\") import class Foo {}
", "
#include <test>

extern Foo *foo;

Foo *foo = nullptr;
");

testCPP("
export Foo foo;
@NeedsInclude(\"<test>\") class Foo {}
", "
#include <test>

struct Foo;

struct Foo {
  Foo();
};

extern Foo *foo;

Foo::Foo() {
}

Foo *foo = nullptr;
");

testCPP("
export Foo<Bar> foo;
import class Foo<T> {}
@NeedsInclude(\"<test>\") import class Bar {}
", "
#include <test>

extern Foo<Bar *> *foo;

Foo<Bar *> *foo = nullptr;
");

testCPP("
export Foo<Bar> foo;
class Foo<T> {}
@NeedsInclude(\"<test>\") class Bar {}
", "
#include <test>

template <typename T>
struct Foo;
struct Bar;

template <typename T>
struct Foo {
  Foo();
};

struct Bar {
  Bar();
};

extern Foo<Bar *> *foo;

template <typename T>
Foo<T>::Foo() {
}

Bar::Bar() {
}

Foo<Bar *> *foo = nullptr;
");

testCPP("
export void foo(Foo<Bar> bar) {}
import class Foo<T> {}
@NeedsInclude(\"<test>\") import class Bar {}
", "
#include <test>

void foo(Foo<Bar *> *bar);

void foo(Foo<Bar *> *bar) {
}
");

testCPP("
export void foo(Foo<Bar> bar) {}
class Foo<T> {}
@NeedsInclude(\"<test>\") class Bar {}
", "
#include <test>

template <typename T>
struct Foo;
struct Bar;

template <typename T>
struct Foo {
  Foo();
};

struct Bar {
  Bar();
};

void foo(Foo<Bar *> *bar);

template <typename T>
Foo<T>::Foo() {
}

Bar::Bar() {
}

void foo(Foo<Bar *> *bar) {
}
");

testCPP("
@NeedsInclude(\"<test>\")
alias foo = `foo`;
export foo bar;
", "
#include <test>

extern foo bar;

foo bar;
");

testCPP("
export var foo = \"\";
", "
#include <string>

extern std::string foo;

std::string foo = \"\";
");

testCPP("
export void foo() { var bar = string.fromCodeUnit('a'); }
", "
#include <string>

void foo();

void foo() {
  std::string bar = std::string(1, 97);
}
");

testCPP("
export var foo = [0];
export var bar = List<int>();
export List<int> baz = [];
", "
#include <initializer_list>
#include <vector>

template <typename T>
struct List;

template <typename T>
struct List {
  List();
  List<T> *_literal_(std::initializer_list<T> list);

  std::vector<T> _data;
};

extern List<int> *foo;
extern List<int> *bar;
extern List<int> *baz;

template <typename T>
List<T>::List() : _data() {
}

template <typename T>
List<T> *List<T>::_literal_(std::initializer_list<T> list) {
  _data.insert(_data.end(), list.begin(), list.end());
  return this;
}

List<int> *foo = (new List<int>())->_literal_({ 0 });
List<int> *bar = new List<int>();
List<int> *baz = new List<int>();
");

}}

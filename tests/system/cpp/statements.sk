namespace cpp { void testStatements() {

testCPP("
class Foo {}
export void foo(int foo, int bar) {
  `(void *)` a = null, b = null
  for (Foo x = null, y = null; x == y; x = y) {}
  for (`(void *)` x = null, y = null; x == y; x = y) {}
  for (`(int &)` x = foo, y = bar; foo == bar; foo++, bar--) {}
}
", "
struct Foo;

struct Foo {
  Foo();
};

void foo(int foo, int bar);

Foo::Foo() {
}

void foo(int foo, int bar) {
  void *a = nullptr;
  void *b = nullptr;

  for (Foo *x = nullptr, *y = nullptr; x == y; x = y) {
  }

  for (void *x = nullptr, *y = nullptr; x == y; x = y) {
  }

  for (int &x = foo, &y = bar; foo == bar; foo++, bar--) {
  }
}
")

testCPP("
export enum Foo {
  FOO,
}
export Bar foo() {
  return .FOO
}
alias Bar = Foo
", "
enum struct Foo {
  FOO
};

Foo foo();

Foo foo() {
  return Foo::FOO;
}
")

testCPP("
pure int foo() {
  const var bar = 1
  return baz + bar
}
export var bar = foo()
const var baz = 0
", "
int foo();

extern int bar;
extern int baz;

int foo() {
  int bar = 1;
  return 0 + bar;
}

int bar = foo();
int baz = 0;
")

testCPP("
import void bar(int x)
export void foo() {
  try { throw Foo(1) }
  catch (Foo foo) { bar(foo.x) }
  catch { bar(2) }
  finally { bar(3) }
}
class Foo { int x }
", "
struct Foo;

struct Foo {
  int x;

  Foo(int _0);
};

void foo();

Foo::Foo(int _0) : x(_0) {
}

void foo() {
  try {
    throw new Foo(1);
  } catch (Foo *foo) {
    bar(foo->x);
  } catch (...) {
    bar(2);
  } finally {
    bar(3);
  }
}
")

}}

namespace core { void testConstructors() {

test("
class Foo {
  new() { return 0; }
}
class Bar {
  new() { return 0; foo; }
}
", "
<stdin>:2:18: error: Cannot convert from type \"int\" to type \"void\"
  new() { return 0; }
                 ^
<stdin>:5:18: error: Cannot convert from type \"int\" to type \"void\"
  new() { return 0; foo; }
                 ^
<stdin>:5:21: error: \"foo\" is not declared
  new() { return 0; foo; }
                    ~~~
");

test("
void test() {
  void();
}
", "
<stdin>:2:3: error: Cannot construct type \"void\"
  void();
  ~~~~
");

test("
void test() {
  void fn()();
}
", "
<stdin>:2:3: error: Cannot construct type \"void fn()\"
  void fn()();
  ~~~~~~~~~
");

test("
struct Foo {
  new(int x) {}
}
int foo = Foo();
", "
<stdin>:4:14: error: Expected 1 argument but found 0 arguments
int foo = Foo();
             ~~
<stdin>:4:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo();
          ~~~~~
");

test("
class Foo {
  new() {}
}
int foo = Foo(1);
", "
<stdin>:4:14: error: Expected 0 arguments but found 1 argument
int foo = Foo(1);
             ~~~
<stdin>:4:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo(1);
          ~~~~~~
");

test("
class Foo {}
int foo = Foo(1);
", "
<stdin>:2:14: error: Expected 0 arguments but found 1 argument
int foo = Foo(1);
             ~~~
<stdin>:2:11: error: Cannot convert from type \"Foo\" to type \"int\"
int foo = Foo(1);
          ~~~~~~
");

test("
int i = int();
bool b = bool();
float f = float();
double d = double();
string s = string();
", "
<stdin>:1:9: error: Cannot construct type \"int\"
int i = int();
        ~~~
<stdin>:2:10: error: Cannot construct type \"bool\"
bool b = bool();
         ~~~~
<stdin>:3:11: error: Cannot construct type \"float\"
float f = float();
          ~~~~~
<stdin>:4:12: error: Cannot construct type \"double\"
double d = double();
           ~~~~~~
<stdin>:5:12: error: Cannot construct type \"string\"
string s = string();
           ~~~~~~
");

test("
struct Foo {
  static int foo;
  final int bar;
}
Foo fn() foo = => Foo(1, 2);
", "
<stdin>:5:22: error: Expected 1 argument but found 2 arguments
Foo fn() foo = => Foo(1, 2);
                     ~~~~~~
");

test("
class Foo : Bar {
  new(int foo) : super(foo) {}
}
class Bar {
  new(bool foo) {}
}
Foo fn() foo = => Foo(false);
Bar fn() bar = => Bar(0);
", "
<stdin>:2:24: error: Cannot convert from type \"int\" to type \"bool\" without a cast
  new(int foo) : super(foo) {}
                       ~~~
<stdin>:7:23: error: Cannot convert from type \"bool\" to type \"int\" without a cast
Foo fn() foo = => Foo(false);
                      ~~~~~
<stdin>:8:23: error: Cannot convert from type \"int\" to type \"bool\" without a cast
Bar fn() bar = => Bar(0);
                      ^
");

test("
class Foo {
  new() : super(x) {}
}
", "
<stdin>:2:11: error: No base constructor to call
  new() : super(x) {}
          ~~~~~~~~
<stdin>:2:17: error: \"x\" is not declared
  new() : super(x) {}
                ^
");

test("
class Foo : Bar { new() {} }
class Bar {}
", "
");

test("
class Foo : Bar {
  new() {}
}
class Bar {
  int foo;
}
", "
<stdin>:2:3: error: Missing call to \"super\" in initializer list
  new() {}
  ~~~
");

test("
class Foo {
  int foo;
  new() : foo = 0;
}
", "
<stdin>:3:3: error: Use the \"import\" modifier to import functions
  new() : foo = 0;
  ~~~
<stdin>:3:11: error: An abstract constructor must not have initializer list
  new() : foo = 0;
          ~~~~~~~
");

test("
class Foo : Bar {
  new() : super();
}
class Bar {
}
", "
<stdin>:2:3: error: Use the \"import\" modifier to import functions
  new() : super();
  ~~~
<stdin>:2:11: error: An abstract constructor must not have initializer list
  new() : super();
          ~~~~~~~
");

test("
class Foo : Bar {
  int foo;
  new() : super(), foo = 0;
}
class Bar {
}
", "
<stdin>:3:3: error: Use the \"import\" modifier to import functions
  new() : super(), foo = 0;
  ~~~
<stdin>:3:11: error: An abstract constructor must not have initializer list
  new() : super(), foo = 0;
          ~~~~~~~~~~~~~~~~
");

test("
class Foo : Bar {
  int x;
  new() : x = 0 {}
}
class Bar {
  new(int foo) {}
}
", "
<stdin>:3:3: error: Missing call to \"super\" in initializer list
  new() : x = 0 {}
  ~~~
");

test("
class Foo {
  Bar bar;
  new() : bar = .FOO {}
}
enum Bar { FOO }
", "
");

test("
class Foo {
  int foo;
  new() : foo = 0, foo = 1 {}
}
", "
<stdin>:3:26: error: \"foo\" is already initialized
  new() : foo = 0, foo = 1 {}
                         ^
<stdin>:3:17: note: The previous initialization is here
  new() : foo = 0, foo = 1 {}
                ^
");

test("
class Foo {
  int foo = 0;
  new() : foo = 1 {}
}
", "
<stdin>:3:17: error: \"foo\" is already initialized
  new() : foo = 1 {}
                ^
<stdin>:2:13: note: The previous initialization is here
  int foo = 0;
            ^
");

test("
class Foo {
  int foo = 0;
  new() : bar = 3, foo = 2 {}
  int bar = 1;
}
", "
<stdin>:3:17: error: \"bar\" is already initialized
  new() : bar = 3, foo = 2 {}
                ^
<stdin>:4:13: note: The previous initialization is here
  int bar = 1;
            ^
<stdin>:3:26: error: \"foo\" is already initialized
  new() : bar = 3, foo = 2 {}
                         ^
<stdin>:2:13: note: The previous initialization is here
  int foo = 0;
            ^
");

test("
class Foo {
  int foo = bar;
  new(int bar) {}
}
", "
<stdin>:2:13: error: \"bar\" is not declared
  int foo = bar;
            ~~~
");

test("
class Foo {
  new(int bar) {}
  int foo = bar;
}
", "
<stdin>:3:13: error: \"bar\" is not declared
  int foo = bar;
            ~~~
");

test("
class Foo {
  int foo;
  new() : foo = this {}
}
", "
<stdin>:3:17: error: Cannot convert from type \"Foo\" to type \"int\"
  new() : foo = this {}
                ~~~~
");

test("
class Foo {
  new() : foo = 0 {}
}
", "
<stdin>:2:11: error: \"foo\" is not declared
  new() : foo = 0 {}
          ~~~
");

test("
class Foo {
  int foo;
  new() : foo = this {}
}
", "
<stdin>:3:17: error: Cannot convert from type \"Foo\" to type \"int\"
  new() : foo = this {}
                ~~~~
");

test("
class Foo {
  Foo foo = this;
}
", "
<stdin>:2:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
class Foo {}
in Foo {
  Foo foo = this;
}
", "
<stdin>:3:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
in Foo {
  Foo foo = this;
}
class Foo {}
", "
<stdin>:2:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
class Foo {
  new() {}
  Foo foo = this;
}
", "
<stdin>:3:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
class Foo {
  new() {}
}
in Foo {
  Foo foo = this;
}
", "
<stdin>:5:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
in Foo {
  Foo foo = this;
}
class Foo {
  new() {}
}
", "
<stdin>:2:13: error: Cannot access \"this\" from a static context
  Foo foo = this;
            ~~~~
");

test("
class Foo {
  virtual void foo();
}
Foo fn() foo = => Foo();
", "
<stdin>:4:19: error: Cannot construct abstract type \"Foo\"
Foo fn() foo = => Foo();
                  ~~~
<stdin>:2:16: note: The type \"Foo\" is abstract due to member \"Foo.foo\"
  virtual void foo();
               ~~~
");

test("
class Foo {
  virtual void foo();
}
class Bar : Foo {
}
Foo fn() foo = => Bar();
", "
<stdin>:6:19: error: Cannot construct abstract type \"Bar\"
Foo fn() foo = => Bar();
                  ~~~
<stdin>:2:16: note: The type \"Bar\" is abstract due to member \"Foo.foo\"
  virtual void foo();
               ~~~
");

test("
class Foo {
  virtual void foo();
}
class Bar : Foo {
  override void foo() {}
}
Foo fn() foo = => Bar();
", "
");

test("
interface IFoo {
  virtual void foo();
}
class Bar : IFoo {
  override void foo() {}
}
IFoo fn() foo = => Bar();
", "
");

}}

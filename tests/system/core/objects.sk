namespace core { void testObjects() {

test("
class Foo<T> : T {}
", "
<stdin>:1:16: error: Invalid base type \"T\"
class Foo<T> : T {}
               ^
")

test("
interface IFoo {}
class Foo : IFoo, Bar {}
class Bar {}
", "
<stdin>:2:19: error: Base type \"Bar\" must come first in a class declaration
class Foo : IFoo, Bar {}
                  ~~~
")

test("
class Foo : Bar {}
class Bar {}
", "
")

test("
interface IFoo : IBar {}
interface IBar {}
", "
")

test("
interface IFoo : Bar {}
class Bar {}
", "
<stdin>:1:18: error: Invalid base type \"Bar\"
interface IFoo : Bar {}
                 ~~~
")

test("
class Foo : IFoo, IFoo {}
interface IFoo {}
", "
<stdin>:1:19: error: Duplicate base type \"IFoo\"
class Foo : IFoo, IFoo {}
                  ~~~~
")

test("
class Foo {}
in Foo : Bar {}
class Bar {}
", "
<stdin>:2:10: error: The base class must be set from the class declaration, not from an extension block
in Foo : Bar {}
         ~~~
")

test("
class Foo {}
in Foo : IFoo {}
in Foo : IFoo {}
interface IFoo {}
", "
<stdin>:3:10: error: Duplicate base type \"IFoo\"
in Foo : IFoo {}
         ~~~~
")

test("
class Foo : IBar {}
class Bar : Foo, IBar {}
interface IFoo {}
interface IBar : IFoo {}
", "
")

test("
class Foo : Bar {}
in Foo { class Bar {} }
", "
")

test("
interface A { virtual void foo() }
interface B { void foo() }
interface C : A, B {}
int foo(C foo) { return foo.foo() }
", "
<stdin>:2:20: error: Abstract functions must use the \"virtual\" modifier
interface B { void foo() }
                   ~~~
<stdin>:3:11: error: Cannot merge \"A.foo\" and \"B.foo\" for \"C.foo\"
interface C : A, B {}
          ^
")

test("
interface A { virtual void foo() }
interface B { virtual void foo() }
interface C : A, B {}
int foo(C foo) { return foo.foo() }
", "
<stdin>:4:25: error: Cannot convert from type \"void\" to type \"int\"
int foo(C foo) { return foo.foo() }
                        ~~~~~~~~~
")

test("
void foo(C foo) { foo.foo() }
interface C : A, B {}
interface A { virtual void foo() }
interface B { virtual int foo() }
", "
<stdin>:2:11: error: Member \"C.foo\" has an ambiguous inherited type, could be type \"void fn()\" or type \"int fn()\"
interface C : A, B {}
          ^
")

test("
interface G : C, F {}
void foo(G foo) { foo.foo() }

interface A { virtual void foo() }
interface B { virtual int foo() }
interface C : A, B {}

interface D { virtual bool foo() }
interface E { virtual float foo() }
interface F : E, D {}
", "
<stdin>:6:11: error: Member \"C.foo\" has an ambiguous inherited type, could be type \"void fn()\" or type \"int fn()\"
interface C : A, B {}
          ^
<stdin>:10:11: error: Member \"F.foo\" has an ambiguous inherited type, could be type \"float fn()\" or type \"bool fn()\"
interface F : E, D {}
          ^
")

test("
void foo(G foo) { foo.foo() }
interface G : C, F {}

interface A { virtual int foo() }
interface B { virtual int foo() }
interface C : A, B {}

interface D { virtual bool foo() }
interface E { virtual bool foo() }
interface F : E, D {}
", "
<stdin>:2:11: error: Member \"G.foo\" has an ambiguous inherited type, could be type \"int fn()\" or type \"bool fn()\"
interface G : C, F {}
          ^
")

test("
interface Foo { virtual bool foo() }
interface Bar { virtual int foo() }
interface Baz : Foo, Bar {}
", "
<stdin>:3:11: error: Member \"Baz.foo\" has an ambiguous inherited type, could be type \"bool fn()\" or type \"int fn()\"
interface Baz : Foo, Bar {}
          ~~~
")

test("
interface Foo {}
in Foo { namespace foo {} }
interface Bar {}
in Bar { virtual int foo() }
interface Baz : Foo, Bar {}
", "
<stdin>:5:11: error: Cannot merge \"Foo.foo\" and \"Bar.foo\" for \"Baz.foo\"
interface Baz : Foo, Bar {}
          ~~~
")

test("
class Foo { void foo() {} }
class Bar : Foo { void foo() {} }
", "
<stdin>:2:24: error: \"foo\" overrides another symbol with the same name but is missing the \"override\" modifier
class Bar : Foo { void foo() {} }
                       ~~~
<stdin>:1:18: note: The overridden declaration is here
class Foo { void foo() {} }
                 ~~~
")

test("
class Foo { void foo() {} }
class Bar : Foo { override void foo() {} }
", "
<stdin>:2:33: error: \"foo\" cannot override a non-virtual function
class Bar : Foo { override void foo() {} }
                                ~~~
<stdin>:1:18: note: The overridden declaration is here
class Foo { void foo() {} }
                 ~~~
")

test("
class Foo { override void foo() {} }
class Bar : Foo { override void foo() {} }
", "
<stdin>:1:13: error: Cannot use the \"override\" modifier on a function that doesn't override anything
class Foo { override void foo() {} }
            ~~~~~~~~
")

test("
class Foo { virtual void foo() {} }
class Bar : Foo { virtual override void foo() {} }
", "
<stdin>:2:19: error: Redundant modifier \"virtual\" on an overriding function
class Bar : Foo { virtual override void foo() {} }
                  ~~~~~~~
")

test("
class Foo { virtual override void foo() {} }
class Bar : Foo { virtual void foo() {} }
", "
<stdin>:1:21: error: Cannot use the \"override\" modifier on a function that doesn't override anything
class Foo { virtual override void foo() {} }
                    ~~~~~~~~
<stdin>:2:32: error: \"foo\" overrides another symbol with the same name but is missing the \"override\" modifier
class Bar : Foo { virtual void foo() {} }
                               ~~~
<stdin>:1:35: note: The overridden declaration is here
class Foo { virtual override void foo() {} }
                                  ~~~
")

test("
class Foo { virtual void foo() {} }
class Bar : Foo { override void foo() {} }
", "
")

test("
class Foo { virtual void foo() {} }
class Bar : Foo { override void foo() {} }
class Baz : Bar { override void foo() {} }
", "
")

test("
interface IFoo { virtual void foo() }
class Foo {}
in Foo { override void foo() {} }
in Foo : IFoo {}
", "
")

test("
class Foo { virtual void foo() {} }
class Bar : Foo { void foo() {} }
class Baz : Bar { override void foo() {} }
", "
<stdin>:2:24: error: \"foo\" overrides another symbol with the same name but is missing the \"override\" modifier
class Bar : Foo { void foo() {} }
                       ~~~
<stdin>:1:26: note: The overridden declaration is here
class Foo { virtual void foo() {} }
                         ~~~
")

test("
class Foo { void foo() {} }
class Bar : Foo { int foo() { return 0 } }
", "
<stdin>:2:23: error: \"foo\" must have the same signature as the function it overrides (expected type \"void fn()\" but found type \"int fn()\")
class Bar : Foo { int foo() { return 0 } }
                      ~~~
<stdin>:1:18: note: The overridden declaration is here
class Foo { void foo() {} }
                 ~~~
")

test("
class Foo { int foo }
class Bar : Foo { int foo() { return 0 } }
", "
<stdin>:2:23: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { int foo() { return 0 } }
                      ~~~
<stdin>:1:17: note: The overridden declaration is here
class Foo { int foo }
                ~~~
")

test("
class Foo {}
class Bar : Foo { int foo() { return 0 } }
in Foo { namespace foo {} }
", "
<stdin>:2:23: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { int foo() { return 0 } }
                      ~~~
<stdin>:3:20: note: The overridden declaration is here
in Foo { namespace foo {} }
                   ~~~
")

test("
class Foo { static virtual void foo() {} }
", "
<stdin>:1:20: error: Cannot use the \"virtual\" modifier on a non-instance function
class Foo { static virtual void foo() {} }
                   ~~~~~~~
")

test("
class Foo { void foo() {} }
class Bar : Foo { static void foo() {} }
", "
<stdin>:2:31: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { static void foo() {} }
                              ~~~
<stdin>:1:18: note: The overridden declaration is here
class Foo { void foo() {} }
                 ~~~
")

test("
class Foo { static void foo() {} }
class Bar : Foo { void foo() {} }
", "
<stdin>:2:24: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { void foo() {} }
                       ~~~
<stdin>:1:25: note: The overridden declaration is here
class Foo { static void foo() {} }
                        ~~~
")

test("
class Foo { static void foo() {} }
class Bar : Foo { static void foo() {} }
", "
<stdin>:2:31: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { static void foo() {} }
                              ~~~
<stdin>:1:25: note: The overridden declaration is here
class Foo { static void foo() {} }
                        ~~~
")

test("
class Foo { int foo }
class Bar : Foo { int foo }
", "
<stdin>:2:23: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { int foo }
                      ~~~
<stdin>:1:17: note: The overridden declaration is here
class Foo { int foo }
                ~~~
")

test("
class Foo { void foo() {} }
class Bar : Foo { int foo }
", "
<stdin>:2:23: error: \"foo\" overrides another declaration with the same name in base type \"Foo\"
class Bar : Foo { int foo }
                      ~~~
<stdin>:1:18: note: The overridden declaration is here
class Foo { void foo() {} }
                 ~~~
")

test("
virtual void foo() {}
override void bar() {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier outside an object declaration
virtual void foo() {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier outside an object declaration
override void bar() {}
~~~~~~~~
")

test("
virtual int foo
override int bar
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on a variable declaration
virtual int foo
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on a variable declaration
override int bar
~~~~~~~~
")

test("
virtual namespace foo {}
override namespace bar {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on a namespace declaration
virtual namespace foo {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on a namespace declaration
override namespace bar {}
~~~~~~~~
")

test("
virtual class Foo {}
override class Bar {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on an object declaration
virtual class Foo {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on an object declaration
override class Bar {}
~~~~~~~~
")

test("
virtual interface Foo {}
override interface Bar {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on an object declaration
virtual interface Foo {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on an object declaration
override interface Bar {}
~~~~~~~~
")

test("
virtual enum Foo {}
override enum Bar {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on an enum declaration
virtual enum Foo {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on an enum declaration
override enum Bar {}
~~~~~~~~
")

test("
virtual enum flags Foo {}
override enum flags Bar {}
", "
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on an enum declaration
virtual enum flags Foo {}
~~~~~~~
<stdin>:2:1: error: Cannot use the \"override\" modifier on an enum declaration
override enum flags Bar {}
~~~~~~~~
")

test("
class Foo {}
virtual in Foo {}
override in Bar {}
class Bar {}
", "
<stdin>:2:1: error: Cannot use the \"virtual\" modifier on an extension block
virtual in Foo {}
~~~~~~~
<stdin>:3:1: error: Cannot use the \"override\" modifier on an extension block
override in Bar {}
~~~~~~~~
")

test("
virtual class Foo {}
virtual in Foo {}
override in Bar {}
override class Bar {}
", "
<stdin>:2:1: error: Cannot use the \"virtual\" modifier on an extension block
virtual in Foo {}
~~~~~~~
<stdin>:3:1: error: Cannot use the \"override\" modifier on an extension block
override in Bar {}
~~~~~~~~
<stdin>:1:1: error: Cannot use the \"virtual\" modifier on an object declaration
virtual class Foo {}
~~~~~~~
<stdin>:4:1: error: Cannot use the \"override\" modifier on an object declaration
override class Bar {}
~~~~~~~~
")

test("
namespace foo {}
in foo : int {}
", "
<stdin>:2:10: error: A namespace cannot inherit from another type
in foo : int {}
         ~~~
")

test("
enum Foo {}
in Foo : int {}
", "
<stdin>:2:10: error: An enum cannot inherit from another type
in Foo : int {}
         ~~~
")

test("
class Foo {
  int foo
  int bar = foo
}
", "
<stdin>:3:13: error: Cannot access \"foo\" from a static context
  int bar = foo
            ~~~
")

test("
class Foo { bool foo; int bar }
Foo foo() { return Foo(1, false) }
", "
<stdin>:2:24: error: Cannot convert from type \"int\" to type \"bool\" without a cast
Foo foo() { return Foo(1, false) }
                       ^
<stdin>:2:27: error: Cannot convert from type \"bool\" to type \"int\" without a cast
Foo foo() { return Foo(1, false) }
                          ~~~~~
")

test("
class Foo { var foo }
class Bar : Foo { int bar }
Bar foo = Bar()
", "
<stdin>:1:17: error: Implicitly typed variables must be initialized
class Foo { var foo }
                ~~~
")

test("
class Foo {}
in Foo { int foo() { return this } }
", "
<stdin>:2:29: error: Cannot convert from type \"Foo\" to type \"int\"
in Foo { int foo() { return this } }
                            ~~~~
")

test("
class Foo {}
in Bar : Baz {}
class Bar : Foo {}
interface Baz {}
export void test() {
  Foo foo = Bar()
  Bar bar = Bar()
  Baz baz = Bar()
}
", "
")

test("
in Foo {}
export class Foo {}
", "
")

test("
export class Foo {}
in Foo {}
", "
")

test("
interface Foo { virtual void foo() }
interface Bar { virtual void foo() }
interface Baz : Foo, Bar { virtual void foo() }
", "
<stdin>:3:41: error: \"foo\" overrides another symbol with the same name but is missing the \"override\" modifier
interface Baz : Foo, Bar { virtual void foo() }
                                        ~~~
")

test("
interface A { virtual void foo(int foo) }
interface B : A {}
interface C : A {}
class Diamond : B, C { override void foo() {} }
", "
<stdin>:4:38: error: \"foo\" must have the same signature as the function it overrides (expected type \"void fn(int)\" but found type \"void fn()\")
class Diamond : B, C { override void foo() {} }
                                     ~~~
<stdin>:1:28: note: The overridden declaration is here
interface A { virtual void foo(int foo) }
                           ~~~
")

test("
interface A {}
interface B {}
class C : A, B { void bar() { foo() } }
in A { virtual void foo() }
in B { virtual void foo() }
var c = C()
", "
<stdin>:6:9: error: Cannot construct abstract type \"C\"
var c = C()
        ^
<stdin>:3:7: note: The type \"C\" is abstract due to member \"C.foo\"
class C : A, B { void bar() { foo() } }
      ^
")

test("
class A {}
interface B {}
class C : A, B { void bar() { foo() } }
in A { virtual void foo() {} }
in B { virtual void foo() }
var c = C()
", "
")

test("
interface A {}
interface B {}
class C : A, B { void bar() { foo() } }
in A { static void foo() {} }
in B { static void foo() {} }
", "
<stdin>:3:31: error: Reference to \"foo\" is ambiguous, could be \"A.foo\" or \"B.foo\"
class C : A, B { void bar() { foo() } }
                              ~~~
")

test("
interface A {}
interface B {}
class C : A, B { int bar() { return foo } }
in A { static int foo }
in B { static int foo }
", "
<stdin>:3:37: error: Reference to \"foo\" is ambiguous, could be \"A.foo\" or \"B.foo\"
class C : A, B { int bar() { return foo } }
                                    ~~~
")

}}

namespace core { void testTypes() {

test("
class Foo {}
int a;
bool b;
float c;
double d;
string e;
Foo f;
Foo g = Foo();
", "
")

test("
void test() {
  (void)null;
}
", "
<stdin>:2:3: error: Cannot use type \"void\" here
  (void)null;
  ~~~~~~
")

test("
void test() {
  (ns)null;
}
namespace ns {}
", "
<stdin>:2:3: error: Cannot use type \"ns\" here
  (ns)null;
  ~~~~
")

test("
void foo;
", "
<stdin>:1:1: error: Cannot use type \"void\" here
void foo;
~~~~
")

test("
ns foo;
namespace ns {}
", "
<stdin>:1:1: error: Cannot use type \"ns\" here
ns foo;
~~
")

test("
void foo() {}
", "
")

test("
void foo(void foo, void bar) {}
", "
<stdin>:1:10: error: Cannot use type \"void\" here
void foo(void foo, void bar) {}
         ~~~~
<stdin>:1:20: error: Cannot use type \"void\" here
void foo(void foo, void bar) {}
                   ~~~~
")

test("
ns foo(ns bar, ns baz) {}
namespace ns {}
", "
<stdin>:1:1: error: Cannot use type \"ns\" here
ns foo(ns bar, ns baz) {}
~~
<stdin>:1:8: error: Cannot use type \"ns\" here
ns foo(ns bar, ns baz) {}
       ~~
<stdin>:1:16: error: Cannot use type \"ns\" here
ns foo(ns bar, ns baz) {}
               ~~
")

test("
class Foo<T> {
  void foo() {
    T foo;
  }
}
", "
<stdin>:3:7: error: Cannot create a default value for type \"T\"
    T foo;
      ~~~
")

test("
interface IFoo {}
class Foo<T is IFoo> {
  void foo() {
    T foo;
  }
}
", "
")

test("
class Foo<T> {
  bool foo(T a, T b) {
    return a == b;
  }
}
", "
")

test("
interface IFoo {}
class Foo<T is IFoo> {
  bool foo(T a, T b) {
    return a == b;
  }
}
", "
")

test("
bool foo<T>(T a, T b) {
  return a == b;
}
", "
")

test("
interface IFoo {}
bool foo<T is IFoo>(T a, T b) {
  return a == b;
}
", "
")

}}

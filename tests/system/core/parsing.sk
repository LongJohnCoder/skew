namespace core { void testParsing() {

test("
var π = Math.PI;
", "
<stdin>:1:5: error: Syntax error \"π\"
var π = Math.PI;
    ^
");

test("
var x = \"π\";
", "
");

test("
var x = [0, 0.0, .0, 0.];
var y = [0f, 0.0f, .0f, 0.f];
", "
<stdin>:1:24: error: Expected IDENTIFIER but found RIGHT_BRACKET
var x = [0, 0.0, .0, 0.];
                       ^
<stdin>:2:27: error: \"f\" is not declared on type \"int\"
var y = [0f, 0.0f, .0f, 0.f];
                          ^
");

test("
int foo = 0123;
", "
<stdin>:1:11: warning: Use the prefix \"0o\" for octal numbers
int foo = 0123;
          ~~~~
");

test("
bool a = 0b1101;
bool b = 0xFF01;
bool c = 0o7071;
", "
<stdin>:1:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool a = 0b1101;
         ~~~~~~
<stdin>:2:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool b = 0xFF01;
         ~~~~~~
<stdin>:3:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool c = 0o7071;
         ~~~~~~
");

test("
bool a = 0b1102;
bool b = 0xFF0G;
bool c = 0o7078;
", "
<stdin>:1:15: error: Expected SEMICOLON but found INT_DECIMAL
bool a = 0b1102;
              ^
<stdin>:2:15: error: Expected SEMICOLON but found IDENTIFIER
bool b = 0xFF0G;
              ^
<stdin>:3:15: error: Expected SEMICOLON but found INT_DECIMAL
bool c = 0o7078;
              ^
<stdin>:1:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool a = 0b1102;
         ~~~~~
<stdin>:2:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool b = 0xFF0G;
         ~~~~~
<stdin>:3:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool c = 0o7078;
         ~~~~~
");

test("
bool a = 0b11.01;
bool b = 0xFF.01;
bool c = 0o70.71;
", "
<stdin>:1:14: error: Expected SEMICOLON but found DOUBLE
bool a = 0b11.01;
             ~~~
<stdin>:2:14: error: Expected SEMICOLON but found DOUBLE
bool b = 0xFF.01;
             ~~~
<stdin>:3:14: error: Expected SEMICOLON but found DOUBLE
bool c = 0o70.71;
             ~~~
<stdin>:1:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool a = 0b11.01;
         ~~~~
<stdin>:2:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool b = 0xFF.01;
         ~~~~
<stdin>:3:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool c = 0o70.71;
         ~~~~
");

test("
bool a = 0b11.01f;
bool b = 0xFF.01f;
bool c = 0o70.71f;
", "
<stdin>:1:14: error: Expected SEMICOLON but found FLOAT
bool a = 0b11.01f;
             ~~~~
<stdin>:2:14: error: Expected SEMICOLON but found FLOAT
bool b = 0xFF.01f;
             ~~~~
<stdin>:3:14: error: Expected SEMICOLON but found FLOAT
bool c = 0o70.71f;
             ~~~~
<stdin>:1:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool a = 0b11.01f;
         ~~~~
<stdin>:2:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool b = 0xFF.01f;
         ~~~~
<stdin>:3:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool c = 0o70.71f;
         ~~~~
");

test("
bool a = 1e+6;
bool b = 1e-6;
bool c = 1.5e+6;
bool d = 1.5e-6;
bool e = 1e-6.2;
", "
<stdin>:5:14: error: Expected SEMICOLON but found DOUBLE
bool e = 1e-6.2;
             ~~
<stdin>:1:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool a = 1e+6;
         ~~~~
<stdin>:2:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool b = 1e-6;
         ~~~~
<stdin>:3:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool c = 1.5e+6;
         ~~~~~~
<stdin>:4:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool d = 1.5e-6;
         ~~~~~~
<stdin>:5:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool e = 1e-6.2;
         ~~~~
");

test("
bool a = 1e+6f;
bool b = 1e-6f;
bool c = 1.5e+6f;
bool d = 1.5e-6f;
bool e = 1e-6.2f;
", "
<stdin>:5:14: error: Expected SEMICOLON but found FLOAT
bool e = 1e-6.2f;
             ~~~
<stdin>:1:10: error: Cannot convert from type \"float\" to type \"bool\" without a cast
bool a = 1e+6f;
         ~~~~~
<stdin>:2:10: error: Cannot convert from type \"float\" to type \"bool\" without a cast
bool b = 1e-6f;
         ~~~~~
<stdin>:3:10: error: Cannot convert from type \"float\" to type \"bool\" without a cast
bool c = 1.5e+6f;
         ~~~~~~~
<stdin>:4:10: error: Cannot convert from type \"float\" to type \"bool\" without a cast
bool d = 1.5e-6f;
         ~~~~~~~
<stdin>:5:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool e = 1e-6.2f;
         ~~~~
");

test("
int foo = \"\\x\";
int bar = \"\\xx\";
int baz = \"\\xxx\";
", "
<stdin>:1:12: error: Invalid escape sequence \"\\x\"
int foo = \"\\x\";
           ~~
<stdin>:2:12: error: Invalid escape sequence \"\\xx\"
int bar = \"\\xx\";
           ~~~
<stdin>:3:12: error: Invalid escape sequence \"\\xxx\"
int baz = \"\\xxx\";
           ~~~~
<stdin>:1:11: error: Cannot convert from type \"string\" to type \"int\"
int foo = \"\\x\";
          ~~~~
<stdin>:2:11: error: Cannot convert from type \"string\" to type \"int\"
int bar = \"\\xx\";
          ~~~~~
<stdin>:3:11: error: Cannot convert from type \"string\" to type \"int\"
int baz = \"\\xxx\";
          ~~~~~~
");

test("
int x = (in)1.5;
", "
<stdin>:1:10: error: Unexpected IN
int x = (in)1.5;
         ~~
<stdin>:1:13: error: Expected SEMICOLON but found DOUBLE
int x = (in)1.5;
            ~~~
");

test("
int x = .
", "
<stdin>:1:10: error: Expected IDENTIFIER but found END_OF_FILE
int x = .
         ^
");

test("
int x = .;
", "
<stdin>:1:10: error: Expected IDENTIFIER but found SEMICOLON
int x = .;
         ^
");

test("
enum Foo { FOO }
Foo x = Foo.;
", "
<stdin>:2:13: error: Expected IDENTIFIER but found SEMICOLON
Foo x = Foo.;
            ^
");

test("
enum Foo { FOO }
Foo x = .FOO;
bool y = (Foo).FOO;
bool z = (Foo)(.FOO);
", "
<stdin>:3:10: error: Cannot convert from type \"Foo\" to type \"bool\" without a cast
bool y = (Foo).FOO;
         ~~~~~~~~~
<stdin>:4:10: error: Cannot convert from type \"Foo\" to type \"bool\" without a cast
bool z = (Foo)(.FOO);
         ~~~~~~~~~~~
");

test("
void test() {
  for (int x, y in z) {}
}
", "
<stdin>:2:8: error: More than one variable inside a for-each loop
  for (int x, y in z) {}
       ~~~~~~~~
<stdin>:2:20: error: \"z\" is not declared
  for (int x, y in z) {}
                   ^
");

test("
if
", "
<stdin>:1:3: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
if
  ^
");

test("
while
", "
<stdin>:1:6: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
while
     ^
");

test("
for
", "
<stdin>:1:4: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
for
   ^
");

test("
do {} while
", "
<stdin>:1:12: error: Expected LEFT_PARENTHESIS but found END_OF_FILE
do {} while
           ^
<stdin>:1:1: error: Cannot use this statement here
do {} while
~~~~~~~~~~~
");

test("
do {} while;
do {} while (;
", "
<stdin>:1:12: error: Expected LEFT_PARENTHESIS but found SEMICOLON
do {} while;
           ^
<stdin>:2:14: error: Unexpected SEMICOLON
do {} while (;
             ^
<stdin>:1:1: error: Cannot use this statement here
do {} while;
~~~~~~~~~~~~
<stdin>:2:1: error: Cannot use this statement here
do {} while (;
~~~~~~~~~~~~~~
");

test("
for (int x in
", "
<stdin>:1:14: error: Unexpected END_OF_FILE
for (int x in
             ^
<stdin>:1:1: error: Cannot use this statement here
for (int x in
~~~~~~~~~~~~~
");

test("
void test() {
  for (int x in) {}
}
", "
<stdin>:2:16: error: Unexpected RIGHT_PARENTHESIS
  for (int x in) {}
               ^
");

test("
void test() {
  for () {}
  for (;) {}
}
", "
<stdin>:2:8: error: Expected SEMICOLON but found RIGHT_PARENTHESIS
  for () {}
       ^
<stdin>:3:9: error: Expected SEMICOLON but found RIGHT_PARENTHESIS
  for (;) {}
        ^
");

test("
else
", "
<stdin>:1:1: error: Unexpected ELSE
else
~~~~
");

test("
void test() {
  if () {}
}
", "
<stdin>:2:7: error: Unexpected RIGHT_PARENTHESIS
  if () {}
      ^
");

test("
Foo<Bar Baz> foo;
Foo<Bar Baz> bar;
", "
<stdin>:1:9: error: Expected END_PARAMETER_LIST but found IDENTIFIER
Foo<Bar Baz> foo;
        ~~~
<stdin>:2:9: error: Expected END_PARAMETER_LIST but found IDENTIFIER
Foo<Bar Baz> bar;
        ~~~
");

test("
class Foo :
", "
<stdin>:1:12: error: Unexpected END_OF_FILE
class Foo :
           ^
");

test("
class Foo : Bar
", "
<stdin>:1:16: error: Expected LEFT_BRACE but found END_OF_FILE
class Foo : Bar
               ^
");

test("
class Foo : {}
class Bar : {}
", "
<stdin>:1:13: error: Unexpected LEFT_BRACE
class Foo : {}
            ^
<stdin>:2:13: error: Unexpected LEFT_BRACE
class Bar : {}
            ^
");

test("
class Foo : Bar, {}
class Bar : Baz, {}
", "
<stdin>:1:18: error: Unexpected LEFT_BRACE
class Foo : Bar, {}
                 ^
<stdin>:2:18: error: Unexpected LEFT_BRACE
class Bar : Baz, {}
                 ^
<stdin>:2:13: error: \"Baz\" is not declared
class Bar : Baz, {}
            ~~~
");

test("
void test() {
  switch (0) {
    case {}
    case 1, {}
    case 2, 3, {}
  }
}
", "
<stdin>:3:10: error: Unexpected LEFT_BRACE
    case {}
         ^
<stdin>:4:13: error: Unexpected LEFT_BRACE
    case 1, {}
            ^
<stdin>:5:16: error: Unexpected LEFT_BRACE
    case 2, 3, {}
               ^
");

test("
void test() {
  int x;
  (x < x) > x;
  x < (x > x);
}
", "
<stdin>:3:4: error: No binary operator \">\" for type \"bool\" and type \"int\"
  (x < x) > x;
   ~~~~~~~~~~
<stdin>:4:3: error: No binary operator \"<\" for type \"int\" and type \"bool\"
  x < (x > x);
  ~~~~~~~~~~
");

test("
void test() {
  int x;
  x < (x) > x;
}
", "
<stdin>:3:3: error: No binary operator \">\" for type \"bool\" and type \"int\"
  x < (x) > x;
  ~~~~~~~~~~~
");

test("
void test() {
  int x;
  x < x > x;
}
", "
<stdin>:3:11: error: \"x\" is already declared
  x < x > x;
          ^
<stdin>:2:7: note: The previous declaration is here
  int x;
      ^
<stdin>:3:7: error: Unexpected expression of type \"int\"
  x < x > x;
      ^
<stdin>:3:3: error: Cannot parameterize type \"int\" because it has no type parameters
  x < x > x;
  ^
");

test("
class Foo<A is> {}
Foo<int> foo;
", "
<stdin>:1:15: error: Unexpected END_PARAMETER_LIST
class Foo<A is> {}
              ^
");

test("
class Foo {
  int foo;
}
int foo = new Foo(false);
", "
<stdin>:4:19: error: Cannot convert from type \"bool\" to type \"int\" without a cast
int foo = new Foo(false);
                  ~~~~~
<stdin>:4:11: error: No unary operator \"new\" for type \"Foo\"
int foo = new Foo(false);
          ~~~~~~~~~~~~~~
");

test("
switch (0) {
  case 0 1 {}
  case 2 {}
}
", "
<stdin>:2:10: error: Expected LEFT_BRACE but found INT_DECIMAL
  case 0 1 {}
         ^
<stdin>:3:3: error: Unexpected CASE
  case 2 {}
  ~~~~
<stdin>:3:11: error: Expected END_OF_FILE but found RIGHT_BRACE
  case 2 {}
          ^
");

test("
case 0 {}
", "
<stdin>:1:1: error: Unexpected CASE
case 0 {}
~~~~
<stdin>:1:9: error: Expected END_OF_FILE but found RIGHT_BRACE
case 0 {}
        ^
");

test("
class Foo {
  private new() {}
}
", "
");

test("
namespace foo.bar. {
  void foo() {}
}
void test() {
  foo.bar.foo();
}
", "
<stdin>:1:20: error: Expected IDENTIFIER but found LEFT_BRACE
namespace foo.bar. {
                   ^
<stdin>:5:11: error: \"foo\" is not declared on type \"foo.bar\"
  foo.bar.foo();
          ~~~
");

}}

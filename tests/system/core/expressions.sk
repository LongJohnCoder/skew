namespace core { void testExpressions() {

test("
void foo() {
  int x;
  x++;
  x--;
  ++x;
  --x;
  x = x++;
  x = x--;
  x = ++x;
  x = --x;
}
", "
<stdin>:7:7: error: Assignment expressions are not allowed inside other expressions
  x = x++;
      ~~~
<stdin>:8:7: error: Assignment expressions are not allowed inside other expressions
  x = x--;
      ~~~
<stdin>:9:7: error: Assignment expressions are not allowed inside other expressions
  x = ++x;
      ~~~
<stdin>:10:7: error: Assignment expressions are not allowed inside other expressions
  x = --x;
      ~~~
");

test("
void foo() {
  int x;
  x = (x = 1);
  x = (x += 1);
  x = (x -= 1);
  x = (x *= 1);
  x = (x /= 1);
  x = (x %= 1);
  x = (x <<= 1);
  x = (x >>= 1);
  x = (x &= 1);
  x = (x |= 1);
  x = (x ^= 1);
}
", "
<stdin>:3:8: error: Assignment expressions are not allowed inside other expressions
  x = (x = 1);
       ~~~~~
<stdin>:4:8: error: Assignment expressions are not allowed inside other expressions
  x = (x += 1);
       ~~~~~~
<stdin>:5:8: error: Assignment expressions are not allowed inside other expressions
  x = (x -= 1);
       ~~~~~~
<stdin>:6:8: error: Assignment expressions are not allowed inside other expressions
  x = (x *= 1);
       ~~~~~~
<stdin>:7:8: error: Assignment expressions are not allowed inside other expressions
  x = (x /= 1);
       ~~~~~~
<stdin>:8:8: error: Assignment expressions are not allowed inside other expressions
  x = (x %= 1);
       ~~~~~~
<stdin>:9:8: error: Assignment expressions are not allowed inside other expressions
  x = (x <<= 1);
       ~~~~~~~
<stdin>:10:8: error: Assignment expressions are not allowed inside other expressions
  x = (x >>= 1);
       ~~~~~~~
<stdin>:11:8: error: Assignment expressions are not allowed inside other expressions
  x = (x &= 1);
       ~~~~~~
<stdin>:12:8: error: Assignment expressions are not allowed inside other expressions
  x = (x |= 1);
       ~~~~~~
<stdin>:13:8: error: Assignment expressions are not allowed inside other expressions
  x = (x ^= 1);
       ~~~~~~
");

test("
void foo(int x) {
  x += 1;
  x -= 1;
  x *= 1;
  x /= 1;
  x %= 1;
  x <<= 1;
  x >>= 1;
  x &= 1;
  x |= 1;
  x ^= 1;
}
", "
");

test("
void foo(float x) {
  x += 1;
  x -= 1;
  x *= 1;
  x /= 1;
  x %= 1;
  x <<= 1;
  x >>= 1;
  x &= 1;
  x |= 1;
  x ^= 1;
}
", "
<stdin>:7:3: error: No binary operator \"<<=\" for type \"float\" and type \"int\"
  x <<= 1;
  ~~~~~~~
<stdin>:8:3: error: No binary operator \">>=\" for type \"float\" and type \"int\"
  x >>= 1;
  ~~~~~~~
<stdin>:9:3: error: No binary operator \"&=\" for type \"float\" and type \"int\"
  x &= 1;
  ~~~~~~
<stdin>:10:3: error: No binary operator \"|=\" for type \"float\" and type \"int\"
  x |= 1;
  ~~~~~~
<stdin>:11:3: error: No binary operator \"^=\" for type \"float\" and type \"int\"
  x ^= 1;
  ~~~~~~
");

test("
void foo(double x) {
  x += 1;
  x -= 1;
  x *= 1;
  x /= 1;
  x %= 1;
  x <<= 1;
  x >>= 1;
  x &= 1;
  x |= 1;
  x ^= 1;
}
", "
<stdin>:7:3: error: No binary operator \"<<=\" for type \"double\" and type \"int\"
  x <<= 1;
  ~~~~~~~
<stdin>:8:3: error: No binary operator \">>=\" for type \"double\" and type \"int\"
  x >>= 1;
  ~~~~~~~
<stdin>:9:3: error: No binary operator \"&=\" for type \"double\" and type \"int\"
  x &= 1;
  ~~~~~~
<stdin>:10:3: error: No binary operator \"|=\" for type \"double\" and type \"int\"
  x |= 1;
  ~~~~~~
<stdin>:11:3: error: No binary operator \"^=\" for type \"double\" and type \"int\"
  x ^= 1;
  ~~~~~~
");

test("
class Foo {
  @OperatorNegative void foo() {}
  @OperatorNegative void bar() {}
  @OperatorNegative void baz(int x) {}
}
void foo(Foo foo) {
  -foo;
}
", "
<stdin>:4:29: error: Expected 0 arguments because of \"@OperatorNegative\" but found 1 argument
  @OperatorNegative void baz(int x) {}
                            ~~~~~~~
<stdin>:7:3: error: Binary operator \"-\" is ambiguous, could be \"Foo.foo\" or \"Foo.bar\"
  -foo;
  ~~~~
");

test("
class Foo {
  @OperatorAdd void foo() {}
  @OperatorAdd void bar(int x) {}
  @OperatorAdd void baz(int x, int y) {}
}
void foo(Foo foo) {
  foo + 0;
}
", "
<stdin>:2:24: error: Expected 1 argument because of \"@OperatorAdd\" but found 0 arguments
  @OperatorAdd void foo() {}
                       ~~
<stdin>:4:24: error: Expected 1 argument because of \"@OperatorAdd\" but found 2 arguments
  @OperatorAdd void baz(int x, int y) {}
                       ~~~~~~~~~~~~~~
");

test("
class Foo {
  @OperatorAdd void foo(int x) {}
  @OperatorAdd void bar(double x) {}
}
enum Bar { FOO }
void foo(Foo foo) {
  foo + Bar.FOO;
  foo + (int)Bar.FOO;
  foo + (double)Bar.FOO;
}
", "
<stdin>:7:3: error: Binary operator \"+\" is ambiguous, could be \"Foo.foo\" or \"Foo.bar\"
  foo + Bar.FOO;
  ~~~~~~~~~~~~~
");

test("
class Foo {
  @OperatorAdd void foo(int x) {}
  @OperatorAdd void bar(double x) {}
  @OperatorAdd void baz(Bar x) {}
}
enum Bar { FOO }
void foo(Foo foo) {
  foo + Bar.FOO;
  foo + (int)Bar.FOO;
  foo + (double)Bar.FOO;
}
", "
");

test("
namespace ns {
  interface Foo { virtual Bar foo(); }
  interface Bar {}
}
class Bar : ns.Foo {
  bool bar(ns.Bar bar) { return foo != bar; }
}
", "
<stdin>:6:33: error: No binary operator \"!=\" for type \"ns.Bar fn()\" and type \"ns.Bar\"
  bool bar(ns.Bar bar) { return foo != bar; }
                                ~~~~~~~~~~
");

}}

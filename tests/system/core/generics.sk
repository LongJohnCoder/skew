test("
class Foo<T is int> {}
", "
<stdin>:1:16: error: Cannot use type \"int\" as a type parameter bound
class Foo<T is int> {}
               ~~~
");

test("
class Foo<T is void> {}
", "
<stdin>:1:16: error: Cannot use type \"void\" as a type parameter bound
class Foo<T is void> {}
               ~~~~
");

test("
class Foo<T is Bar> {}
class Bar {}
", "
<stdin>:1:16: error: Cannot use type \"Bar\" as a type parameter bound
class Foo<T is Bar> {}
               ~~~
");

test("
class Foo<T is IBar> {}
interface IBar {}
", "
");

test("
class Foo<T is IBar<int>> {}
interface IBar<T> {}
", "
");

test("
class Foo<A, B is A> {}
", "
<stdin>:1:19: error: Cannot use type \"A\" as a type parameter bound
class Foo<A, B is A> {}
                  ^
");

test("
class Foo<A is B, B> {}
", "
<stdin>:1:16: error: Cannot use type \"B\" as a type parameter bound
class Foo<A is B, B> {}
               ^
");

test("
interface IFoo {
  bool foo(int bar);
}
class Foo<T is IFoo> {
  int foo(T value) {
    return value.foo(false);
  }
}
", "
<stdin>:6:22: error: Cannot convert from type \"bool\" to type \"int\" without a cast
    return value.foo(false);
                     ~~~~~
<stdin>:6:12: error: Cannot convert from type \"bool\" to type \"int\" without a cast
    return value.foo(false);
           ~~~~~~~~~~~~~~~~
");

test("
int<int> foo = 0;
void fn()<int> bar = 0;
", "
<stdin>:1:1: error: Cannot parameterize type \"int\" because it has no type parameters
int<int> foo = 0;
~~~
<stdin>:2:1: error: Cannot parameterize type \"void fn()\" because it has no type parameters
void fn()<int> bar = 0;
~~~~~~~~~
");

test("
class Foo<T> {}
Foo<int, int> foo = 0;
", "
<stdin>:2:4: error: Expected 1 type parameter but found 2 type parameters
Foo<int, int> foo = 0;
   ~~~~~~~~~~
");

test("
Foo<Bar> foo = 0;
Foo<Baz> bar = 0;
class Foo<T is IFoo> {}
interface IFoo {}
class Bar : IFoo {}
class Baz {}
", "
<stdin>:1:16: error: Cannot convert from type \"int\" to type \"Foo<Bar>\"
Foo<Bar> foo = 0;
               ^
<stdin>:2:5: error: Cannot convert from type \"Baz\" to type \"IFoo\"
Foo<Baz> bar = 0;
    ~~~
");

test("
Foo<Bar><Bar> foo = 0;
Foo<Bar><Baz> bar = 0;
class Foo<T> {}
class Bar {}
class Baz {}
", "
<stdin>:1:1: error: Cannot parameterize type \"Foo<Bar>\" because it is already parameterized
Foo<Bar><Bar> foo = 0;
~~~~~~~~
<stdin>:2:1: error: Cannot parameterize type \"Foo<Bar>\" because it is already parameterized
Foo<Bar><Baz> bar = 0;
~~~~~~~~
");

test("
Foo<int, bool> foo = bar;
Foo<bool, int> bar = foo;
class Foo<A, B> {}
", "
<stdin>:1:22: error: Cannot convert from type \"Foo<bool, int>\" to type \"Foo<int, bool>\"
Foo<int, bool> foo = bar;
                     ~~~
<stdin>:2:22: error: Cannot convert from type \"Foo<int, bool>\" to type \"Foo<bool, int>\"
Foo<bool, int> bar = foo;
                     ~~~
");

test("
class Foo<A, B> { A foo(B foo); }
bool foo(Foo<int, bool> foo) { return foo.foo(0); }
", "
<stdin>:2:47: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool foo(Foo<int, bool> foo) { return foo.foo(0); }
                                              ^
<stdin>:2:39: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool foo(Foo<int, bool> foo) { return foo.foo(0); }
                                      ~~~~~~~~~~
");

test("
class Foo<A, B> { A foo(B bar) { return default(A); } }
class Bar<T> : Foo<int, T> {}
class Baz : Bar<bool> {}
bool bar = Baz().foo(0);
", "
<stdin>:4:22: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool bar = Baz().foo(0);
                     ^
<stdin>:4:12: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool bar = Baz().foo(0);
           ~~~~~~~~~~~~
");

test("
interface IFoo<T> { T foo(); }
class Foo : IFoo<int>, IFoo<float> {}
", "
<stdin>:2:7: error: Member \"Foo.foo\" has an ambiguous inherited type, could be type \"int fn()\" or type \"float fn()\"
class Foo : IFoo<int>, IFoo<float> {}
      ~~~
");

test("
class Foo<T> { T foo(); }
bool foo = Foo.foo();
", "
<stdin>:2:16: error: Cannot access instance member \"foo\" from a static context
bool foo = Foo.foo();
               ~~~
<stdin>:2:12: error: Cannot convert from type \"T\" to type \"bool\"
bool foo = Foo.foo();
           ~~~~~~~~~
");

test("
class Foo<T> {
  T foo = 0;
}
Foo.T foo = 0;
", "
<stdin>:2:11: error: Cannot convert from type \"int\" to type \"T\"
  T foo = 0;
          ^
<stdin>:4:5: error: \"T\" is not declared on type \"Foo<T>\"
Foo.T foo = 0;
    ^
");

test("
class Foo<T> {
  static T foo;
  static T bar() { return default(T); }
}
bool foo = Foo.foo;
bool bar = Foo.bar();
", "
<stdin>:2:10: error: Cannot access \"T\" from a static context
  static T foo;
         ^
<stdin>:3:10: error: Cannot access \"T\" from a static context
  static T bar() { return default(T); }
         ^
<stdin>:3:35: error: Cannot access \"T\" from a static context
  static T bar() { return default(T); }
                                  ^
");

test("
class Foo<T> {}
in Foo { T foo() {} }
", "
<stdin>:2:10: error: \"T\" is not declared
in Foo { T foo() {} }
         ^
");

test("
class Foo<F> {
  class Bar<B is F> : F {
    B bar() { return F(); }
  }
}
", "
<stdin>:2:3: error: Cannot use this statement here
  class Bar<B is F> : F {
  ~~~~~~~~~~~~~~~~~~~~~~~
<stdin>:2:18: error: Cannot access \"F\" from a static context
  class Bar<B is F> : F {
                 ^
<stdin>:2:23: error: Cannot access \"F\" from a static context
  class Bar<B is F> : F {
                      ^
<stdin>:3:22: error: Cannot access \"F\" from a static context
    B bar() { return F(); }
                     ^
");

test("
class Foo<T> { new(bool foo) {} }
int foo = Foo(0);
int bar = Foo<int>(0);
", "
<stdin>:2:11: error: Cannot use unparameterized type \"Foo<T>\"
int foo = Foo(0);
          ~~~
<stdin>:3:20: error: Cannot convert from type \"int\" to type \"bool\" without a cast
int bar = Foo<int>(0);
                   ^
<stdin>:3:11: error: Cannot convert from type \"Foo<int>\" to type \"int\"
int bar = Foo<int>(0);
          ~~~~~~~~~~~
");

test("
class Foo<A, B is IFoo<A>> {}
interface IFoo<T> { T foo(); }
Foo<int, IFoo<bool>> foo;
", "
<stdin>:3:10: error: Cannot convert from type \"IFoo<bool>\" to type \"IFoo<int>\"
Foo<int, IFoo<bool>> foo;
         ~~~~~~~~~~
");

test("
class Foo<A is IFoo<B>, B> {}
interface IFoo<T> { T foo(); }
Foo<IFoo<bool>, int> foo;
", "
<stdin>:3:5: error: Cannot convert from type \"IFoo<bool>\" to type \"IFoo<int>\"
Foo<IFoo<bool>, int> foo;
    ~~~~~~~~~~
");

test("
class Foo<A, B is IFoo<A>, C is IFoo<B>> {}
interface IFoo<T> { T foo(); }
Foo<int, bool, float> a;
Foo<int, IFoo<int>, float> b;
Foo<int, IFoo<int>, IFoo<float>> c;
Foo<int, IFoo<int>, IFoo<IFoo<int>>> d;
", "
<stdin>:3:10: error: Cannot convert from type \"bool\" to type \"IFoo<int>\"
Foo<int, bool, float> a;
         ~~~~
<stdin>:4:21: error: Cannot convert from type \"float\" to type \"IFoo<IFoo<int>>\"
Foo<int, IFoo<int>, float> b;
                    ~~~~~
<stdin>:5:21: error: Cannot convert from type \"IFoo<float>\" to type \"IFoo<IFoo<int>>\"
Foo<int, IFoo<int>, IFoo<float>> c;
                    ~~~~~~~~~~~
");

test("
class Foo<C is IFoo<B>, B is IFoo<A>, A> {}
interface IFoo<T> { T foo(); }
Foo<float, bool, int> a;
Foo<float, IFoo<int>, int> b;
Foo<IFoo<float>, IFoo<int>, int> c;
Foo<IFoo<IFoo<int>>, IFoo<int>, int> d;
", "
<stdin>:3:12: error: Cannot convert from type \"bool\" to type \"IFoo<int>\"
Foo<float, bool, int> a;
           ~~~~
<stdin>:4:5: error: Cannot convert from type \"float\" to type \"IFoo<IFoo<int>>\"
Foo<float, IFoo<int>, int> b;
    ~~~~~
<stdin>:5:5: error: Cannot convert from type \"IFoo<float>\" to type \"IFoo<IFoo<int>>\"
Foo<IFoo<float>, IFoo<int>, int> c;
    ~~~~~~~~~~~
");

test("
class Foo<T> {
  Foo<Foo<T>> foo() { return default(Foo<Foo<T>>); }
}
int x = Foo<int>().foo();
", "
<stdin>:4:9: error: Cannot convert from type \"Foo<Foo<int>>\" to type \"int\"
int x = Foo<int>().foo();
        ~~~~~~~~~~~~~~~~
");

test("
class Foo<A> {
  Bar<A> foo() { return Bar<A>(); }
}
class Bar<B> {
  B bar() { return default(B); }
  B baz() { return default(B); }
}
bool a = Foo<int>().foo().bar();
bool b = Bar<int>().baz();
bool c = Foo<double>().foo().bar();
bool d = Bar<double>().baz();
", "
<stdin>:8:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool a = Foo<int>().foo().bar();
         ~~~~~~~~~~~~~~~~~~~~~~
<stdin>:9:10: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool b = Bar<int>().baz();
         ~~~~~~~~~~~~~~~~
<stdin>:10:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool c = Foo<double>().foo().bar();
         ~~~~~~~~~~~~~~~~~~~~~~~~~
<stdin>:11:10: error: Cannot convert from type \"double\" to type \"bool\" without a cast
bool d = Bar<double>().baz();
         ~~~~~~~~~~~~~~~~~~~
");

test("
class Foo<A, B, C> {
  Bar<A, B> foo() { return Bar<A, B>(); }
}
class Bar<D, E> {
  Baz<D> bar() { return Baz<D>(); }
}
class Baz<F> {
  F baz() { return default(F); }
}
bool foo = Foo<int, bool, float>().foo().bar().baz();
", "
<stdin>:10:12: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool foo = Foo<int, bool, float>().foo().bar().baz();
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
");

test("
class Foo<A, B, C> {
  Bar<A, string> foo() { return Bar<A, string>(); }
}
class Bar<D, E> {
  Baz<D> bar() { return Baz<D>(); }
}
class Baz<F> {
  F baz() { return default(F); }
}
bool foo = Foo<int, bool, float>().foo().bar().baz();
", "
<stdin>:10:12: error: Cannot convert from type \"int\" to type \"bool\" without a cast
bool foo = Foo<int, bool, float>().foo().bar().baz();
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
");

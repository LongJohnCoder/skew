namespace core { void calls() {

test("
void test() {
  0();
}
", "
<stdin>:2:3: error: Cannot call type \"int\"
  0();
  ^
");

test("
void fn() foo = null;
int bar = foo(100);
", "
<stdin>:2:14: error: Expected 0 arguments but found 1 argument
int bar = foo(100);
             ~~~~~
<stdin>:2:11: error: Cannot convert from type \"void\" to type \"int\"
int bar = foo(100);
          ~~~~~~~~
");

test("
void foo() {}
int bar = foo(100);
", "
<stdin>:2:14: error: Expected 0 arguments but found 1 argument
int bar = foo(100);
             ~~~~~
<stdin>:2:11: error: Cannot convert from type \"void\" to type \"int\"
int bar = foo(100);
          ~~~~~~~~
");

test("
bool foo(int x, bool y) { return false; }
int bar = foo(false, 100);
", "
<stdin>:2:15: error: Cannot convert from type \"bool\" to type \"int\" without a cast
int bar = foo(false, 100);
              ~~~~~
<stdin>:2:22: error: Cannot convert from type \"int\" to type \"bool\" without a cast
int bar = foo(false, 100);
                     ~~~
<stdin>:2:11: error: Cannot convert from type \"bool\" to type \"int\" without a cast
int bar = foo(false, 100);
          ~~~~~~~~~~~~~~~
");

test("
export void test() {
  void fn() fn(void fn()) foo = null;
  void fn() bar = foo(bar);
}
", "
");

test("
void fn() fn(void fn()) foo = null;
int fn() bar = foo(bar);
", "
<stdin>:2:20: error: Cannot convert from type \"int fn()\" to type \"void fn()\"
int fn() bar = foo(bar);
                   ~~~
<stdin>:2:16: error: Cannot convert from type \"void fn()\" to type \"int fn()\"
int fn() bar = foo(bar);
               ~~~~~~~~
");

test("
void foo() {}
var bar = foo;
", "
<stdin>:2:11: error: Raw function references are not allowed (call the function instead)
var bar = foo;
          ~~~
");

}}

namespace core { void testMerging() {

test("
in Foo {}
class Foo {}
", "
")

test("
in Foo {}
interface Foo {}
", "
")

test("
in Foo {}
namespace Foo {}
", "
")

test("
in Foo {}
enum Foo {}
", "
")

test("
in Foo {}
enum flags Foo {}
", "
")

test("
int foo
in foo {}
", "
<stdin>:2:4: error: \"foo\" is already declared
in foo {}
   ~~~
<stdin>:1:5: note: The previous declaration is here
int foo
    ~~~
")

test("
in foo {}
int foo
", "
<stdin>:2:5: error: \"foo\" is already declared
int foo
    ~~~
<stdin>:1:4: note: The previous declaration is here
in foo {}
   ~~~
<stdin>:1:4: error: No type named \"foo\" to extend
in foo {}
   ~~~
")

test("
in foo {}
void foo() {}
", "
<stdin>:2:6: error: \"foo\" is already declared
void foo() {}
     ~~~
<stdin>:1:4: note: The previous declaration is here
in foo {}
   ~~~
<stdin>:1:4: error: No type named \"foo\" to extend
in foo {}
   ~~~
")

test("
void foo() { return 100 }
int foo = false
", "
<stdin>:2:5: error: \"foo\" is already declared
int foo = false
    ~~~
<stdin>:1:6: note: The previous declaration is here
void foo() { return 100 }
     ~~~
<stdin>:1:21: error: Cannot convert from type \"int\" to type \"void\"
void foo() { return 100 }
                    ~~~
<stdin>:2:11: error: Cannot convert from type \"bool\" to type \"int\" without a cast
int foo = false
          ~~~~~
")

test("
int foo = false
void foo() { return 100 }
", "
<stdin>:2:6: error: \"foo\" is already declared
void foo() { return 100 }
     ~~~
<stdin>:1:5: note: The previous declaration is here
int foo = false
    ~~~
<stdin>:1:11: error: Cannot convert from type \"bool\" to type \"int\" without a cast
int foo = false
          ~~~~~
<stdin>:2:21: error: Cannot convert from type \"int\" to type \"void\"
void foo() { return 100 }
                    ~~~
")

test("
namespace Foo {}
namespace Foo {}
", "
")

test("
class Foo {}
class Foo {}
", "
<stdin>:2:7: error: \"Foo\" is already declared
class Foo {}
      ~~~
<stdin>:1:7: note: The previous declaration is here
class Foo {}
      ~~~
")

test("
class Foo {}
interface Foo {}
", "
<stdin>:2:11: error: \"Foo\" is already declared
interface Foo {}
          ~~~
<stdin>:1:7: note: The previous declaration is here
class Foo {}
      ~~~
")

test("
in Foo {}
", "
<stdin>:1:4: error: No type named \"Foo\" to extend
in Foo {}
   ~~~
")

test("
in Foo {}
in Foo {}
", "
<stdin>:1:4: error: No type named \"Foo\" to extend
in Foo {}
   ~~~
")

test("
namespace Foo.Bar { class Baz {} }
namespace Foo.Bar { class Baz {} }
", "
<stdin>:2:27: error: \"Baz\" is already declared
namespace Foo.Bar { class Baz {} }
                          ~~~
<stdin>:1:27: note: The previous declaration is here
namespace Foo.Bar { class Baz {} }
                          ~~~
")

test("
namespace Foo { in Bar { class Baz {} } }
namespace Foo.Bar { class Baz {} }
", "
<stdin>:2:27: error: \"Baz\" is already declared
namespace Foo.Bar { class Baz {} }
                          ~~~
<stdin>:1:32: note: The previous declaration is here
namespace Foo { in Bar { class Baz {} } }
                               ~~~
")

test("
export class Foo {}
import in Foo {}
", "
<stdin>:2:1: error: Cannot use the \"import\" modifier on an extension block
import in Foo {}
~~~~~~
")

test("
import class Foo {}
export in Foo {}
", "
<stdin>:2:1: error: Cannot use the \"export\" modifier on an extension block
export in Foo {}
~~~~~~
")

test("
class Foo<T> {}
int T
", "
")

test("
class Foo<T> {
  int T
}
", "
<stdin>:1:11: error: \"T\" is already declared
class Foo<T> {
          ^
<stdin>:2:7: note: The previous declaration is here
  int T
      ^
")

test("
class Foo<T, T> {}
in Foo {}
", "
<stdin>:1:14: error: \"T\" is already declared
class Foo<T, T> {}
             ^
<stdin>:1:11: note: The previous declaration is here
class Foo<T, T> {}
          ^
")

test("
in Foo {}
class Foo<T, T> {}
", "
<stdin>:2:14: error: \"T\" is already declared
class Foo<T, T> {}
             ^
<stdin>:2:11: note: The previous declaration is here
class Foo<T, T> {}
          ^
")

test("
void test() {
  bool foo
  for (int foo = 0;;) {
    string foo
  }
}
", "
<stdin>:4:12: error: \"foo\" is already declared
    string foo
           ~~~
<stdin>:3:12: note: The previous declaration is here
  for (int foo = 0;;) {
           ~~~
")

test("
foo void
", "
<stdin>:1:5: error: \"void\" is already declared
foo void
    ~~~~
<compiler>/primitives.sk:1:14: note: The previous declaration is here
import class void {}
             ~~~~
<stdin>:1:1: error: \"foo\" is not declared
foo void
~~~
")

test("
foo void() {}
", "
<stdin>:1:5: error: \"void\" is already declared
foo void() {}
    ~~~~
<compiler>/primitives.sk:1:14: note: The previous declaration is here
import class void {}
             ~~~~
<stdin>:1:1: error: \"foo\" is not declared
foo void() {}
~~~
")

}}
